id,method-name,parametes-method,return-method,field-access,methods-method,contain-class-name,attributes-class,methods-class,target-class-name,attributes-class,methods-class,tag,move-tag
0,is  Array  Length  Access,Same  Len  Transfer,boolean,,equals  get  Field  Name  get  Kind  get  Type  get  Receiver,Same  Len  Transfer,a  Type  Factory  unknown,Same  Len  Transfer  get  Length  Receiver  visit  Assignment  propagate  Combined  Same  Len  refine  Eq  get  Anno  strengthen  Annotation  Of  Equal  To  add  Information  From  Preconditions,Node,block  lvalue  assignment  Context  in  Source  type,Node  get  Block  set  Block  get  Tree  get  Type  accept  is  L  Value  set  L  Value  get  In  Source  set  In  Source  get  Assignment  Context  set  Assignment  Context  get  Operands  get  Transitive  Operands,0,0
1,is  Array  Length  Access,Same  Len  Transfer,boolean,,equals  get  Field  Name  get  Kind  get  Type  get  Receiver,Node,block  lvalue  assignment  Context  in  Source  type,Node  get  Block  set  Block  get  Tree  get  Type  accept  is  L  Value  set  L  Value  get  In  Source  set  In  Source  get  Assignment  Context  set  Assignment  Context  get  Operands  get  Transitive  Operands,Same  Len  Transfer,a  Type  Factory  unknown,Same  Len  Transfer  get  Length  Receiver  visit  Assignment  propagate  Combined  Same  Len  refine  Eq  get  Anno  strengthen  Annotation  Of  Equal  To  add  Information  From  Preconditions,1,1
2,eval  Constant  Term,Flow  Expressions  Receiver  Offset  Equation,Integer,,get  Value  equals  to  String  get  Simple  Name  get  Element  get  Receiver  get  Value  length  get  Element  get  Exact  Value  get  Type  Factory  Of  Subchecker  int  Value,Offset  Equation,zero  neg  one  added  Terms  subtracted  Terms  int  Value  error,Offset  Equation  Offset  Equation  has  Error  get  Error  equals  hash  Code  to  String  remove  Sequence  Lengths  copy  Add  plus  minus  less  Than  Or  Equal  is  Int  get  Int  is  Neg  One  is  Non  Negative  is  Negative  Or  Zero  standardize  And  Viewpoint  Adapt  Expressions  standardize  And  Viewpoint  Adapt  Expressions  standardize  And  Viewpoint  Adapt  Expressions  add  Term  add  Int  get  Int  Offset  Equation  create  Offset  For  Int  create  Offset  From  Java  Expression  is  Int  parse  Int  index  Of  create  Offset  From  Nodes  Value  create  Offset  From  Node  create  Offset  From  Node,Base  Annotated  Type  Factory,,Base  Annotated  Type  Factory  Base  Annotated  Type  Factory  create  Flow  Analysis,0,0
3,eval  Constant  Term,Flow  Expressions  Receiver  Offset  Equation,Integer,,get  Value  equals  to  String  get  Simple  Name  get  Element  get  Receiver  get  Value  length  get  Element  get  Exact  Value  get  Type  Factory  Of  Subchecker  int  Value,Base  Annotated  Type  Factory,,Base  Annotated  Type  Factory  Base  Annotated  Type  Factory  create  Flow  Analysis,Offset  Equation,zero  neg  one  added  Terms  subtracted  Terms  int  Value  error,Offset  Equation  Offset  Equation  has  Error  get  Error  equals  hash  Code  to  String  remove  Sequence  Lengths  copy  Add  plus  minus  less  Than  Or  Equal  is  Int  get  Int  is  Neg  One  is  Non  Negative  is  Negative  Or  Zero  standardize  And  Viewpoint  Adapt  Expressions  standardize  And  Viewpoint  Adapt  Expressions  standardize  And  Viewpoint  Adapt  Expressions  add  Term  add  Int  get  Int  Offset  Equation  create  Offset  For  Int  create  Offset  From  Java  Expression  is  Int  parse  Int  index  Of  create  Offset  From  Nodes  Value  create  Offset  From  Node  create  Offset  From  Node,1,1
4,test  Same  Len,Less  Than  Length  Of  List  String  String  Upper  Bound  Visitor,boolean,,is  Less  Than  Length  Qualifier  is  Valid  Replacement,Upper  Bound  Visitor,upper  bound  upper  bound  const  upper  bound  range  to  not  ltel  not  final  hss,Upper  Bound  Visitor  visit  Array  Access  visit  Annotation  check  Effectively  Final  And  Parsable  visit  Access  common  Assignment  Check  common  Assignment  Check  relaxed  Common  Assignment  get  Receiver  And  Offset  From  Java  Expression  String  get  Receiver  From  Java  Expression  String  negate  String  check  Min  Len  relaxed  Common  Assignment  Check  process  Subsequence  For  L  H  S  test  Min  Len,U  B  Qualifier,Less  Than  Length  Of  map  Upper  Bound  Unknown  Qualifier  unknown  Upper  Bound  Bottom  Qualifier  bottom  Poly  Qualifier  poly,create  U  B  Qualifier  create  U  B  Qualifier  parse  L  T  Length  Of  parse  L  T  Eq  Length  Of  parse  L  T  O  M  Length  Of  create  U  B  Qualifier  create  U  B  Qualifier  create  U  B  Qualifier  create  U  B  Qualifier  plus  Offset  plus  Offset  minus  Offset  minus  Offset  is  Less  Than  Length  Qualifier  is  Unknown  is  Bottom  is  Poly  is  Subtype  lub  widen  Upper  Bound  glb  is  Less  Than  Length  Of  is  Less  Than  Length  Of  Any  has  Sequence  With  Offset  has  Sequence  With  Offset  is  Less  Than  Or  Equal  To  Less  Than  Length  Of  has  Sequence  With  Offset  has  Sequence  With  Offset  is  Less  Than  Or  Equal  To  is  Less  Than  Length  Of  Any  is  Less  Than  Length  Of  convert  To  Annotation  convert  To  Substring  Index  Annotation  convert  To  Annotation  equals  contains  Same  hash  Code  is  Less  Than  Length  Qualifier  is  Subtype  is  Subtype  Offset  lub  widen  Upper  Bound  widen  Lub  glb  simplify  Offsets  plus  Offset  minus  Offset  pluse  Or  Minus  Offset  plus  Offset  minus  Offset  remove  Sequence  Length  Access  compute  remove  Sequence  Length  Access  And  Neg  compute  add  Offset  compute  divide  compute  is  Value  Plus  Offset  Less  Than  Min  Len  is  Valid  Replacement  to  String  get  Sequences  remove  Offset  compute  compute  New  Offsets  Upper  Bound  Unknown  Qualifier  is  Subtype  is  Unknown  lub  glb  to  String  is  Bottom  is  Subtype  lub  glb  to  String  is  Poly  is  Subtype  lub  glb,0,0
5,test  Same  Len,Less  Than  Length  Of  List  String  String  Upper  Bound  Visitor,boolean,,is  Less  Than  Length  Qualifier  is  Valid  Replacement,U  B  Qualifier,Less  Than  Length  Of  map  Upper  Bound  Unknown  Qualifier  unknown  Upper  Bound  Bottom  Qualifier  bottom  Poly  Qualifier  poly,create  U  B  Qualifier  create  U  B  Qualifier  parse  L  T  Length  Of  parse  L  T  Eq  Length  Of  parse  L  T  O  M  Length  Of  create  U  B  Qualifier  create  U  B  Qualifier  create  U  B  Qualifier  create  U  B  Qualifier  plus  Offset  plus  Offset  minus  Offset  minus  Offset  is  Less  Than  Length  Qualifier  is  Unknown  is  Bottom  is  Poly  is  Subtype  lub  widen  Upper  Bound  glb  is  Less  Than  Length  Of  is  Less  Than  Length  Of  Any  has  Sequence  With  Offset  has  Sequence  With  Offset  is  Less  Than  Or  Equal  To  Less  Than  Length  Of  has  Sequence  With  Offset  has  Sequence  With  Offset  is  Less  Than  Or  Equal  To  is  Less  Than  Length  Of  Any  is  Less  Than  Length  Of  convert  To  Annotation  convert  To  Substring  Index  Annotation  convert  To  Annotation  equals  contains  Same  hash  Code  is  Less  Than  Length  Qualifier  is  Subtype  is  Subtype  Offset  lub  widen  Upper  Bound  widen  Lub  glb  simplify  Offsets  plus  Offset  minus  Offset  pluse  Or  Minus  Offset  plus  Offset  minus  Offset  remove  Sequence  Length  Access  compute  remove  Sequence  Length  Access  And  Neg  compute  add  Offset  compute  divide  compute  is  Value  Plus  Offset  Less  Than  Min  Len  is  Valid  Replacement  to  String  get  Sequences  remove  Offset  compute  compute  New  Offsets  Upper  Bound  Unknown  Qualifier  is  Subtype  is  Unknown  lub  glb  to  String  is  Bottom  is  Subtype  lub  glb  to  String  is  Poly  is  Subtype  lub  glb,Upper  Bound  Visitor,upper  bound  upper  bound  const  upper  bound  range  to  not  ltel  not  final  hss,Upper  Bound  Visitor  visit  Array  Access  visit  Annotation  check  Effectively  Final  And  Parsable  visit  Access  common  Assignment  Check  common  Assignment  Check  relaxed  Common  Assignment  get  Receiver  And  Offset  From  Java  Expression  String  get  Receiver  From  Java  Expression  String  negate  String  check  Min  Len  relaxed  Common  Assignment  Check  process  Subsequence  For  L  H  S  test  Min  Len,1,1
6,add  Upper  Bound  Type  From  Value  Type,Annotated  Type  Mirror  Upper  Bound  Annotated  Type  Factory,void,,contains  Same  By  Class  get  Annotations  replace  Annotation,Upper  Bound  Annotated  Type  Factory,unknown  bottom  poly  imf  Upper  Bound  Type  Annotator  Upper  Bound  Qualifier  Hierarchy  Upper  Bound  Tree  Annotator,Upper  Bound  Annotated  Type  Factory  get  Method  Identifier  create  Supported  Type  Qualifiers  get  Value  Annotated  Type  Factory  get  Search  Index  Annotated  Type  Factory  get  Substring  Index  Annotated  Type  Factory  get  Same  Len  Annotated  Type  Factory  get  Lower  Bound  Annotated  Type  Factory  get  Less  Than  Annotated  Type  Factory  add  Computed  Type  Annotations  add  Computed  Type  Annotations  create  Type  Annotator  Upper  Bound  Type  Annotator  scan  create  Dependent  Types  Helper  same  Len  Annotation  From  Tree  is  Math  Min  is  Random  Next  Int  create  L  T  Length  Of  Annotation  create  L  T  Eq  Length  Of  Annotation  has  Lower  Bound  Type  By  Class  create  Qualifier  Hierarchy  Upper  Bound  Qualifier  Hierarchy  greatest  Lower  Bound  least  Upper  Bound  widened  Upper  Bound  number  Of  Iterations  Before  Widening  is  Subtype  create  Tree  Annotator  Upper  Bound  Tree  Annotator  visit  Method  Invocation  visit  Unary  add  Annotation  For  Bitwise  Complement  visit  Compound  Assignment  visit  Binary  add  Annotation  For  Right  Shift  add  Annotation  For  And  get  Length  Sequence  Tree  add  Annotation  For  Remainder  add  Annotation  For  Divide  plus  Tree  Divide  By  Val  check  For  Math  Random  Special  Case  add  Annotation  For  Multiply  convert  U  B  Qualifier  To  Annotation  from  Less  Than  from  Less  Than  Or  Equal  from  Less  Than  Or  Equal,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
7,add  Upper  Bound  Type  From  Value  Type,Annotated  Type  Mirror  Upper  Bound  Annotated  Type  Factory,void,,contains  Same  By  Class  get  Annotations  replace  Annotation,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Upper  Bound  Annotated  Type  Factory,unknown  bottom  poly  imf  Upper  Bound  Type  Annotator  Upper  Bound  Qualifier  Hierarchy  Upper  Bound  Tree  Annotator,Upper  Bound  Annotated  Type  Factory  get  Method  Identifier  create  Supported  Type  Qualifiers  get  Value  Annotated  Type  Factory  get  Search  Index  Annotated  Type  Factory  get  Substring  Index  Annotated  Type  Factory  get  Same  Len  Annotated  Type  Factory  get  Lower  Bound  Annotated  Type  Factory  get  Less  Than  Annotated  Type  Factory  add  Computed  Type  Annotations  add  Computed  Type  Annotations  create  Type  Annotator  Upper  Bound  Type  Annotator  scan  create  Dependent  Types  Helper  same  Len  Annotation  From  Tree  is  Math  Min  is  Random  Next  Int  create  L  T  Length  Of  Annotation  create  L  T  Eq  Length  Of  Annotation  has  Lower  Bound  Type  By  Class  create  Qualifier  Hierarchy  Upper  Bound  Qualifier  Hierarchy  greatest  Lower  Bound  least  Upper  Bound  widened  Upper  Bound  number  Of  Iterations  Before  Widening  is  Subtype  create  Tree  Annotator  Upper  Bound  Tree  Annotator  visit  Method  Invocation  visit  Unary  add  Annotation  For  Bitwise  Complement  visit  Compound  Assignment  visit  Binary  add  Annotation  For  Right  Shift  add  Annotation  For  And  get  Length  Sequence  Tree  add  Annotation  For  Remainder  add  Annotation  For  Divide  plus  Tree  Divide  By  Val  check  For  Math  Random  Special  Case  add  Annotation  For  Multiply  convert  U  B  Qualifier  To  Annotation  from  Less  Than  from  Less  Than  Or  Equal  from  Less  Than  Or  Equal,1,1
8,is  Length  Of  Method  Invocation,Tree,boolean,,get  Kind  is  Length  Of  Method  Invocation  element  From  Use,Index  Method  Identifier,math  Random  random  Next  Double  random  Next  Int  string  Length  math  Min  Methods  math  Max  Methods  factory,Index  Method  Identifier  is  Math  Min  is  Math  Max  is  Math  Random  is  Random  Next  Double  is  Random  Next  Int  is  Length  Of  Method  Invocation  is  Length  Of  Method  Invocation,Node,block  lvalue  assignment  Context  in  Source  type,Node  get  Block  set  Block  get  Tree  get  Type  accept  is  L  Value  set  L  Value  get  In  Source  set  In  Source  get  Assignment  Context  set  Assignment  Context  get  Operands  get  Transitive  Operands  is  Array  Length  Access,0,0
9,is  Length  Of  Method  Invocation,Tree,boolean,,get  Kind  is  Length  Of  Method  Invocation  element  From  Use,Node,block  lvalue  assignment  Context  in  Source  type,Node  get  Block  set  Block  get  Tree  get  Type  accept  is  L  Value  set  L  Value  get  In  Source  set  In  Source  get  Assignment  Context  set  Assignment  Context  get  Operands  get  Transitive  Operands  is  Array  Length  Access,Index  Method  Identifier,math  Random  random  Next  Double  random  Next  Int  string  Length  math  Min  Methods  math  Max  Methods  factory,Index  Method  Identifier  is  Math  Min  is  Math  Max  is  Math  Random  is  Random  Next  Double  is  Random  Next  Int  is  Length  Of  Method  Invocation  is  Length  Of  Method  Invocation,1,0
10,have  Pair  Of  Units,Annotated  Type  Mirror  Annotation  Mirror  Annotated  Type  Mirror  Annotation  Mirror,boolean,,has  Specific  Unit  has  Specific  Unit,Units  Relations  Default,m  km  mm  m  km  mm  s  h  m  P  E  Rs  km  P  E  Rh  m  P  E  Rs  elements,init  multiplication  division  both  Have  Specific  Prefix  have  Pair  Of  Units  Ignoring  Order,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
11,have  Pair  Of  Units,Annotated  Type  Mirror  Annotation  Mirror  Annotated  Type  Mirror  Annotation  Mirror,boolean,,has  Specific  Unit  has  Specific  Unit,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Units  Relations  Default,m  km  mm  m  km  mm  s  h  m  P  E  Rs  km  P  E  Rh  m  P  E  Rs  elements,init  multiplication  division  both  Have  Specific  Prefix  have  Pair  Of  Units  Ignoring  Order,1,0
12,propagate  New  Class  Tree,New  Class  Tree  Annotated  Type  Mirror  Key  For  Propagator,void,,get  Assignment  Context  get  Visitor  State  get  Kind  get  Path  assigned  To  get  Kind  propagate,Key  For  Propagator,Propagation  Direction  unknown  keyfor  Key  For  Propagation  Replacer  env,Key  For  Propagator  propagate  Key  For  Propagation  Replacer  replace  Annotations,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
13,propagate  New  Class  Tree,New  Class  Tree  Annotated  Type  Mirror  Key  For  Propagator,void,,get  Assignment  Context  get  Visitor  State  get  Kind  get  Path  assigned  To  get  Kind  propagate,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Key  For  Propagator,Propagation  Direction  unknown  keyfor  Key  For  Propagation  Replacer  env,Key  For  Propagator  propagate  Key  For  Propagation  Replacer  replace  Annotations,1,0
14,propagate  New  Class  Tree,New  Class  Tree  Annotated  Type  Mirror  Key  For  Propagator,void,,get  Assignment  Context  get  Visitor  State  get  Kind  get  Path  assigned  To  get  Kind  propagate,Key  For  Propagator,Propagation  Direction  unknown  keyfor  Key  For  Propagation  Replacer  env,Key  For  Propagator  propagate  Key  For  Propagation  Replacer  replace  Annotations,Key  For  Annotated  Type  Factory,keyfor  unknownkeyfor  keyforbottom  keyfor  name  map  Contains  Key  map  Get  map  Put  key  For  Propagator  Key  For  Type  Hierarchy  Key  For  Qualifier  Hierarchy,Key  For  Annotated  Type  Factory  create  Supported  Type  Qualifiers  constructor  From  Use  create  Type  Hierarchy  create  Tree  Annotator  Key  For  Type  Hierarchy  is  Subtype  create  Flow  Analysis  create  Flow  Transfer  Function  create  Key  For  Annotation  Mirror  With  Value  create  Key  For  Annotation  Mirror  With  Value  is  Key  For  Map  create  Qualifier  Hierarchy  Key  For  Qualifier  Hierarchy  extract  Values  is  Subtype  least  Upper  Bound  greatest  Lower  Bound  is  Map  Contains  Key  is  Map  Get  is  Map  Put  is  Map  Contains  Key  is  Map  Get  is  Map  Put  should  Warn  If  Stub  Redundant  With  Bytecode,0,0
15,propagate  New  Class  Tree,New  Class  Tree  Annotated  Type  Mirror  Key  For  Propagator,void,,get  Assignment  Context  get  Visitor  State  get  Kind  get  Path  assigned  To  get  Kind  propagate,Key  For  Annotated  Type  Factory,keyfor  unknownkeyfor  keyforbottom  keyfor  name  map  Contains  Key  map  Get  map  Put  key  For  Propagator  Key  For  Type  Hierarchy  Key  For  Qualifier  Hierarchy,Key  For  Annotated  Type  Factory  create  Supported  Type  Qualifiers  constructor  From  Use  create  Type  Hierarchy  create  Tree  Annotator  Key  For  Type  Hierarchy  is  Subtype  create  Flow  Analysis  create  Flow  Transfer  Function  create  Key  For  Annotation  Mirror  With  Value  create  Key  For  Annotation  Mirror  With  Value  is  Key  For  Map  create  Qualifier  Hierarchy  Key  For  Qualifier  Hierarchy  extract  Values  is  Subtype  least  Upper  Bound  greatest  Lower  Bound  is  Map  Contains  Key  is  Map  Get  is  Map  Put  is  Map  Contains  Key  is  Map  Get  is  Map  Put  should  Warn  If  Stub  Redundant  With  Bytecode,Key  For  Propagator,Propagation  Direction  unknown  keyfor  Key  For  Propagation  Replacer  env,Key  For  Propagator  propagate  Key  For  Propagation  Replacer  replace  Annotations,1,1
16,is  As  Format  Call,Annotated  Type  Factory  Formatter  Tree  Util,boolean,,get  Method  get  Target  get  Decl  Annotation,Formatter  Tree  Util,checker  processing  Env  Invocation  Type  Result  value  location  Format  Call  format  Anno  args  node  format  Arg  atype  Factory  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,Formatter  Tree  Util  Result  value  as  Format  Call  Categories  Low  Level  as  Format  Call  Categories  is  Format  Call  is  Locale  Format  Call  has  Format  Annotation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Format  Categories  get  Param  Types  is  Valid  Parameter  is  Parameter  Null  default  Action  visit  Null  failure  warning  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,Method  Invocation  Node,tree  target  arguments  tree  Path,Method  Invocation  Node  Method  Invocation  Node  get  Target  get  Arguments  get  Argument  get  Tree  Path  get  Tree  accept  to  String  equals  hash  Code  get  Operands,0,0
17,is  As  Format  Call,Annotated  Type  Factory  Formatter  Tree  Util,boolean,,get  Method  get  Target  get  Decl  Annotation,Method  Invocation  Node,tree  target  arguments  tree  Path,Method  Invocation  Node  Method  Invocation  Node  get  Target  get  Arguments  get  Argument  get  Tree  Path  get  Tree  accept  to  String  equals  hash  Code  get  Operands,Formatter  Tree  Util,checker  processing  Env  Invocation  Type  Result  value  location  Format  Call  format  Anno  args  node  format  Arg  atype  Factory  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,Formatter  Tree  Util  Result  value  as  Format  Call  Categories  Low  Level  as  Format  Call  Categories  is  Format  Call  is  Locale  Format  Call  has  Format  Annotation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Format  Categories  get  Param  Types  is  Valid  Parameter  is  Parameter  Null  default  Action  visit  Null  failure  warning  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,1,1
18,is  As  Format  Call,Annotated  Type  Factory  Formatter  Tree  Util,boolean,,get  Method  get  Target  get  Decl  Annotation,Formatter  Tree  Util,checker  processing  Env  Invocation  Type  Result  value  location  Format  Call  format  Anno  args  node  format  Arg  atype  Factory  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,Formatter  Tree  Util  Result  value  as  Format  Call  Categories  Low  Level  as  Format  Call  Categories  is  Format  Call  is  Locale  Format  Call  has  Format  Annotation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Format  Categories  get  Param  Types  is  Valid  Parameter  is  Parameter  Null  default  Action  visit  Null  failure  warning  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
19,is  As  Format  Call,Annotated  Type  Factory  Formatter  Tree  Util,boolean,,get  Method  get  Target  get  Decl  Annotation,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Formatter  Tree  Util,checker  processing  Env  Invocation  Type  Result  value  location  Format  Call  format  Anno  args  node  format  Arg  atype  Factory  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,Formatter  Tree  Util  Result  value  as  Format  Call  Categories  Low  Level  as  Format  Call  Categories  is  Format  Call  is  Locale  Format  Call  has  Format  Annotation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Format  Categories  get  Param  Types  is  Valid  Parameter  is  Parameter  Null  default  Action  visit  Null  failure  warning  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,1,0
20,is  Format  Call,Method  Invocation  Tree  Annotated  Type  Factory,boolean,,element  From  Use  get  Decl  Annotation,Formatter  Tree  Util,checker  processing  Env  Invocation  Type  Result  value  location  Format  Call  format  Anno  args  node  format  Arg  atype  Factory  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,Formatter  Tree  Util  Result  value  as  Format  Call  Categories  Low  Level  as  Format  Call  Categories  is  Locale  Format  Call  has  Format  Annotation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Format  Categories  get  Param  Types  is  Valid  Parameter  is  Parameter  Null  default  Action  visit  Null  failure  warning  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
21,is  Format  Call,Method  Invocation  Tree  Annotated  Type  Factory,boolean,,element  From  Use  get  Decl  Annotation,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Formatter  Tree  Util,checker  processing  Env  Invocation  Type  Result  value  location  Format  Call  format  Anno  args  node  format  Arg  atype  Factory  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,Formatter  Tree  Util  Result  value  as  Format  Call  Categories  Low  Level  as  Format  Call  Categories  is  Locale  Format  Call  has  Format  Annotation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Format  Categories  get  Param  Types  is  Valid  Parameter  is  Parameter  Null  default  Action  visit  Null  failure  warning  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,1,0
22,has  Unsigned  Annotation,Annotated  Type  Mirror,boolean,,has  Annotation  has  Annotation,Signedness  Visitor,,Signedness  Visitor  is  Mask  primitive  Type  Cast  is  Literal  get  Long  mask  Ignores  M  S  B  cast  Ignores  M  S  B  is  Masked  Shift  Either  Signedness  is  Casted  Shift  Either  Signedness  has  Signed  Annotation  visit  Binary  kind  Without  Assignment  visit  Compound  Assignment,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
23,has  Unsigned  Annotation,Annotated  Type  Mirror,boolean,,has  Annotation  has  Annotation,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Signedness  Visitor,,Signedness  Visitor  is  Mask  primitive  Type  Cast  is  Literal  get  Long  mask  Ignores  M  S  B  cast  Ignores  M  S  B  is  Masked  Shift  Either  Signedness  is  Casted  Shift  Either  Signedness  has  Signed  Annotation  visit  Binary  kind  Without  Assignment  visit  Compound  Assignment,1,0
24,has  Signed  Annotation,Annotated  Type  Mirror,boolean,,has  Annotation  has  Annotation,Signedness  Visitor,,Signedness  Visitor  is  Mask  primitive  Type  Cast  is  Literal  get  Long  mask  Ignores  M  S  B  cast  Ignores  M  S  B  is  Masked  Shift  Either  Signedness  is  Casted  Shift  Either  Signedness  has  Unsigned  Annotation  visit  Binary  kind  Without  Assignment  visit  Compound  Assignment,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
25,has  Signed  Annotation,Annotated  Type  Mirror,boolean,,has  Annotation  has  Annotation,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Signedness  Visitor,,Signedness  Visitor  is  Mask  primitive  Type  Cast  is  Literal  get  Long  mask  Ignores  M  S  B  cast  Ignores  M  S  B  is  Masked  Shift  Either  Signedness  is  Casted  Shift  Either  Signedness  has  Unsigned  Annotation  visit  Binary  kind  Without  Assignment  visit  Compound  Assignment,1,0
26,is  Has  Format  Call,Method  Invocation  Node  In  Formatter  Tree  Util,boolean,,get  Method  get  Target  get  Decl  Annotation,In  Formatter  Tree  Util,checker  processing  Env  Format  Type  In  Format  Call  tree  format  Arg  atype  Factory  args  invalid  Message  format  Anno  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,In  Formatter  Tree  Util  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  is  Is  Format  Call  is  Make  Format  Call  failure  warning  as  Format  Call  Categories  Low  Level  get  Has  Format  Call  Categories  make  Format  Call  Categories  create  Format  For  Call  In  Format  Call  to  String  initial  Check  get  Format  Type  get  Invalid  Error  is  Valid  Format  For  Invocation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Invalid  Invocation  Type  get  Format  Categories  get  Param  Types  is  Valid  Parameter  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,Method  Invocation  Node,tree  target  arguments  tree  Path,Method  Invocation  Node  Method  Invocation  Node  get  Target  get  Arguments  get  Argument  get  Tree  Path  get  Tree  accept  to  String  equals  hash  Code  get  Operands  is  As  Format  Call,0,0
27,is  Has  Format  Call,Method  Invocation  Node  In  Formatter  Tree  Util,boolean,,get  Method  get  Target  get  Decl  Annotation,Method  Invocation  Node,tree  target  arguments  tree  Path,Method  Invocation  Node  Method  Invocation  Node  get  Target  get  Arguments  get  Argument  get  Tree  Path  get  Tree  accept  to  String  equals  hash  Code  get  Operands  is  As  Format  Call,In  Formatter  Tree  Util,checker  processing  Env  Format  Type  In  Format  Call  tree  format  Arg  atype  Factory  args  invalid  Message  format  Anno  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,In  Formatter  Tree  Util  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  is  Is  Format  Call  is  Make  Format  Call  failure  warning  as  Format  Call  Categories  Low  Level  get  Has  Format  Call  Categories  make  Format  Call  Categories  create  Format  For  Call  In  Format  Call  to  String  initial  Check  get  Format  Type  get  Invalid  Error  is  Valid  Format  For  Invocation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Invalid  Invocation  Type  get  Format  Categories  get  Param  Types  is  Valid  Parameter  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,1,0
28,is  Has  Format  Call,Method  Invocation  Node  In  Formatter  Tree  Util,boolean,,get  Method  get  Target  get  Decl  Annotation,In  Formatter  Tree  Util,checker  processing  Env  Format  Type  In  Format  Call  tree  format  Arg  atype  Factory  args  invalid  Message  format  Anno  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,In  Formatter  Tree  Util  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  is  Is  Format  Call  is  Make  Format  Call  failure  warning  as  Format  Call  Categories  Low  Level  get  Has  Format  Call  Categories  make  Format  Call  Categories  create  Format  For  Call  In  Format  Call  to  String  initial  Check  get  Format  Type  get  Invalid  Error  is  Valid  Format  For  Invocation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Invalid  Invocation  Type  get  Format  Categories  get  Param  Types  is  Valid  Parameter  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
29,is  Has  Format  Call,Method  Invocation  Node  In  Formatter  Tree  Util,boolean,,get  Method  get  Target  get  Decl  Annotation,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,In  Formatter  Tree  Util,checker  processing  Env  Format  Type  In  Format  Call  tree  format  Arg  atype  Factory  args  invalid  Message  format  Anno  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,In  Formatter  Tree  Util  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  is  Is  Format  Call  is  Make  Format  Call  failure  warning  as  Format  Call  Categories  Low  Level  get  Has  Format  Call  Categories  make  Format  Call  Categories  create  Format  For  Call  In  Format  Call  to  String  initial  Check  get  Format  Type  get  Invalid  Error  is  Valid  Format  For  Invocation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Invalid  Invocation  Type  get  Format  Categories  get  Param  Types  is  Valid  Parameter  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,1,1
30,is  Is  Format  Call,Method  Invocation  Node  Annotated  Type  Factory,boolean,,get  Method  get  Target  get  Decl  Annotation,In  Formatter  Tree  Util,checker  processing  Env  Format  Type  In  Format  Call  tree  format  Arg  atype  Factory  args  invalid  Message  format  Anno  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,In  Formatter  Tree  Util  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  is  Make  Format  Call  failure  warning  as  Format  Call  Categories  Low  Level  get  Has  Format  Call  Categories  make  Format  Call  Categories  create  Format  For  Call  In  Format  Call  to  String  initial  Check  get  Format  Type  get  Invalid  Error  is  Valid  Format  For  Invocation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Invalid  Invocation  Type  get  Format  Categories  get  Param  Types  is  Valid  Parameter  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,Method  Invocation  Node,tree  target  arguments  tree  Path,Method  Invocation  Node  Method  Invocation  Node  get  Target  get  Arguments  get  Argument  get  Tree  Path  get  Tree  accept  to  String  equals  hash  Code  get  Operands  is  As  Format  Call,0,0
31,is  Is  Format  Call,Method  Invocation  Node  Annotated  Type  Factory,boolean,,get  Method  get  Target  get  Decl  Annotation,Method  Invocation  Node,tree  target  arguments  tree  Path,Method  Invocation  Node  Method  Invocation  Node  get  Target  get  Arguments  get  Argument  get  Tree  Path  get  Tree  accept  to  String  equals  hash  Code  get  Operands  is  As  Format  Call,In  Formatter  Tree  Util,checker  processing  Env  Format  Type  In  Format  Call  tree  format  Arg  atype  Factory  args  invalid  Message  format  Anno  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,In  Formatter  Tree  Util  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  is  Make  Format  Call  failure  warning  as  Format  Call  Categories  Low  Level  get  Has  Format  Call  Categories  make  Format  Call  Categories  create  Format  For  Call  In  Format  Call  to  String  initial  Check  get  Format  Type  get  Invalid  Error  is  Valid  Format  For  Invocation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Invalid  Invocation  Type  get  Format  Categories  get  Param  Types  is  Valid  Parameter  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,1,0
32,is  Is  Format  Call,Method  Invocation  Node  Annotated  Type  Factory,boolean,,get  Method  get  Target  get  Decl  Annotation,In  Formatter  Tree  Util,checker  processing  Env  Format  Type  In  Format  Call  tree  format  Arg  atype  Factory  args  invalid  Message  format  Anno  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,In  Formatter  Tree  Util  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  is  Make  Format  Call  failure  warning  as  Format  Call  Categories  Low  Level  get  Has  Format  Call  Categories  make  Format  Call  Categories  create  Format  For  Call  In  Format  Call  to  String  initial  Check  get  Format  Type  get  Invalid  Error  is  Valid  Format  For  Invocation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Invalid  Invocation  Type  get  Format  Categories  get  Param  Types  is  Valid  Parameter  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
33,is  Is  Format  Call,Method  Invocation  Node  Annotated  Type  Factory,boolean,,get  Method  get  Target  get  Decl  Annotation,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,In  Formatter  Tree  Util,checker  processing  Env  Format  Type  In  Format  Call  tree  format  Arg  atype  Factory  args  invalid  Message  format  Anno  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,In  Formatter  Tree  Util  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  is  Make  Format  Call  failure  warning  as  Format  Call  Categories  Low  Level  get  Has  Format  Call  Categories  make  Format  Call  Categories  create  Format  For  Call  In  Format  Call  to  String  initial  Check  get  Format  Type  get  Invalid  Error  is  Valid  Format  For  Invocation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Invalid  Invocation  Type  get  Format  Categories  get  Param  Types  is  Valid  Parameter  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,1,0
34,is  Make  Format  Call,Method  Invocation  Node  Annotated  Type  Factory,boolean,,get  Method  get  Target  get  Decl  Annotation,In  Formatter  Tree  Util,checker  processing  Env  Format  Type  In  Format  Call  tree  format  Arg  atype  Factory  args  invalid  Message  format  Anno  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,In  Formatter  Tree  Util  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  is  Is  Format  Call  failure  warning  as  Format  Call  Categories  Low  Level  get  Has  Format  Call  Categories  make  Format  Call  Categories  create  Format  For  Call  In  Format  Call  to  String  initial  Check  get  Format  Type  get  Invalid  Error  is  Valid  Format  For  Invocation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Invalid  Invocation  Type  get  Format  Categories  get  Param  Types  is  Valid  Parameter  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,Method  Invocation  Node,tree  target  arguments  tree  Path,Method  Invocation  Node  Method  Invocation  Node  get  Target  get  Arguments  get  Argument  get  Tree  Path  get  Tree  accept  to  String  equals  hash  Code  get  Operands  is  As  Format  Call,0,0
35,is  Make  Format  Call,Method  Invocation  Node  Annotated  Type  Factory,boolean,,get  Method  get  Target  get  Decl  Annotation,Method  Invocation  Node,tree  target  arguments  tree  Path,Method  Invocation  Node  Method  Invocation  Node  get  Target  get  Arguments  get  Argument  get  Tree  Path  get  Tree  accept  to  String  equals  hash  Code  get  Operands  is  As  Format  Call,In  Formatter  Tree  Util,checker  processing  Env  Format  Type  In  Format  Call  tree  format  Arg  atype  Factory  args  invalid  Message  format  Anno  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,In  Formatter  Tree  Util  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  is  Is  Format  Call  failure  warning  as  Format  Call  Categories  Low  Level  get  Has  Format  Call  Categories  make  Format  Call  Categories  create  Format  For  Call  In  Format  Call  to  String  initial  Check  get  Format  Type  get  Invalid  Error  is  Valid  Format  For  Invocation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Invalid  Invocation  Type  get  Format  Categories  get  Param  Types  is  Valid  Parameter  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,1,0
36,is  Make  Format  Call,Method  Invocation  Node  Annotated  Type  Factory,boolean,,get  Method  get  Target  get  Decl  Annotation,In  Formatter  Tree  Util,checker  processing  Env  Format  Type  In  Format  Call  tree  format  Arg  atype  Factory  args  invalid  Message  format  Anno  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,In  Formatter  Tree  Util  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  is  Is  Format  Call  failure  warning  as  Format  Call  Categories  Low  Level  get  Has  Format  Call  Categories  make  Format  Call  Categories  create  Format  For  Call  In  Format  Call  to  String  initial  Check  get  Format  Type  get  Invalid  Error  is  Valid  Format  For  Invocation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Invalid  Invocation  Type  get  Format  Categories  get  Param  Types  is  Valid  Parameter  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
37,is  Make  Format  Call,Method  Invocation  Node  Annotated  Type  Factory,boolean,,get  Method  get  Target  get  Decl  Annotation,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,In  Formatter  Tree  Util,checker  processing  Env  Format  Type  In  Format  Call  tree  format  Arg  atype  Factory  args  invalid  Message  format  Anno  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,In  Formatter  Tree  Util  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  is  Is  Format  Call  failure  warning  as  Format  Call  Categories  Low  Level  get  Has  Format  Call  Categories  make  Format  Call  Categories  create  Format  For  Call  In  Format  Call  to  String  initial  Check  get  Format  Type  get  Invalid  Error  is  Valid  Format  For  Invocation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Invalid  Invocation  Type  get  Format  Categories  get  Param  Types  is  Valid  Parameter  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,1,0
38,make  Format  Call  Categories,Method  Invocation  Node  In  Formatter  Annotated  Type  Factory,Result  In  Conversion  Category,,get  Argument  get  Tree  get  Value  contains  Key  get  format  Parameter  Categories  get  Tree,In  Formatter  Tree  Util,checker  processing  Env  Format  Type  In  Format  Call  tree  format  Arg  atype  Factory  args  invalid  Message  format  Anno  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,In  Formatter  Tree  Util  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  is  Is  Format  Call  is  Make  Format  Call  failure  warning  as  Format  Call  Categories  Low  Level  get  Has  Format  Call  Categories  create  Format  For  Call  In  Format  Call  to  String  initial  Check  get  Format  Type  get  Invalid  Error  is  Valid  Format  For  Invocation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Invalid  Invocation  Type  get  Format  Categories  get  Param  Types  is  Valid  Parameter  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,Method  Invocation  Node,tree  target  arguments  tree  Path,Method  Invocation  Node  Method  Invocation  Node  get  Target  get  Arguments  get  Argument  get  Tree  Path  get  Tree  accept  to  String  equals  hash  Code  get  Operands  is  As  Format  Call,0,0
39,make  Format  Call  Categories,Method  Invocation  Node  In  Formatter  Annotated  Type  Factory,Result  In  Conversion  Category,,get  Argument  get  Tree  get  Value  contains  Key  get  format  Parameter  Categories  get  Tree,Method  Invocation  Node,tree  target  arguments  tree  Path,Method  Invocation  Node  Method  Invocation  Node  get  Target  get  Arguments  get  Argument  get  Tree  Path  get  Tree  accept  to  String  equals  hash  Code  get  Operands  is  As  Format  Call,In  Formatter  Tree  Util,checker  processing  Env  Format  Type  In  Format  Call  tree  format  Arg  atype  Factory  args  invalid  Message  format  Anno  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,In  Formatter  Tree  Util  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  is  Is  Format  Call  is  Make  Format  Call  failure  warning  as  Format  Call  Categories  Low  Level  get  Has  Format  Call  Categories  create  Format  For  Call  In  Format  Call  to  String  initial  Check  get  Format  Type  get  Invalid  Error  is  Valid  Format  For  Invocation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Invalid  Invocation  Type  get  Format  Categories  get  Param  Types  is  Valid  Parameter  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,1,0
40,make  Format  Call  Categories,Method  Invocation  Node  In  Formatter  Annotated  Type  Factory,Result  In  Conversion  Category,,get  Argument  get  Tree  get  Value  contains  Key  get  format  Parameter  Categories  get  Tree,In  Formatter  Tree  Util,checker  processing  Env  Format  Type  In  Format  Call  tree  format  Arg  atype  Factory  args  invalid  Message  format  Anno  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,In  Formatter  Tree  Util  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  is  Is  Format  Call  is  Make  Format  Call  failure  warning  as  Format  Call  Categories  Low  Level  get  Has  Format  Call  Categories  create  Format  For  Call  In  Format  Call  to  String  initial  Check  get  Format  Type  get  Invalid  Error  is  Valid  Format  For  Invocation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Invalid  Invocation  Type  get  Format  Categories  get  Param  Types  is  Valid  Parameter  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,In  Formatter  Annotated  Type  Factory,inunknownformat  informat  ininvalidformat  informatbottom  informatfor  translations  tree  Util  In  Formatter  Tree  Annotator  In  Formatter  Qualifier  Hierarchy,In  Formatter  Annotated  Type  Factory  build  Lookup  create  Qualifier  Hierarchy  create  Tree  Annotator  In  Formatter  Tree  Annotator  visit  Literal  In  Formatter  Qualifier  Hierarchy  is  Subtype  least  Upper  Bound  greatest  Lower  Bound,0,0
41,make  Format  Call  Categories,Method  Invocation  Node  In  Formatter  Annotated  Type  Factory,Result  In  Conversion  Category,,get  Argument  get  Tree  get  Value  contains  Key  get  format  Parameter  Categories  get  Tree,In  Formatter  Annotated  Type  Factory,inunknownformat  informat  ininvalidformat  informatbottom  informatfor  translations  tree  Util  In  Formatter  Tree  Annotator  In  Formatter  Qualifier  Hierarchy,In  Formatter  Annotated  Type  Factory  build  Lookup  create  Qualifier  Hierarchy  create  Tree  Annotator  In  Formatter  Tree  Annotator  visit  Literal  In  Formatter  Qualifier  Hierarchy  is  Subtype  least  Upper  Bound  greatest  Lower  Bound,In  Formatter  Tree  Util,checker  processing  Env  Format  Type  In  Format  Call  tree  format  Arg  atype  Factory  args  invalid  Message  format  Anno  Type  Mirror  To  Class  Visitor  type  Mirror  To  Class  Visitor,In  Formatter  Tree  Util  exception  To  Invalid  Format  Annotation  string  To  Invalid  Format  Annotation  invalid  Format  Annotation  To  Error  Message  categories  To  Format  Annotation  format  Annotation  To  Categories  is  Is  Format  Call  is  Make  Format  Call  failure  warning  as  Format  Call  Categories  Low  Level  get  Has  Format  Call  Categories  create  Format  For  Call  In  Format  Call  to  String  initial  Check  get  Format  Type  get  Invalid  Error  is  Valid  Format  For  Invocation  get  Invocation  Type  default  Action  visit  Array  default  Action  visit  Type  Cast  visit  Null  get  Invalid  Invocation  Type  get  Format  Categories  get  Param  Types  is  Valid  Parameter  visit  Primitive  visit  Declared  visit  Type  type  Mirror  To  Class,1,0
42,process,Node  Node  Constant  Propagation  Transfer,void,,get  Information  is  Constant  set  Information,Constant  Propagation  Transfer,,initial  Store  visit  Local  Variable  visit  Node  visit  Assignment  visit  Integer  Literal  visit  Equal  To,Constant  Propagation  Store,contents,Constant  Propagation  Store  Constant  Propagation  Store  get  Information  merge  Information  set  Information  copy  least  Upper  Bound  widened  Upper  Bound  equals  hash  Code  to  String  can  Alias  visualize,0,0
43,process,Node  Node  Constant  Propagation  Transfer,void,,get  Information  is  Constant  set  Information,Constant  Propagation  Store,contents,Constant  Propagation  Store  Constant  Propagation  Store  get  Information  merge  Information  set  Information  copy  least  Upper  Bound  widened  Upper  Bound  equals  hash  Code  to  String  can  Alias  visualize,Constant  Propagation  Transfer,,initial  Store  visit  Local  Variable  visit  Node  visit  Assignment  visit  Integer  Literal  visit  Equal  To,1,1
44,process,Node  Node  Constant  Propagation  Transfer,void,,get  Information  is  Constant  set  Information,Constant  Propagation  Transfer,,initial  Store  visit  Local  Variable  visit  Node  visit  Assignment  visit  Integer  Literal  visit  Equal  To,Node,block  lvalue  assignment  Context  in  Source  type,Node  get  Block  set  Block  get  Tree  get  Type  accept  is  L  Value  set  L  Value  get  In  Source  set  In  Source  get  Assignment  Context  set  Assignment  Context  get  Operands  get  Transitive  Operands  is  Array  Length  Access,0,0
45,process,Node  Node  Constant  Propagation  Transfer,void,,get  Information  is  Constant  set  Information,Node,block  lvalue  assignment  Context  in  Source  type,Node  get  Block  set  Block  get  Tree  get  Type  accept  is  L  Value  set  L  Value  get  In  Source  set  In  Source  get  Assignment  Context  set  Assignment  Context  get  Operands  get  Transitive  Operands  is  Array  Length  Access,Constant  Propagation  Transfer,,initial  Store  visit  Local  Variable  visit  Node  visit  Assignment  visit  Integer  Literal  visit  Equal  To,1,0
46,get  Boolean  Values,Node  Transfer  Input  C  F  Value  C  F  Store,List  Boolean,,get  Value  Of  Sub  Node  get  Annotation  By  Name  get  Annotations  get  Boolean  Values,Value  Transfer,atypefactory  hierarchy  Numerical  Binary  Ops  Numerical  Unary  Ops  Comparison  Operators  Conditional  Operators  all  booleans,Value  Transfer  get  Int  Range  String  Length  Range  get  String  Length  Range  get  String  Lengths  get  String  Values  get  Char  Values  get  Value  Annotation  get  Value  Annotation  get  Numerical  Values  get  Numerical  Values  get  Int  Range  get  Int  Range  From  Annotation  is  Int  Range  is  Integral  Unknown  Val  is  Int  Range  Or  Integral  Unknown  Val  create  New  Result  create  New  Result  Boolean  visit  Field  Access  visit  Method  Invocation  refine  Array  At  Length  Access  refine  String  At  Length  Invocation  get  Array  Or  String  Annotation  refine  At  Length  Access  visit  String  Concatenate  Assignment  visit  String  Concatenate  calculate  Length  Addition  is  Nullable  create  Annotation  For  String  Concatenation  string  Concatenation  calculate  Numerical  Binary  Op  calculate  Range  Binary  Op  calculate  Values  Binary  Op  visit  Numerical  Addition  visit  Numerical  Subtraction  visit  Numerical  Multiplication  visit  Integer  Division  visit  Floating  Division  visit  Integer  Remainder  visit  Floating  Remainder  visit  Left  Shift  visit  Signed  Right  Shift  visit  Unsigned  Right  Shift  visit  Bitwise  And  visit  Bitwise  Or  visit  Bitwise  Xor  calculate  Numerical  Unary  Op  calculate  Range  Unary  Op  calculate  Values  Unary  Op  visit  Numerical  Minus  visit  Numerical  Plus  visit  Bitwise  Complement  calculate  Binary  Comparison  refine  Int  Ranges  create  Annotation  From  Results  And  Add  To  Store  create  Annotation  From  Range  And  Add  To  Store  add  Annotation  To  Store  visit  Less  Than  visit  Less  Than  Or  Equal  visit  Greater  Than  visit  Greater  Than  Or  Equal  strengthen  Annotation  Of  Equal  To  process  Conditional  Postconditions  calculate  Conditional  Operator  visit  Conditional  Not  visit  Conditional  And  visit  Conditional  Or,Node,block  lvalue  assignment  Context  in  Source  type,Node  get  Block  set  Block  get  Tree  get  Type  accept  is  L  Value  set  L  Value  get  In  Source  set  In  Source  get  Assignment  Context  set  Assignment  Context  get  Operands  get  Transitive  Operands  is  Array  Length  Access,0,0
47,get  Boolean  Values,Node  Transfer  Input  C  F  Value  C  F  Store,List  Boolean,,get  Value  Of  Sub  Node  get  Annotation  By  Name  get  Annotations  get  Boolean  Values,Node,block  lvalue  assignment  Context  in  Source  type,Node  get  Block  set  Block  get  Tree  get  Type  accept  is  L  Value  set  L  Value  get  In  Source  set  In  Source  get  Assignment  Context  set  Assignment  Context  get  Operands  get  Transitive  Operands  is  Array  Length  Access,Value  Transfer,atypefactory  hierarchy  Numerical  Binary  Ops  Numerical  Unary  Ops  Comparison  Operators  Conditional  Operators  all  booleans,Value  Transfer  get  Int  Range  String  Length  Range  get  String  Length  Range  get  String  Lengths  get  String  Values  get  Char  Values  get  Value  Annotation  get  Value  Annotation  get  Numerical  Values  get  Numerical  Values  get  Int  Range  get  Int  Range  From  Annotation  is  Int  Range  is  Integral  Unknown  Val  is  Int  Range  Or  Integral  Unknown  Val  create  New  Result  create  New  Result  Boolean  visit  Field  Access  visit  Method  Invocation  refine  Array  At  Length  Access  refine  String  At  Length  Invocation  get  Array  Or  String  Annotation  refine  At  Length  Access  visit  String  Concatenate  Assignment  visit  String  Concatenate  calculate  Length  Addition  is  Nullable  create  Annotation  For  String  Concatenation  string  Concatenation  calculate  Numerical  Binary  Op  calculate  Range  Binary  Op  calculate  Values  Binary  Op  visit  Numerical  Addition  visit  Numerical  Subtraction  visit  Numerical  Multiplication  visit  Integer  Division  visit  Floating  Division  visit  Integer  Remainder  visit  Floating  Remainder  visit  Left  Shift  visit  Signed  Right  Shift  visit  Unsigned  Right  Shift  visit  Bitwise  And  visit  Bitwise  Or  visit  Bitwise  Xor  calculate  Numerical  Unary  Op  calculate  Range  Unary  Op  calculate  Values  Unary  Op  visit  Numerical  Minus  visit  Numerical  Plus  visit  Bitwise  Complement  calculate  Binary  Comparison  refine  Int  Ranges  create  Annotation  From  Results  And  Add  To  Store  create  Annotation  From  Range  And  Add  To  Store  add  Annotation  To  Store  visit  Less  Than  visit  Less  Than  Or  Equal  visit  Greater  Than  visit  Greater  Than  Or  Equal  strengthen  Annotation  Of  Equal  To  process  Conditional  Postconditions  calculate  Conditional  Operator  visit  Conditional  Not  visit  Conditional  And  visit  Conditional  Or,1,0
48,get  Numerical  Values,Node  Transfer  Input  C  F  Value  C  F  Store,Listextends  Number,,get  Value  Annotation  get  Numerical  Values,Value  Transfer,atypefactory  hierarchy  Numerical  Binary  Ops  Numerical  Unary  Ops  Comparison  Operators  Conditional  Operators  all  booleans,Value  Transfer  get  Int  Range  String  Length  Range  get  String  Length  Range  get  String  Lengths  get  String  Values  get  Boolean  Values  get  Char  Values  get  Value  Annotation  get  Value  Annotation  get  Numerical  Values  get  Int  Range  get  Int  Range  From  Annotation  is  Int  Range  is  Integral  Unknown  Val  is  Int  Range  Or  Integral  Unknown  Val  create  New  Result  create  New  Result  Boolean  visit  Field  Access  visit  Method  Invocation  refine  Array  At  Length  Access  refine  String  At  Length  Invocation  get  Array  Or  String  Annotation  refine  At  Length  Access  visit  String  Concatenate  Assignment  visit  String  Concatenate  calculate  Length  Addition  is  Nullable  create  Annotation  For  String  Concatenation  string  Concatenation  calculate  Numerical  Binary  Op  calculate  Range  Binary  Op  calculate  Values  Binary  Op  visit  Numerical  Addition  visit  Numerical  Subtraction  visit  Numerical  Multiplication  visit  Integer  Division  visit  Floating  Division  visit  Integer  Remainder  visit  Floating  Remainder  visit  Left  Shift  visit  Signed  Right  Shift  visit  Unsigned  Right  Shift  visit  Bitwise  And  visit  Bitwise  Or  visit  Bitwise  Xor  calculate  Numerical  Unary  Op  calculate  Range  Unary  Op  calculate  Values  Unary  Op  visit  Numerical  Minus  visit  Numerical  Plus  visit  Bitwise  Complement  calculate  Binary  Comparison  refine  Int  Ranges  create  Annotation  From  Results  And  Add  To  Store  create  Annotation  From  Range  And  Add  To  Store  add  Annotation  To  Store  visit  Less  Than  visit  Less  Than  Or  Equal  visit  Greater  Than  visit  Greater  Than  Or  Equal  strengthen  Annotation  Of  Equal  To  process  Conditional  Postconditions  calculate  Conditional  Operator  visit  Conditional  Not  visit  Conditional  And  visit  Conditional  Or,Node,block  lvalue  assignment  Context  in  Source  type,Node  get  Block  set  Block  get  Tree  get  Type  accept  is  L  Value  set  L  Value  get  In  Source  set  In  Source  get  Assignment  Context  set  Assignment  Context  get  Operands  get  Transitive  Operands  is  Array  Length  Access,0,0
49,get  Numerical  Values,Node  Transfer  Input  C  F  Value  C  F  Store,Listextends  Number,,get  Value  Annotation  get  Numerical  Values,Node,block  lvalue  assignment  Context  in  Source  type,Node  get  Block  set  Block  get  Tree  get  Type  accept  is  L  Value  set  L  Value  get  In  Source  set  In  Source  get  Assignment  Context  set  Assignment  Context  get  Operands  get  Transitive  Operands  is  Array  Length  Access,Value  Transfer,atypefactory  hierarchy  Numerical  Binary  Ops  Numerical  Unary  Ops  Comparison  Operators  Conditional  Operators  all  booleans,Value  Transfer  get  Int  Range  String  Length  Range  get  String  Length  Range  get  String  Lengths  get  String  Values  get  Boolean  Values  get  Char  Values  get  Value  Annotation  get  Value  Annotation  get  Numerical  Values  get  Int  Range  get  Int  Range  From  Annotation  is  Int  Range  is  Integral  Unknown  Val  is  Int  Range  Or  Integral  Unknown  Val  create  New  Result  create  New  Result  Boolean  visit  Field  Access  visit  Method  Invocation  refine  Array  At  Length  Access  refine  String  At  Length  Invocation  get  Array  Or  String  Annotation  refine  At  Length  Access  visit  String  Concatenate  Assignment  visit  String  Concatenate  calculate  Length  Addition  is  Nullable  create  Annotation  For  String  Concatenation  string  Concatenation  calculate  Numerical  Binary  Op  calculate  Range  Binary  Op  calculate  Values  Binary  Op  visit  Numerical  Addition  visit  Numerical  Subtraction  visit  Numerical  Multiplication  visit  Integer  Division  visit  Floating  Division  visit  Integer  Remainder  visit  Floating  Remainder  visit  Left  Shift  visit  Signed  Right  Shift  visit  Unsigned  Right  Shift  visit  Bitwise  And  visit  Bitwise  Or  visit  Bitwise  Xor  calculate  Numerical  Unary  Op  calculate  Range  Unary  Op  calculate  Values  Unary  Op  visit  Numerical  Minus  visit  Numerical  Plus  visit  Bitwise  Complement  calculate  Binary  Comparison  refine  Int  Ranges  create  Annotation  From  Results  And  Add  To  Store  create  Annotation  From  Range  And  Add  To  Store  add  Annotation  To  Store  visit  Less  Than  visit  Less  Than  Or  Equal  visit  Greater  Than  visit  Greater  Than  Or  Equal  strengthen  Annotation  Of  Equal  To  process  Conditional  Postconditions  calculate  Conditional  Operator  visit  Conditional  Not  visit  Conditional  And  visit  Conditional  Or,1,0
50,is  Integral  Unknown  Val,Node  Annotation  Mirror,boolean,,are  Same  By  Name  is  Integral  get  Type,Value  Transfer,atypefactory  hierarchy  Numerical  Binary  Ops  Numerical  Unary  Ops  Comparison  Operators  Conditional  Operators  all  booleans,Value  Transfer  get  Int  Range  String  Length  Range  get  String  Length  Range  get  String  Lengths  get  String  Values  get  Boolean  Values  get  Char  Values  get  Value  Annotation  get  Value  Annotation  get  Numerical  Values  get  Numerical  Values  get  Int  Range  get  Int  Range  From  Annotation  is  Int  Range  is  Int  Range  Or  Integral  Unknown  Val  create  New  Result  create  New  Result  Boolean  visit  Field  Access  visit  Method  Invocation  refine  Array  At  Length  Access  refine  String  At  Length  Invocation  get  Array  Or  String  Annotation  refine  At  Length  Access  visit  String  Concatenate  Assignment  visit  String  Concatenate  calculate  Length  Addition  is  Nullable  create  Annotation  For  String  Concatenation  string  Concatenation  calculate  Numerical  Binary  Op  calculate  Range  Binary  Op  calculate  Values  Binary  Op  visit  Numerical  Addition  visit  Numerical  Subtraction  visit  Numerical  Multiplication  visit  Integer  Division  visit  Floating  Division  visit  Integer  Remainder  visit  Floating  Remainder  visit  Left  Shift  visit  Signed  Right  Shift  visit  Unsigned  Right  Shift  visit  Bitwise  And  visit  Bitwise  Or  visit  Bitwise  Xor  calculate  Numerical  Unary  Op  calculate  Range  Unary  Op  calculate  Values  Unary  Op  visit  Numerical  Minus  visit  Numerical  Plus  visit  Bitwise  Complement  calculate  Binary  Comparison  refine  Int  Ranges  create  Annotation  From  Results  And  Add  To  Store  create  Annotation  From  Range  And  Add  To  Store  add  Annotation  To  Store  visit  Less  Than  visit  Less  Than  Or  Equal  visit  Greater  Than  visit  Greater  Than  Or  Equal  strengthen  Annotation  Of  Equal  To  process  Conditional  Postconditions  calculate  Conditional  Operator  visit  Conditional  Not  visit  Conditional  And  visit  Conditional  Or,Node,block  lvalue  assignment  Context  in  Source  type,Node  get  Block  set  Block  get  Tree  get  Type  accept  is  L  Value  set  L  Value  get  In  Source  set  In  Source  get  Assignment  Context  set  Assignment  Context  get  Operands  get  Transitive  Operands  is  Array  Length  Access,0,0
51,is  Integral  Unknown  Val,Node  Annotation  Mirror,boolean,,are  Same  By  Name  is  Integral  get  Type,Node,block  lvalue  assignment  Context  in  Source  type,Node  get  Block  set  Block  get  Tree  get  Type  accept  is  L  Value  set  L  Value  get  In  Source  set  In  Source  get  Assignment  Context  set  Assignment  Context  get  Operands  get  Transitive  Operands  is  Array  Length  Access,Value  Transfer,atypefactory  hierarchy  Numerical  Binary  Ops  Numerical  Unary  Ops  Comparison  Operators  Conditional  Operators  all  booleans,Value  Transfer  get  Int  Range  String  Length  Range  get  String  Length  Range  get  String  Lengths  get  String  Values  get  Boolean  Values  get  Char  Values  get  Value  Annotation  get  Value  Annotation  get  Numerical  Values  get  Numerical  Values  get  Int  Range  get  Int  Range  From  Annotation  is  Int  Range  is  Int  Range  Or  Integral  Unknown  Val  create  New  Result  create  New  Result  Boolean  visit  Field  Access  visit  Method  Invocation  refine  Array  At  Length  Access  refine  String  At  Length  Invocation  get  Array  Or  String  Annotation  refine  At  Length  Access  visit  String  Concatenate  Assignment  visit  String  Concatenate  calculate  Length  Addition  is  Nullable  create  Annotation  For  String  Concatenation  string  Concatenation  calculate  Numerical  Binary  Op  calculate  Range  Binary  Op  calculate  Values  Binary  Op  visit  Numerical  Addition  visit  Numerical  Subtraction  visit  Numerical  Multiplication  visit  Integer  Division  visit  Floating  Division  visit  Integer  Remainder  visit  Floating  Remainder  visit  Left  Shift  visit  Signed  Right  Shift  visit  Unsigned  Right  Shift  visit  Bitwise  And  visit  Bitwise  Or  visit  Bitwise  Xor  calculate  Numerical  Unary  Op  calculate  Range  Unary  Op  calculate  Values  Unary  Op  visit  Numerical  Minus  visit  Numerical  Plus  visit  Bitwise  Complement  calculate  Binary  Comparison  refine  Int  Ranges  create  Annotation  From  Results  And  Add  To  Store  create  Annotation  From  Range  And  Add  To  Store  add  Annotation  To  Store  visit  Less  Than  visit  Less  Than  Or  Equal  visit  Greater  Than  visit  Greater  Than  Or  Equal  strengthen  Annotation  Of  Equal  To  process  Conditional  Postconditions  calculate  Conditional  Operator  visit  Conditional  Not  visit  Conditional  And  visit  Conditional  Or,1,0
52,calculate  Length  Range  Addition,Range  Value  Transfer,Range,,intersect  plus,Value  Transfer,atypefactory  hierarchy  Numerical  Binary  Ops  Numerical  Unary  Ops  Comparison  Operators  Conditional  Operators  all  booleans,Value  Transfer  get  Int  Range  String  Length  Range  get  String  Length  Range  get  String  Lengths  get  String  Values  get  Boolean  Values  get  Char  Values  get  Value  Annotation  get  Value  Annotation  get  Numerical  Values  get  Numerical  Values  get  Int  Range  get  Int  Range  From  Annotation  is  Int  Range  is  Integral  Unknown  Val  is  Int  Range  Or  Integral  Unknown  Val  create  New  Result  create  New  Result  Boolean  visit  Field  Access  visit  Method  Invocation  refine  Array  At  Length  Access  refine  String  At  Length  Invocation  get  Array  Or  String  Annotation  refine  At  Length  Access  visit  String  Concatenate  Assignment  visit  String  Concatenate  calculate  Length  Addition  is  Nullable  create  Annotation  For  String  Concatenation  string  Concatenation  calculate  Numerical  Binary  Op  calculate  Range  Binary  Op  calculate  Values  Binary  Op  visit  Numerical  Addition  visit  Numerical  Subtraction  visit  Numerical  Multiplication  visit  Integer  Division  visit  Floating  Division  visit  Integer  Remainder  visit  Floating  Remainder  visit  Left  Shift  visit  Signed  Right  Shift  visit  Unsigned  Right  Shift  visit  Bitwise  And  visit  Bitwise  Or  visit  Bitwise  Xor  calculate  Numerical  Unary  Op  calculate  Range  Unary  Op  calculate  Values  Unary  Op  visit  Numerical  Minus  visit  Numerical  Plus  visit  Bitwise  Complement  calculate  Binary  Comparison  refine  Int  Ranges  create  Annotation  From  Results  And  Add  To  Store  create  Annotation  From  Range  And  Add  To  Store  add  Annotation  To  Store  visit  Less  Than  visit  Less  Than  Or  Equal  visit  Greater  Than  visit  Greater  Than  Or  Equal  strengthen  Annotation  Of  Equal  To  process  Conditional  Postconditions  calculate  Conditional  Operator  visit  Conditional  Not  visit  Conditional  And  visit  Conditional  Or,Range,from  to  ignore  Overflow  long  everything  int  everything  short  everything  char  everything  byte  everything  nothing  everything  big  long  min  value  big  long  max  value  big  long  width  int  width  short  width  char  width  byte  width,Range  create  create  create  create  create  Or  Else  create  Or  Nothing  width  to  String  equals  hash  Code  equals  Range  is  Long  Everything  is  Int  Everything  is  Short  Everything  is  Char  Everything  is  Byte  Everything  is  Nothing  int  Range  short  Range  char  Range  byte  Range  clip  To  Range  contains  contains  union  intersect  min  max  plus  minus  times  divide  remainder  shift  Left  signed  Shift  Right  unsigned  Shift  Right  bitwise  And  no  Sign  Bit  bitwise  Or  bitwise  Xor  unary  Plus  unary  Minus  bitwise  Complement  refine  Less  Than  refine  Less  Than  Eq  refine  Greater  Than  refine  Greater  Than  Eq  refine  Equal  To  refine  Not  Equal  To  is  Wider  Than  is  Constant  is  Within  is  Within  Half  Long  is  Within  Integer,0,0
53,calculate  Length  Range  Addition,Range  Value  Transfer,Range,,intersect  plus,Range,from  to  ignore  Overflow  long  everything  int  everything  short  everything  char  everything  byte  everything  nothing  everything  big  long  min  value  big  long  max  value  big  long  width  int  width  short  width  char  width  byte  width,Range  create  create  create  create  create  Or  Else  create  Or  Nothing  width  to  String  equals  hash  Code  equals  Range  is  Long  Everything  is  Int  Everything  is  Short  Everything  is  Char  Everything  is  Byte  Everything  is  Nothing  int  Range  short  Range  char  Range  byte  Range  clip  To  Range  contains  contains  union  intersect  min  max  plus  minus  times  divide  remainder  shift  Left  signed  Shift  Right  unsigned  Shift  Right  bitwise  And  no  Sign  Bit  bitwise  Or  bitwise  Xor  unary  Plus  unary  Minus  bitwise  Complement  refine  Less  Than  refine  Less  Than  Eq  refine  Greater  Than  refine  Greater  Than  Eq  refine  Equal  To  refine  Not  Equal  To  is  Wider  Than  is  Constant  is  Within  is  Within  Half  Long  is  Within  Integer,Value  Transfer,atypefactory  hierarchy  Numerical  Binary  Ops  Numerical  Unary  Ops  Comparison  Operators  Conditional  Operators  all  booleans,Value  Transfer  get  Int  Range  String  Length  Range  get  String  Length  Range  get  String  Lengths  get  String  Values  get  Boolean  Values  get  Char  Values  get  Value  Annotation  get  Value  Annotation  get  Numerical  Values  get  Numerical  Values  get  Int  Range  get  Int  Range  From  Annotation  is  Int  Range  is  Integral  Unknown  Val  is  Int  Range  Or  Integral  Unknown  Val  create  New  Result  create  New  Result  Boolean  visit  Field  Access  visit  Method  Invocation  refine  Array  At  Length  Access  refine  String  At  Length  Invocation  get  Array  Or  String  Annotation  refine  At  Length  Access  visit  String  Concatenate  Assignment  visit  String  Concatenate  calculate  Length  Addition  is  Nullable  create  Annotation  For  String  Concatenation  string  Concatenation  calculate  Numerical  Binary  Op  calculate  Range  Binary  Op  calculate  Values  Binary  Op  visit  Numerical  Addition  visit  Numerical  Subtraction  visit  Numerical  Multiplication  visit  Integer  Division  visit  Floating  Division  visit  Integer  Remainder  visit  Floating  Remainder  visit  Left  Shift  visit  Signed  Right  Shift  visit  Unsigned  Right  Shift  visit  Bitwise  And  visit  Bitwise  Or  visit  Bitwise  Xor  calculate  Numerical  Unary  Op  calculate  Range  Unary  Op  calculate  Values  Unary  Op  visit  Numerical  Minus  visit  Numerical  Plus  visit  Bitwise  Complement  calculate  Binary  Comparison  refine  Int  Ranges  create  Annotation  From  Results  And  Add  To  Store  create  Annotation  From  Range  And  Add  To  Store  add  Annotation  To  Store  visit  Less  Than  visit  Less  Than  Or  Equal  visit  Greater  Than  visit  Greater  Than  Or  Equal  strengthen  Annotation  Of  Equal  To  process  Conditional  Postconditions  calculate  Conditional  Operator  visit  Conditional  Not  visit  Conditional  And  visit  Conditional  Or,1,1
54,is  Nullable,Node,boolean,,is  Primitive  get  Kind  get  Type  get  Operand  element  From  Use  get  Tree  is  Compile  Time  Constant,Value  Transfer,atypefactory  hierarchy  Numerical  Binary  Ops  Numerical  Unary  Ops  Comparison  Operators  Conditional  Operators  all  booleans,Value  Transfer  get  Int  Range  String  Length  Range  get  String  Length  Range  get  String  Lengths  get  String  Values  get  Boolean  Values  get  Char  Values  get  Value  Annotation  get  Value  Annotation  get  Numerical  Values  get  Numerical  Values  get  Int  Range  get  Int  Range  From  Annotation  is  Int  Range  is  Integral  Unknown  Val  is  Int  Range  Or  Integral  Unknown  Val  create  New  Result  create  New  Result  Boolean  visit  Field  Access  visit  Method  Invocation  refine  Array  At  Length  Access  refine  String  At  Length  Invocation  get  Array  Or  String  Annotation  refine  At  Length  Access  visit  String  Concatenate  Assignment  visit  String  Concatenate  calculate  Length  Addition  create  Annotation  For  String  Concatenation  string  Concatenation  calculate  Numerical  Binary  Op  calculate  Range  Binary  Op  calculate  Values  Binary  Op  visit  Numerical  Addition  visit  Numerical  Subtraction  visit  Numerical  Multiplication  visit  Integer  Division  visit  Floating  Division  visit  Integer  Remainder  visit  Floating  Remainder  visit  Left  Shift  visit  Signed  Right  Shift  visit  Unsigned  Right  Shift  visit  Bitwise  And  visit  Bitwise  Or  visit  Bitwise  Xor  calculate  Numerical  Unary  Op  calculate  Range  Unary  Op  calculate  Values  Unary  Op  visit  Numerical  Minus  visit  Numerical  Plus  visit  Bitwise  Complement  calculate  Binary  Comparison  refine  Int  Ranges  create  Annotation  From  Results  And  Add  To  Store  create  Annotation  From  Range  And  Add  To  Store  add  Annotation  To  Store  visit  Less  Than  visit  Less  Than  Or  Equal  visit  Greater  Than  visit  Greater  Than  Or  Equal  strengthen  Annotation  Of  Equal  To  process  Conditional  Postconditions  calculate  Conditional  Operator  visit  Conditional  Not  visit  Conditional  And  visit  Conditional  Or,Node,block  lvalue  assignment  Context  in  Source  type,Node  get  Block  set  Block  get  Tree  get  Type  accept  is  L  Value  set  L  Value  get  In  Source  set  In  Source  get  Assignment  Context  set  Assignment  Context  get  Operands  get  Transitive  Operands  is  Array  Length  Access,0,0
55,is  Nullable,Node,boolean,,is  Primitive  get  Kind  get  Type  get  Operand  element  From  Use  get  Tree  is  Compile  Time  Constant,Node,block  lvalue  assignment  Context  in  Source  type,Node  get  Block  set  Block  get  Tree  get  Type  accept  is  L  Value  set  L  Value  get  In  Source  set  In  Source  get  Assignment  Context  set  Assignment  Context  get  Operands  get  Transitive  Operands  is  Array  Length  Access,Value  Transfer,atypefactory  hierarchy  Numerical  Binary  Ops  Numerical  Unary  Ops  Comparison  Operators  Conditional  Operators  all  booleans,Value  Transfer  get  Int  Range  String  Length  Range  get  String  Length  Range  get  String  Lengths  get  String  Values  get  Boolean  Values  get  Char  Values  get  Value  Annotation  get  Value  Annotation  get  Numerical  Values  get  Numerical  Values  get  Int  Range  get  Int  Range  From  Annotation  is  Int  Range  is  Integral  Unknown  Val  is  Int  Range  Or  Integral  Unknown  Val  create  New  Result  create  New  Result  Boolean  visit  Field  Access  visit  Method  Invocation  refine  Array  At  Length  Access  refine  String  At  Length  Invocation  get  Array  Or  String  Annotation  refine  At  Length  Access  visit  String  Concatenate  Assignment  visit  String  Concatenate  calculate  Length  Addition  create  Annotation  For  String  Concatenation  string  Concatenation  calculate  Numerical  Binary  Op  calculate  Range  Binary  Op  calculate  Values  Binary  Op  visit  Numerical  Addition  visit  Numerical  Subtraction  visit  Numerical  Multiplication  visit  Integer  Division  visit  Floating  Division  visit  Integer  Remainder  visit  Floating  Remainder  visit  Left  Shift  visit  Signed  Right  Shift  visit  Unsigned  Right  Shift  visit  Bitwise  And  visit  Bitwise  Or  visit  Bitwise  Xor  calculate  Numerical  Unary  Op  calculate  Range  Unary  Op  calculate  Values  Unary  Op  visit  Numerical  Minus  visit  Numerical  Plus  visit  Bitwise  Complement  calculate  Binary  Comparison  refine  Int  Ranges  create  Annotation  From  Results  And  Add  To  Store  create  Annotation  From  Range  And  Add  To  Store  add  Annotation  To  Store  visit  Less  Than  visit  Less  Than  Or  Equal  visit  Greater  Than  visit  Greater  Than  Or  Equal  strengthen  Annotation  Of  Equal  To  process  Conditional  Postconditions  calculate  Conditional  Operator  visit  Conditional  Not  visit  Conditional  And  visit  Conditional  Or,1,0
56,should  Check  Top  Level  Declared  Type,Annotated  Type  Mirror  Tree,boolean,,get  Kind  is  Local  Variable  is  Expression  Tree  is  Type  Tree,Base  Type  Validator,is  Valid  check  Top  Level  Declared  Type  checker  visitor  atype  Factory,Base  Type  Validator  is  Valid  is  Valid  Type  default  Action  reduce  report  Validity  Result  report  Validity  Result  On  Unannotated  Type  report  Invalid  Bounds  report  Invalid  Type  report  Invalid  Annotations  On  Use  visit  Declared  extract  Parameterized  Type  Tree  visit  Primitive  visit  Array  visit  Parameterized  Type  visit  Type  Variable  visit  Wildcard  are  Bounds  Valid,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
57,should  Check  Top  Level  Declared  Type,Annotated  Type  Mirror  Tree,boolean,,get  Kind  is  Local  Variable  is  Expression  Tree  is  Type  Tree,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Base  Type  Validator,is  Valid  check  Top  Level  Declared  Type  checker  visitor  atype  Factory,Base  Type  Validator  is  Valid  is  Valid  Type  default  Action  reduce  report  Validity  Result  report  Validity  Result  On  Unannotated  Type  report  Invalid  Bounds  report  Invalid  Type  report  Invalid  Annotations  On  Use  visit  Declared  extract  Parameterized  Type  Tree  visit  Primitive  visit  Array  visit  Parameterized  Type  visit  Type  Variable  visit  Wildcard  are  Bounds  Valid,1,0
58,is  Top  Level  Valid  Type,Annotated  Type  Mirror  Base  Type  Validator,List  Diag  Message,,get  Annotations  create  Annotation  Set  get  Top  Annotation  contains  Same  singleton  List  add  can  Have  Empty  Annotation  Set  size  get  Width  singleton  List  empty  List,Base  Type  Validator,is  Valid  check  Top  Level  Declared  Type  checker  visitor  atype  Factory,Base  Type  Validator  is  Valid  should  Check  Top  Level  Declared  Type  is  Valid  Type  default  Action  reduce  report  Validity  Result  report  Validity  Result  On  Unannotated  Type  report  Invalid  Bounds  report  Invalid  Type  report  Invalid  Annotations  On  Use  visit  Declared  extract  Parameterized  Type  Tree  visit  Primitive  visit  Array  visit  Parameterized  Type  visit  Type  Variable  visit  Wildcard  are  Bounds  Valid,Qualifier  Hierarchy,,is  Valid  get  Width  get  Top  Annotations  get  Top  Annotation  get  Bottom  Annotation  get  Bottom  Annotations  get  Polymorphic  Annotation  get  Type  Qualifiers  is  Subtype  is  Subtype  least  Upper  Bound  number  Of  Iterations  Before  Widening  widened  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  is  Subtype  Type  Variable  is  Subtype  Type  Variable  least  Upper  Bound  Type  Variable  greatest  Lower  Bound  Type  Variable  least  Upper  Bounds  Type  Variable  greatest  Lower  Bounds  Type  Variable  can  Have  Empty  Annotation  Set  is  Subtype  is  Subtype  least  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  find  Annotation  In  Same  Hierarchy  find  Annotation  In  Hierarchy  update  Mapping  To  Mutable  Set  assert  Same  Size  assert  Same  Size,0,0
59,is  Top  Level  Valid  Type,Annotated  Type  Mirror  Base  Type  Validator,List  Diag  Message,,get  Annotations  create  Annotation  Set  get  Top  Annotation  contains  Same  singleton  List  add  can  Have  Empty  Annotation  Set  size  get  Width  singleton  List  empty  List,Qualifier  Hierarchy,,is  Valid  get  Width  get  Top  Annotations  get  Top  Annotation  get  Bottom  Annotation  get  Bottom  Annotations  get  Polymorphic  Annotation  get  Type  Qualifiers  is  Subtype  is  Subtype  least  Upper  Bound  number  Of  Iterations  Before  Widening  widened  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  is  Subtype  Type  Variable  is  Subtype  Type  Variable  least  Upper  Bound  Type  Variable  greatest  Lower  Bound  Type  Variable  least  Upper  Bounds  Type  Variable  greatest  Lower  Bounds  Type  Variable  can  Have  Empty  Annotation  Set  is  Subtype  is  Subtype  least  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  find  Annotation  In  Same  Hierarchy  find  Annotation  In  Hierarchy  update  Mapping  To  Mutable  Set  assert  Same  Size  assert  Same  Size,Base  Type  Validator,is  Valid  check  Top  Level  Declared  Type  checker  visitor  atype  Factory,Base  Type  Validator  is  Valid  should  Check  Top  Level  Declared  Type  is  Valid  Type  default  Action  reduce  report  Validity  Result  report  Validity  Result  On  Unannotated  Type  report  Invalid  Bounds  report  Invalid  Type  report  Invalid  Annotations  On  Use  visit  Declared  extract  Parameterized  Type  Tree  visit  Primitive  visit  Array  visit  Parameterized  Type  visit  Type  Variable  visit  Wildcard  are  Bounds  Valid,1,1
60,is  Top  Level  Valid  Type,Annotated  Type  Mirror  Base  Type  Validator,List  Diag  Message,,get  Annotations  create  Annotation  Set  get  Top  Annotation  contains  Same  singleton  List  add  can  Have  Empty  Annotation  Set  size  get  Width  singleton  List  empty  List,Base  Type  Validator,is  Valid  check  Top  Level  Declared  Type  checker  visitor  atype  Factory,Base  Type  Validator  is  Valid  should  Check  Top  Level  Declared  Type  is  Valid  Type  default  Action  reduce  report  Validity  Result  report  Validity  Result  On  Unannotated  Type  report  Invalid  Bounds  report  Invalid  Type  report  Invalid  Annotations  On  Use  visit  Declared  extract  Parameterized  Type  Tree  visit  Primitive  visit  Array  visit  Parameterized  Type  visit  Type  Variable  visit  Wildcard  are  Bounds  Valid,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
61,is  Top  Level  Valid  Type,Annotated  Type  Mirror  Base  Type  Validator,List  Diag  Message,,get  Annotations  create  Annotation  Set  get  Top  Annotation  contains  Same  singleton  List  add  can  Have  Empty  Annotation  Set  size  get  Width  singleton  List  empty  List,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Base  Type  Validator,is  Valid  check  Top  Level  Declared  Type  checker  visitor  atype  Factory,Base  Type  Validator  is  Valid  should  Check  Top  Level  Declared  Type  is  Valid  Type  default  Action  reduce  report  Validity  Result  report  Validity  Result  On  Unannotated  Type  report  Invalid  Bounds  report  Invalid  Type  report  Invalid  Annotations  On  Use  visit  Declared  extract  Parameterized  Type  Tree  visit  Primitive  visit  Array  visit  Parameterized  Type  visit  Type  Variable  visit  Wildcard  are  Bounds  Valid,1,0
62,lub,Annotation  Mirror  Annotation  Mirror  Annotated  Type  Factory,Setextends  Annotation  Mirror,,is  Empty  least  Upper  Bounds  get  Qualifier  Hierarchy,Default  Reflection  Resolver,msg  prefex  reflection  checker  provider  processing  Env  trees  debug,Default  Reflection  Resolver  is  Reflective  Method  Invocation  resolve  Reflective  Call  resolve  Method  Call  check  Method  Agruments  check  New  Class  Arguments  check  Agruments  resolve  Constructor  Call  resolve  Reflective  Method  get  Corrected  Args  resolve  Reflective  Constructor  get  Method  Val  is  Unknown  Method  get  Method  Symbolsfor  get  Constructor  Symbolsfor  get  Symbol  glb  debug  Reflection,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
63,lub,Annotation  Mirror  Annotation  Mirror  Annotated  Type  Factory,Setextends  Annotation  Mirror,,is  Empty  least  Upper  Bounds  get  Qualifier  Hierarchy,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Default  Reflection  Resolver,msg  prefex  reflection  checker  provider  processing  Env  trees  debug,Default  Reflection  Resolver  is  Reflective  Method  Invocation  resolve  Reflective  Call  resolve  Method  Call  check  Method  Agruments  check  New  Class  Arguments  check  Agruments  resolve  Constructor  Call  resolve  Reflective  Method  get  Corrected  Args  resolve  Reflective  Constructor  get  Method  Val  is  Unknown  Method  get  Method  Symbolsfor  get  Constructor  Symbolsfor  get  Symbol  glb  debug  Reflection,1,0
64,glb,Annotation  Mirror  Annotation  Mirror  Annotated  Type  Factory,Setextends  Annotation  Mirror,,is  Empty  greatest  Lower  Bounds  get  Qualifier  Hierarchy,Default  Reflection  Resolver,msg  prefex  reflection  checker  provider  processing  Env  trees  debug,Default  Reflection  Resolver  is  Reflective  Method  Invocation  resolve  Reflective  Call  resolve  Method  Call  check  Method  Agruments  check  New  Class  Arguments  check  Agruments  resolve  Constructor  Call  resolve  Reflective  Method  get  Corrected  Args  resolve  Reflective  Constructor  get  Method  Val  is  Unknown  Method  get  Method  Symbolsfor  get  Constructor  Symbolsfor  get  Symbol  lub  debug  Reflection,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
65,glb,Annotation  Mirror  Annotation  Mirror  Annotated  Type  Factory,Setextends  Annotation  Mirror,,is  Empty  greatest  Lower  Bounds  get  Qualifier  Hierarchy,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Default  Reflection  Resolver,msg  prefex  reflection  checker  provider  processing  Env  trees  debug,Default  Reflection  Resolver  is  Reflective  Method  Invocation  resolve  Reflective  Call  resolve  Method  Call  check  Method  Agruments  check  New  Class  Arguments  check  Agruments  resolve  Constructor  Call  resolve  Reflective  Method  get  Corrected  Args  resolve  Reflective  Constructor  get  Method  Val  is  Unknown  Method  get  Method  Symbolsfor  get  Constructor  Symbolsfor  get  Symbol  lub  debug  Reflection,1,0
66,get  Enclosing  Class  Name,Whole  Program  Inference  Scenes,String,,to  String  flat  Name  enclosing  Class  get  Element,Whole  Program  Inference  Scenes,storage,Whole  Program  Inference  Scenes  update  From  Object  Creation  update  From  Method  Invocation  update  Inferred  Executable  Parameter  Types  update  From  Override  update  From  Local  Assignment  update  From  Field  Assignment  update  From  Return  write  Results  To  File  is  Element  From  Source  Code,Local  Variable  Node,tree  receiver,Local  Variable  Node  Local  Variable  Node  get  Element  get  Receiver  get  Name  get  Tree  accept  to  String  equals  hash  Code  get  Operands,0,0
67,get  Enclosing  Class  Name,Whole  Program  Inference  Scenes,String,,to  String  flat  Name  enclosing  Class  get  Element,Local  Variable  Node,tree  receiver,Local  Variable  Node  Local  Variable  Node  get  Element  get  Receiver  get  Name  get  Tree  accept  to  String  equals  hash  Code  get  Operands,Whole  Program  Inference  Scenes,storage,Whole  Program  Inference  Scenes  update  From  Object  Creation  update  From  Method  Invocation  update  Inferred  Executable  Parameter  Types  update  From  Override  update  From  Local  Assignment  update  From  Field  Assignment  update  From  Return  write  Results  To  File  is  Element  From  Source  Code,1,1
68,get  Supported  Annos  In  Set,Set  Annotation  Annotated  Type  Factory,Set  Annotation,,get  Supported  Type  Qualifiers  equals  get  Name  add,Whole  Program  Inference  Scenes  Storage,annos  To  Ignore  jaif  files  path  ignore  Null  Assignments  scenes  modified  Scenes  Annotations  In  Contexts  serial  Version  U  I  D,Whole  Program  Inference  Scenes  Storage  write  Scenes  get  Jaif  Path  get  Scene  get  A  Class  get  A  Class  update  Annotation  Set  In  Scene  updates  A  T  M  With  L  U  B  should  Ignore  has  Matching  Type  Kind  type  Element  To  A  T  M  update  Type  Element  From  A  T  M  add  Annotations  To  A  Type  Element,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
69,get  Supported  Annos  In  Set,Set  Annotation  Annotated  Type  Factory,Set  Annotation,,get  Supported  Type  Qualifiers  equals  get  Name  add,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Whole  Program  Inference  Scenes  Storage,annos  To  Ignore  jaif  files  path  ignore  Null  Assignments  scenes  modified  Scenes  Annotations  In  Contexts  serial  Version  U  I  D,Whole  Program  Inference  Scenes  Storage  write  Scenes  get  Jaif  Path  get  Scene  get  A  Class  get  A  Class  update  Annotation  Set  In  Scene  updates  A  T  M  With  L  U  B  should  Ignore  has  Matching  Type  Kind  type  Element  To  A  T  M  update  Type  Element  From  A  T  M  add  Annotations  To  A  Type  Element,1,0
70,might  Have  Type  Arguments,Annotated  Type  Mirror,boolean,,get  Kind  is  Empty  get  Type  Arguments,Stub  Parser,warn  If  Not  Found  warn  If  Not  Found  Ignores  Classes  warn  If  Stub  Overwrites  Bytecode  warn  If  Stub  Redundant  With  Bytecode  debug  Stub  Parser  filename  stub  Unit  processing  Env  atype  Factory  elements  all  Stub  Annotations  imported  Constants  imported  Types  from  Stub  File  type  Parameters  parse  State  atypes  decl  Annos  line  separator  is  Jdk  As  Stub  find  Variable  Element  Name  Cache  find  Variable  Element  Field  Cache  warnings  Fq  Name  package  Name  class  Name,Stub  Parser  annos  In  Package  annos  In  Type  create  Imported  Annotations  Map  get  Importable  Members  get  All  Stub  Annotations  add  Enclosing  Types  To  Imported  Types  parse  parse  Jdk  File  As  Stub  parse  parse  Stub  Unit  process  process  Stub  Unit  process  Compilation  Unit  process  Package  process  Type  Decl  has  No  Stub  Parser  Warning  process  Type  process  Enum  annotate  Supertypes  process  Callable  Declaration  process  Parameters  clear  Annotations  annotate  As  Array  unwrap  Declared  Type  annotate  process  Field  process  Enum  Constant  innermost  Component  Type  annotate  Innermost  Component  Type  annotate  record  Decl  Annotation  record  Decl  Annotation  From  Stub  File  annotate  Type  Parameters  get  Members  put  New  Element  find  Type  find  Element  find  Element  find  Element  find  Element  find  Element  find  Element  find  Field  Element  get  Type  Element  Or  Null  get  Type  Element  find  Package  get  Annotation  get  Value  Of  Expression  In  Annotation  find  Type  Of  Name  convert  convert  builder  Add  Element  builder  Set  Value  find  Variable  Element  find  Variable  Element  put  No  Override  put  Or  Add  To  Map  put  Merge  put  All  New  stub  Warn  Not  Found  stub  Warn  Overwrites  Bytecode  stub  Warn  stub  Debug  Fq  Name  to  String,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
71,might  Have  Type  Arguments,Annotated  Type  Mirror,boolean,,get  Kind  is  Empty  get  Type  Arguments,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Stub  Parser,warn  If  Not  Found  warn  If  Not  Found  Ignores  Classes  warn  If  Stub  Overwrites  Bytecode  warn  If  Stub  Redundant  With  Bytecode  debug  Stub  Parser  filename  stub  Unit  processing  Env  atype  Factory  elements  all  Stub  Annotations  imported  Constants  imported  Types  from  Stub  File  type  Parameters  parse  State  atypes  decl  Annos  line  separator  is  Jdk  As  Stub  find  Variable  Element  Name  Cache  find  Variable  Element  Field  Cache  warnings  Fq  Name  package  Name  class  Name,Stub  Parser  annos  In  Package  annos  In  Type  create  Imported  Annotations  Map  get  Importable  Members  get  All  Stub  Annotations  add  Enclosing  Types  To  Imported  Types  parse  parse  Jdk  File  As  Stub  parse  parse  Stub  Unit  process  process  Stub  Unit  process  Compilation  Unit  process  Package  process  Type  Decl  has  No  Stub  Parser  Warning  process  Type  process  Enum  annotate  Supertypes  process  Callable  Declaration  process  Parameters  clear  Annotations  annotate  As  Array  unwrap  Declared  Type  annotate  process  Field  process  Enum  Constant  innermost  Component  Type  annotate  Innermost  Component  Type  annotate  record  Decl  Annotation  record  Decl  Annotation  From  Stub  File  annotate  Type  Parameters  get  Members  put  New  Element  find  Type  find  Element  find  Element  find  Element  find  Element  find  Element  find  Element  find  Field  Element  get  Type  Element  Or  Null  get  Type  Element  find  Package  get  Annotation  get  Value  Of  Expression  In  Annotation  find  Type  Of  Name  convert  convert  builder  Add  Element  builder  Set  Value  find  Variable  Element  find  Variable  Element  put  No  Override  put  Or  Add  To  Map  put  Merge  put  All  New  stub  Warn  Not  Found  stub  Warn  Overwrites  Bytecode  stub  Warn  stub  Debug  Fq  Name  to  String,1,0
72,apply  Annos  From  Bound,Annotated  Type  Mirror  Annotated  Type  Mirror  Annotation  Mirror,void,,get  Kind  get  Kind  get  Annotation  In  Hierarchy  get  Annotation  In  Hierarchy  join  Lines  add  Annotation,Propagation  Type  Annotator,pause  parents,Propagation  Type  Annotator  reset  scan  visit  Declared  visit  Wildcard  propagate  Super  Bound  propagate  Extends  Bound  get  Type  Param  From  Enclosing  Class,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
73,apply  Annos  From  Bound,Annotated  Type  Mirror  Annotated  Type  Mirror  Annotation  Mirror,void,,get  Kind  get  Kind  get  Annotation  In  Hierarchy  get  Annotation  In  Hierarchy  join  Lines  add  Annotation,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Propagation  Type  Annotator,pause  parents,Propagation  Type  Annotator  reset  scan  visit  Declared  visit  Wildcard  propagate  Super  Bound  propagate  Extends  Bound  get  Type  Param  From  Enclosing  Class,1,0
74,copy  Primary  Annos,Annotated  Type  Mirror  Annotated  Type  Mirror,Annotated  Type  Mirror,,replace  Annotations  get  Annotations  get  Kind  get  Alternatives  add  Missing  Annotations  get  Annotations,As  Super  Visitor,types  annotated  Type  Factory  is  Uninferred  Type  Agrument,As  Super  Visitor  as  Super  reset  visit  ensure  Primary  Is  Correct  For  Unions  And  Intersections  default  Error  Message  error  Type  Not  Erased  Subtype  Of  Super  Type  as  Super  Wildcard  Lower  Bound  as  Super  Typevar  Lower  Bound  as  Super  Lower  Bound  is  Erased  Java  Subtype  is  Erased  Java  Subtype  are  Erased  Java  Types  Equivalent  visitarray  array  visitarray  intersection  visitarray  declared  visitarray  typevar  visitarray  wildcard  visitdeclared  declared  visitdeclared  intersection  visitdeclared  primitive  visitdeclared  typevar  visitdeclared  union  visitdeclared  wildcard  visitintersection  declared  visitintersection  intersection  visitintersection  primitive  visitintersection  typevar  visitintersection  union  visitintersection  wildcard  visitprimitive  primitive  visitprimitive  other  visitprimitive  declared  can  Be  Narrowing  Primitive  Conversion  visitprimitive  intersection  visitprimitive  typevar  visitprimitive  union  visitprimitive  wildcard  visittypevar  nottypevarnorwildcard  visittypevar  declared  visittypevar  intersection  visittypevar  primitive  visittypevar  typevar  visittypevar  union  visittypevar  wildcard  visitunion  other  visitunion  declared  visitunion  intersection  visitunion  typevar  visitunion  union  visitunion  wildcard  visitwildcard  nottypvarnorwildcard  visitwildcard  array  visitwildcard  declared  visitwildcard  intersection  visitwildcard  primitive  visitwildcard  typevar  visitwildcard  union  visitwildcard  wildcard  same  Annotated  Type  Factory,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
75,copy  Primary  Annos,Annotated  Type  Mirror  Annotated  Type  Mirror,Annotated  Type  Mirror,,replace  Annotations  get  Annotations  get  Kind  get  Alternatives  add  Missing  Annotations  get  Annotations,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,As  Super  Visitor,types  annotated  Type  Factory  is  Uninferred  Type  Agrument,As  Super  Visitor  as  Super  reset  visit  ensure  Primary  Is  Correct  For  Unions  And  Intersections  default  Error  Message  error  Type  Not  Erased  Subtype  Of  Super  Type  as  Super  Wildcard  Lower  Bound  as  Super  Typevar  Lower  Bound  as  Super  Lower  Bound  is  Erased  Java  Subtype  is  Erased  Java  Subtype  are  Erased  Java  Types  Equivalent  visitarray  array  visitarray  intersection  visitarray  declared  visitarray  typevar  visitarray  wildcard  visitdeclared  declared  visitdeclared  intersection  visitdeclared  primitive  visitdeclared  typevar  visitdeclared  union  visitdeclared  wildcard  visitintersection  declared  visitintersection  intersection  visitintersection  primitive  visitintersection  typevar  visitintersection  union  visitintersection  wildcard  visitprimitive  primitive  visitprimitive  other  visitprimitive  declared  can  Be  Narrowing  Primitive  Conversion  visitprimitive  intersection  visitprimitive  typevar  visitprimitive  union  visitprimitive  wildcard  visittypevar  nottypevarnorwildcard  visittypevar  declared  visittypevar  intersection  visittypevar  primitive  visittypevar  typevar  visittypevar  union  visittypevar  wildcard  visitunion  other  visitunion  declared  visitunion  intersection  visitunion  typevar  visitunion  union  visitunion  wildcard  visitwildcard  nottypvarnorwildcard  visitwildcard  array  visitwildcard  declared  visitwildcard  intersection  visitwildcard  primitive  visitwildcard  typevar  visitwildcard  union  visitwildcard  wildcard  same  Annotated  Type  Factory,1,0
76,generate  Hashcode,Annotated  Type  Mirror,Integer,,hash  Code  to  String  get  Annotations  hash  Code  to  String  get  Underlying  Type,Hashcode  Atm  Visitor,,scan  reduce,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
77,generate  Hashcode,Annotated  Type  Mirror,Integer,,hash  Code  to  String  get  Annotations  hash  Code  to  String  get  Underlying  Type,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Hashcode  Atm  Visitor,,scan  reduce,1,0
78,is  Subtype,Annotation  Mirror  Annotation  Mirror,boolean,,,Qualifier  Hierarchy,,is  Valid  get  Width  get  Top  Annotations  get  Top  Annotation  get  Bottom  Annotation  get  Bottom  Annotations  get  Polymorphic  Annotation  get  Type  Qualifiers  is  Subtype  least  Upper  Bound  number  Of  Iterations  Before  Widening  widened  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  is  Subtype  Type  Variable  is  Subtype  Type  Variable  least  Upper  Bound  Type  Variable  greatest  Lower  Bound  Type  Variable  least  Upper  Bounds  Type  Variable  greatest  Lower  Bounds  Type  Variable  can  Have  Empty  Annotation  Set  is  Subtype  is  Subtype  least  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  find  Annotation  In  Same  Hierarchy  find  Annotation  In  Hierarchy  update  Mapping  To  Mutable  Set  assert  Same  Size  assert  Same  Size  is  Top  Level  Valid  Type,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
79,is  Subtype,Annotation  Mirror  Annotation  Mirror,boolean,,,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Qualifier  Hierarchy,,is  Valid  get  Width  get  Top  Annotations  get  Top  Annotation  get  Bottom  Annotation  get  Bottom  Annotations  get  Polymorphic  Annotation  get  Type  Qualifiers  is  Subtype  least  Upper  Bound  number  Of  Iterations  Before  Widening  widened  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  is  Subtype  Type  Variable  is  Subtype  Type  Variable  least  Upper  Bound  Type  Variable  greatest  Lower  Bound  Type  Variable  least  Upper  Bounds  Type  Variable  greatest  Lower  Bounds  Type  Variable  can  Have  Empty  Annotation  Set  is  Subtype  is  Subtype  least  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  find  Annotation  In  Same  Hierarchy  find  Annotation  In  Hierarchy  update  Mapping  To  Mutable  Set  assert  Same  Size  assert  Same  Size  is  Top  Level  Valid  Type,1,0
80,is  Subtype,Annotation  Mirror  Annotation  Mirror,boolean,,,Qualifier  Hierarchy,,is  Valid  get  Width  get  Top  Annotations  get  Top  Annotation  get  Bottom  Annotation  get  Bottom  Annotations  get  Polymorphic  Annotation  get  Type  Qualifiers  is  Subtype  least  Upper  Bound  number  Of  Iterations  Before  Widening  widened  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  is  Subtype  Type  Variable  is  Subtype  Type  Variable  least  Upper  Bound  Type  Variable  greatest  Lower  Bound  Type  Variable  least  Upper  Bounds  Type  Variable  greatest  Lower  Bounds  Type  Variable  can  Have  Empty  Annotation  Set  is  Subtype  is  Subtype  least  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  find  Annotation  In  Same  Hierarchy  find  Annotation  In  Hierarchy  update  Mapping  To  Mutable  Set  assert  Same  Size  assert  Same  Size  is  Top  Level  Valid  Type,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
81,is  Subtype,Annotation  Mirror  Annotation  Mirror,boolean,,,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Qualifier  Hierarchy,,is  Valid  get  Width  get  Top  Annotations  get  Top  Annotation  get  Bottom  Annotation  get  Bottom  Annotations  get  Polymorphic  Annotation  get  Type  Qualifiers  is  Subtype  least  Upper  Bound  number  Of  Iterations  Before  Widening  widened  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  is  Subtype  Type  Variable  is  Subtype  Type  Variable  least  Upper  Bound  Type  Variable  greatest  Lower  Bound  Type  Variable  least  Upper  Bounds  Type  Variable  greatest  Lower  Bounds  Type  Variable  can  Have  Empty  Annotation  Set  is  Subtype  is  Subtype  least  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  find  Annotation  In  Same  Hierarchy  find  Annotation  In  Hierarchy  update  Mapping  To  Mutable  Set  assert  Same  Size  assert  Same  Size  is  Top  Level  Valid  Type,1,0
82,least  Upper  Bound,Annotation  Mirror  Annotation  Mirror,Annotation  Mirror,,,Qualifier  Hierarchy,,is  Valid  get  Width  get  Top  Annotations  get  Top  Annotation  get  Bottom  Annotation  get  Bottom  Annotations  get  Polymorphic  Annotation  get  Type  Qualifiers  is  Subtype  is  Subtype  number  Of  Iterations  Before  Widening  widened  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  is  Subtype  Type  Variable  is  Subtype  Type  Variable  least  Upper  Bound  Type  Variable  greatest  Lower  Bound  Type  Variable  least  Upper  Bounds  Type  Variable  greatest  Lower  Bounds  Type  Variable  can  Have  Empty  Annotation  Set  is  Subtype  is  Subtype  least  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  find  Annotation  In  Same  Hierarchy  find  Annotation  In  Hierarchy  update  Mapping  To  Mutable  Set  assert  Same  Size  assert  Same  Size  is  Top  Level  Valid  Type,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
83,least  Upper  Bound,Annotation  Mirror  Annotation  Mirror,Annotation  Mirror,,,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Qualifier  Hierarchy,,is  Valid  get  Width  get  Top  Annotations  get  Top  Annotation  get  Bottom  Annotation  get  Bottom  Annotations  get  Polymorphic  Annotation  get  Type  Qualifiers  is  Subtype  is  Subtype  number  Of  Iterations  Before  Widening  widened  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  is  Subtype  Type  Variable  is  Subtype  Type  Variable  least  Upper  Bound  Type  Variable  greatest  Lower  Bound  Type  Variable  least  Upper  Bounds  Type  Variable  greatest  Lower  Bounds  Type  Variable  can  Have  Empty  Annotation  Set  is  Subtype  is  Subtype  least  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  find  Annotation  In  Same  Hierarchy  find  Annotation  In  Hierarchy  update  Mapping  To  Mutable  Set  assert  Same  Size  assert  Same  Size  is  Top  Level  Valid  Type,1,0
84,greatest  Lower  Bound,Annotation  Mirror  Annotation  Mirror,Annotation  Mirror,,,Qualifier  Hierarchy,,is  Valid  get  Width  get  Top  Annotations  get  Top  Annotation  get  Bottom  Annotation  get  Bottom  Annotations  get  Polymorphic  Annotation  get  Type  Qualifiers  is  Subtype  is  Subtype  least  Upper  Bound  number  Of  Iterations  Before  Widening  widened  Upper  Bound  least  Upper  Bounds  greatest  Lower  Bounds  is  Subtype  Type  Variable  is  Subtype  Type  Variable  least  Upper  Bound  Type  Variable  greatest  Lower  Bound  Type  Variable  least  Upper  Bounds  Type  Variable  greatest  Lower  Bounds  Type  Variable  can  Have  Empty  Annotation  Set  is  Subtype  is  Subtype  least  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  find  Annotation  In  Same  Hierarchy  find  Annotation  In  Hierarchy  update  Mapping  To  Mutable  Set  assert  Same  Size  assert  Same  Size  is  Top  Level  Valid  Type,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
85,greatest  Lower  Bound,Annotation  Mirror  Annotation  Mirror,Annotation  Mirror,,,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Qualifier  Hierarchy,,is  Valid  get  Width  get  Top  Annotations  get  Top  Annotation  get  Bottom  Annotation  get  Bottom  Annotations  get  Polymorphic  Annotation  get  Type  Qualifiers  is  Subtype  is  Subtype  least  Upper  Bound  number  Of  Iterations  Before  Widening  widened  Upper  Bound  least  Upper  Bounds  greatest  Lower  Bounds  is  Subtype  Type  Variable  is  Subtype  Type  Variable  least  Upper  Bound  Type  Variable  greatest  Lower  Bound  Type  Variable  least  Upper  Bounds  Type  Variable  greatest  Lower  Bounds  Type  Variable  can  Have  Empty  Annotation  Set  is  Subtype  is  Subtype  least  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  find  Annotation  In  Same  Hierarchy  find  Annotation  In  Hierarchy  update  Mapping  To  Mutable  Set  assert  Same  Size  assert  Same  Size  is  Top  Level  Valid  Type,1,0
86,least  Upper  Bounds,Annotation  Mirror  Annotation  Mirror,Setextends  Annotation  Mirror,,assert  Same  Size  is  Empty  create  Annotation  Set  least  Upper  Bound  add  assert  Same  Size,Qualifier  Hierarchy,,is  Valid  get  Width  get  Top  Annotations  get  Top  Annotation  get  Bottom  Annotation  get  Bottom  Annotations  get  Polymorphic  Annotation  get  Type  Qualifiers  is  Subtype  is  Subtype  least  Upper  Bound  number  Of  Iterations  Before  Widening  widened  Upper  Bound  greatest  Lower  Bound  greatest  Lower  Bounds  is  Subtype  Type  Variable  is  Subtype  Type  Variable  least  Upper  Bound  Type  Variable  greatest  Lower  Bound  Type  Variable  least  Upper  Bounds  Type  Variable  greatest  Lower  Bounds  Type  Variable  can  Have  Empty  Annotation  Set  is  Subtype  is  Subtype  least  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  find  Annotation  In  Same  Hierarchy  find  Annotation  In  Hierarchy  update  Mapping  To  Mutable  Set  assert  Same  Size  assert  Same  Size  is  Top  Level  Valid  Type,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
87,least  Upper  Bounds,Annotation  Mirror  Annotation  Mirror,Setextends  Annotation  Mirror,,assert  Same  Size  is  Empty  create  Annotation  Set  least  Upper  Bound  add  assert  Same  Size,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Qualifier  Hierarchy,,is  Valid  get  Width  get  Top  Annotations  get  Top  Annotation  get  Bottom  Annotation  get  Bottom  Annotations  get  Polymorphic  Annotation  get  Type  Qualifiers  is  Subtype  is  Subtype  least  Upper  Bound  number  Of  Iterations  Before  Widening  widened  Upper  Bound  greatest  Lower  Bound  greatest  Lower  Bounds  is  Subtype  Type  Variable  is  Subtype  Type  Variable  least  Upper  Bound  Type  Variable  greatest  Lower  Bound  Type  Variable  least  Upper  Bounds  Type  Variable  greatest  Lower  Bounds  Type  Variable  can  Have  Empty  Annotation  Set  is  Subtype  is  Subtype  least  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  find  Annotation  In  Same  Hierarchy  find  Annotation  In  Hierarchy  update  Mapping  To  Mutable  Set  assert  Same  Size  assert  Same  Size  is  Top  Level  Valid  Type,1,0
88,greatest  Lower  Bounds,Annotation  Mirror  Annotation  Mirror,Setextends  Annotation  Mirror,,assert  Same  Size  is  Empty  create  Annotation  Set  greatest  Lower  Bound  add  assert  Same  Size,Qualifier  Hierarchy,,is  Valid  get  Width  get  Top  Annotations  get  Top  Annotation  get  Bottom  Annotation  get  Bottom  Annotations  get  Polymorphic  Annotation  get  Type  Qualifiers  is  Subtype  is  Subtype  least  Upper  Bound  number  Of  Iterations  Before  Widening  widened  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  is  Subtype  Type  Variable  is  Subtype  Type  Variable  least  Upper  Bound  Type  Variable  greatest  Lower  Bound  Type  Variable  least  Upper  Bounds  Type  Variable  greatest  Lower  Bounds  Type  Variable  can  Have  Empty  Annotation  Set  is  Subtype  is  Subtype  least  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  find  Annotation  In  Same  Hierarchy  find  Annotation  In  Hierarchy  update  Mapping  To  Mutable  Set  assert  Same  Size  assert  Same  Size  is  Top  Level  Valid  Type,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
89,greatest  Lower  Bounds,Annotation  Mirror  Annotation  Mirror,Setextends  Annotation  Mirror,,assert  Same  Size  is  Empty  create  Annotation  Set  greatest  Lower  Bound  add  assert  Same  Size,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Qualifier  Hierarchy,,is  Valid  get  Width  get  Top  Annotations  get  Top  Annotation  get  Bottom  Annotation  get  Bottom  Annotations  get  Polymorphic  Annotation  get  Type  Qualifiers  is  Subtype  is  Subtype  least  Upper  Bound  number  Of  Iterations  Before  Widening  widened  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  is  Subtype  Type  Variable  is  Subtype  Type  Variable  least  Upper  Bound  Type  Variable  greatest  Lower  Bound  Type  Variable  least  Upper  Bounds  Type  Variable  greatest  Lower  Bounds  Type  Variable  can  Have  Empty  Annotation  Set  is  Subtype  is  Subtype  least  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  find  Annotation  In  Same  Hierarchy  find  Annotation  In  Hierarchy  update  Mapping  To  Mutable  Set  assert  Same  Size  assert  Same  Size  is  Top  Level  Valid  Type,1,0
90,add  Annotation  From  Field  Invariant,Annotated  Type  Mirror  Annotated  Type  Mirror  Variable  Element,void,,get  Underlying  Type  get  Kind  get  Kind  get  Kind  get  Extends  Bound  get  Kind  get  Upper  Bound  get  Type  Element  equals  enclosing  Class  get  Field  Invariants  get  Qualifiers  For  get  Simple  Name  replace  Annotations,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
91,add  Annotation  From  Field  Invariant,Annotated  Type  Mirror  Annotated  Type  Mirror  Variable  Element,void,,get  Underlying  Type  get  Kind  get  Kind  get  Kind  get  Extends  Bound  get  Kind  get  Upper  Bound  get  Type  Element  equals  enclosing  Class  get  Field  Invariants  get  Qualifiers  For  get  Simple  Name  replace  Annotations,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,1,0
92,get  String  Type,Annotated  Type  Mirror,Annotated  Declared  Type,,type  From  Class  create  Type  is  Declaration  add  Annotations  get  Effective  Annotations,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
93,get  String  Type,Annotated  Type  Mirror,Annotated  Declared  Type,,type  From  Class  create  Type  is  Declaration  add  Annotations  get  Effective  Annotations,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,1,0
94,widen  To  Upper  Bound,Annotated  Type  Mirror  Annotated  Wildcard  Type,Annotated  Type  Mirror,,get  Underlying  Type  get  Underlying  Type  get  Extends  Bound  is  Erased  Subtype  is  Erased  Subtype  as  Super  get  Kind  is  Interface  get  Kind  get  Type  Element  get  Extends  Bound,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
95,widen  To  Upper  Bound,Annotated  Type  Mirror  Annotated  Wildcard  Type,Annotated  Type  Mirror,,get  Underlying  Type  get  Underlying  Type  get  Extends  Bound  is  Erased  Subtype  is  Erased  Subtype  as  Super  get  Kind  is  Interface  get  Kind  get  Type  Element  get  Extends  Bound,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,1,0
96,substitute,final  final  Map  Type  Variablefinal  Annotated  Type  Mirror  Annotated  Type  Mirrortype  Param  To  Arg  Annotated  Type  Mirror  Annotated  Type  Mirror,Annotated  Type  Mirror,,visit,Type  Variable  Substitutor,Visitor  element  To  Arg  Map,substitute  Type  Variable  Visitor  visit  Array  visit  Type  Variable,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
97,substitute,final  final  Map  Type  Variablefinal  Annotated  Type  Mirror  Annotated  Type  Mirrortype  Param  To  Arg  Annotated  Type  Mirror  Annotated  Type  Mirror,Annotated  Type  Mirror,,visit,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Type  Variable  Substitutor,Visitor  element  To  Arg  Map,substitute  Type  Variable  Visitor  visit  Array  visit  Type  Variable,1,0
98,greatest  Lower  Bound,Annotation  Mirror  Qualifier  Hierarchy,Annotation  Mirror,,iterator  next  has  Next  greatest  Lower  Bound  next,Subtypes  Solver,,solve  From  Subtypes  glb  Subtypes  compare  propagate  Previous  Glbs,Qualifier  Hierarchy,,is  Valid  get  Width  get  Top  Annotations  get  Top  Annotation  get  Bottom  Annotation  get  Bottom  Annotations  get  Polymorphic  Annotation  get  Type  Qualifiers  is  Subtype  is  Subtype  least  Upper  Bound  number  Of  Iterations  Before  Widening  widened  Upper  Bound  least  Upper  Bounds  greatest  Lower  Bounds  is  Subtype  Type  Variable  is  Subtype  Type  Variable  least  Upper  Bound  Type  Variable  greatest  Lower  Bound  Type  Variable  least  Upper  Bounds  Type  Variable  greatest  Lower  Bounds  Type  Variable  can  Have  Empty  Annotation  Set  is  Subtype  is  Subtype  least  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  find  Annotation  In  Same  Hierarchy  find  Annotation  In  Hierarchy  update  Mapping  To  Mutable  Set  assert  Same  Size  assert  Same  Size  is  Top  Level  Valid  Type,0,0
99,greatest  Lower  Bound,Annotation  Mirror  Qualifier  Hierarchy,Annotation  Mirror,,iterator  next  has  Next  greatest  Lower  Bound  next,Qualifier  Hierarchy,,is  Valid  get  Width  get  Top  Annotations  get  Top  Annotation  get  Bottom  Annotation  get  Bottom  Annotations  get  Polymorphic  Annotation  get  Type  Qualifiers  is  Subtype  is  Subtype  least  Upper  Bound  number  Of  Iterations  Before  Widening  widened  Upper  Bound  least  Upper  Bounds  greatest  Lower  Bounds  is  Subtype  Type  Variable  is  Subtype  Type  Variable  least  Upper  Bound  Type  Variable  greatest  Lower  Bound  Type  Variable  least  Upper  Bounds  Type  Variable  greatest  Lower  Bounds  Type  Variable  can  Have  Empty  Annotation  Set  is  Subtype  is  Subtype  least  Upper  Bound  greatest  Lower  Bound  least  Upper  Bounds  greatest  Lower  Bounds  find  Annotation  In  Same  Hierarchy  find  Annotation  In  Hierarchy  update  Mapping  To  Mutable  Set  assert  Same  Size  assert  Same  Size  is  Top  Level  Valid  Type,Subtypes  Solver,,solve  From  Subtypes  glb  Subtypes  compare  propagate  Previous  Glbs,1,0
100,rewrite  With  Inferred  Type,Type  Variable  Annotated  Type  Mirror  Equalities  Solver,void,,get  Constraints  entry  Set  add  Type  Equalities  get  Key  get  Value  get  Targets  get  Constraints  get  remove  add  Type  Equalities  clear  key  Set  substitute  get  put  get  Targets  get  Constraints  get  remove  add  Type  Equalities  clear  key  Set  substitute  get  put  clear  clear,Equalities  Solver,dirty,solve  Equalities  rewrite  With  Inferred  Target  create  Annotated  Type  Var  merge  Types  And  Primaries  merge  Constraints  update  Targets  With  Partially  Inferred  Type  find  Equal  Target,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
101,rewrite  With  Inferred  Type,Type  Variable  Annotated  Type  Mirror  Equalities  Solver,void,,get  Constraints  entry  Set  add  Type  Equalities  get  Key  get  Value  get  Targets  get  Constraints  get  remove  add  Type  Equalities  clear  key  Set  substitute  get  put  get  Targets  get  Constraints  get  remove  add  Type  Equalities  clear  key  Set  substitute  get  put  clear  clear,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Equalities  Solver,dirty,solve  Equalities  rewrite  With  Inferred  Target  create  Annotated  Type  Var  merge  Types  And  Primaries  merge  Constraints  update  Targets  With  Partially  Inferred  Type  find  Equal  Target,1,0
102,rewrite  With  Inferred  Type,Type  Variable  Annotated  Type  Mirror  Equalities  Solver,void,,get  Constraints  entry  Set  add  Type  Equalities  get  Key  get  Value  get  Targets  get  Constraints  get  remove  add  Type  Equalities  clear  key  Set  substitute  get  put  get  Targets  get  Constraints  get  remove  add  Type  Equalities  clear  key  Set  substitute  get  put  clear  clear,Equalities  Solver,dirty,solve  Equalities  rewrite  With  Inferred  Target  create  Annotated  Type  Var  merge  Types  And  Primaries  merge  Constraints  update  Targets  With  Partially  Inferred  Type  find  Equal  Target,Constraint  Map,target  To  Records,Constraint  Map  Constraint  Map  get  Constraints  get  Targets  add  Target  Equality  add  Primary  Equalities  add  Target  Supertype  add  Type  Supertype  add  Primary  Supertype  add  Target  Subtype  add  Type  Subtype  add  Primary  Subtypes  add  Type  Equalities,0,0
103,rewrite  With  Inferred  Type,Type  Variable  Annotated  Type  Mirror  Equalities  Solver,void,,get  Constraints  entry  Set  add  Type  Equalities  get  Key  get  Value  get  Targets  get  Constraints  get  remove  add  Type  Equalities  clear  key  Set  substitute  get  put  get  Targets  get  Constraints  get  remove  add  Type  Equalities  clear  key  Set  substitute  get  put  clear  clear,Constraint  Map,target  To  Records,Constraint  Map  Constraint  Map  get  Constraints  get  Targets  add  Target  Equality  add  Primary  Equalities  add  Target  Supertype  add  Type  Supertype  add  Primary  Supertype  add  Target  Subtype  add  Type  Subtype  add  Primary  Subtypes  add  Type  Equalities,Equalities  Solver,dirty,solve  Equalities  rewrite  With  Inferred  Target  create  Annotated  Type  Var  merge  Types  And  Primaries  merge  Constraints  update  Targets  With  Partially  Inferred  Type  find  Equal  Target,1,1
104,create  Annotated  Type  Var,Type  Variable  Annotated  Type  Factory,Annotated  Type  Variable,,get  Annotated  Type  as  Element,Equalities  Solver,dirty,solve  Equalities  rewrite  With  Inferred  Target  merge  Types  And  Primaries  merge  Constraints  update  Targets  With  Partially  Inferred  Type  find  Equal  Target,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
105,create  Annotated  Type  Var,Type  Variable  Annotated  Type  Factory,Annotated  Type  Variable,,get  Annotated  Type  as  Element,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Equalities  Solver,dirty,solve  Equalities  rewrite  With  Inferred  Target  merge  Types  And  Primaries  merge  Constraints  update  Targets  With  Partially  Inferred  Type  find  Equal  Target,1,0
106,merge  Types  And  Primaries,Map  Annotated  Type  Mirror  Annotation  Mirror  Set  Annotation  Mirror  Map  Annotation  Mirror  Annotation  Mirror  Set  Annotated  Type  Factory,Inferred  Type,,iterator  entry  Set  has  Next  next  get  Key  remove  All  get  Value  has  Next  is  Empty  next  get  Key  get  Value  contains  get  Annotation  In  Hierarchy  replace  Annotation  add  get  Kind  is  Same  Type  get  Underlying  Type  get  Underlying  Type  add  remove  All  get  replace  Annotation  clear  is  Empty  remove  All  put,Equalities  Solver,dirty,solve  Equalities  rewrite  With  Inferred  Target  create  Annotated  Type  Var  merge  Constraints  update  Targets  With  Partially  Inferred  Type  find  Equal  Target,Annotation  Mirror  Set,shadow  Set,Annotation  Mirror  Set  Annotation  Mirror  Set  size  is  Empty  contains  iterator  to  Array  to  Array  add  remove  contains  All  add  All  retain  All  remove  All  clear  single  Element  Set  to  String,0,0
107,merge  Types  And  Primaries,Map  Annotated  Type  Mirror  Annotation  Mirror  Set  Annotation  Mirror  Map  Annotation  Mirror  Annotation  Mirror  Set  Annotated  Type  Factory,Inferred  Type,,iterator  entry  Set  has  Next  next  get  Key  remove  All  get  Value  has  Next  is  Empty  next  get  Key  get  Value  contains  get  Annotation  In  Hierarchy  replace  Annotation  add  get  Kind  is  Same  Type  get  Underlying  Type  get  Underlying  Type  add  remove  All  get  replace  Annotation  clear  is  Empty  remove  All  put,Annotation  Mirror  Set,shadow  Set,Annotation  Mirror  Set  Annotation  Mirror  Set  size  is  Empty  contains  iterator  to  Array  to  Array  add  remove  contains  All  add  All  retain  All  remove  All  clear  single  Element  Set  to  String,Equalities  Solver,dirty,solve  Equalities  rewrite  With  Inferred  Target  create  Annotated  Type  Var  merge  Constraints  update  Targets  With  Partially  Inferred  Type  find  Equal  Target,1,0
108,merge  Types  And  Primaries,Map  Annotated  Type  Mirror  Annotation  Mirror  Set  Annotation  Mirror  Map  Annotation  Mirror  Annotation  Mirror  Set  Annotated  Type  Factory,Inferred  Type,,iterator  entry  Set  has  Next  next  get  Key  remove  All  get  Value  has  Next  is  Empty  next  get  Key  get  Value  contains  get  Annotation  In  Hierarchy  replace  Annotation  add  get  Kind  is  Same  Type  get  Underlying  Type  get  Underlying  Type  add  remove  All  get  replace  Annotation  clear  is  Empty  remove  All  put,Equalities  Solver,dirty,solve  Equalities  rewrite  With  Inferred  Target  create  Annotated  Type  Var  merge  Constraints  update  Targets  With  Partially  Inferred  Type  find  Equal  Target,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
109,merge  Types  And  Primaries,Map  Annotated  Type  Mirror  Annotation  Mirror  Set  Annotation  Mirror  Map  Annotation  Mirror  Annotation  Mirror  Set  Annotated  Type  Factory,Inferred  Type,,iterator  entry  Set  has  Next  next  get  Key  remove  All  get  Value  has  Next  is  Empty  next  get  Key  get  Value  contains  get  Annotation  In  Hierarchy  replace  Annotation  add  get  Kind  is  Same  Type  get  Underlying  Type  get  Underlying  Type  add  remove  All  get  replace  Annotation  clear  is  Empty  remove  All  put,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Equalities  Solver,dirty,solve  Equalities  rewrite  With  Inferred  Target  create  Annotated  Type  Var  merge  Constraints  update  Targets  With  Partially  Inferred  Type  find  Equal  Target,1,0
110,update  Targets  With  Partially  Inferred  Type,Equalities  Constraint  Map  Annotated  Type  Factory,boolean,types  equalities,is  Empty  size  next  iterator  entry  Set  get  Key  get  Value  entry  Set  get  Key  get  Value  retain  All  get  Constraints  get  put  size  add  All  size,Equalities  Solver,dirty,solve  Equalities  rewrite  With  Inferred  Target  create  Annotated  Type  Var  merge  Types  And  Primaries  merge  Constraints  find  Equal  Target,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
111,update  Targets  With  Partially  Inferred  Type,Equalities  Constraint  Map  Annotated  Type  Factory,boolean,types  equalities,is  Empty  size  next  iterator  entry  Set  get  Key  get  Value  entry  Set  get  Key  get  Value  retain  All  get  Constraints  get  put  size  add  All  size,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Equalities  Solver,dirty,solve  Equalities  rewrite  With  Inferred  Target  create  Annotated  Type  Var  merge  Types  And  Primaries  merge  Constraints  find  Equal  Target,1,0
112,update  Targets  With  Partially  Inferred  Type,Equalities  Constraint  Map  Annotated  Type  Factory,boolean,types  equalities,is  Empty  size  next  iterator  entry  Set  get  Key  get  Value  entry  Set  get  Key  get  Value  retain  All  get  Constraints  get  put  size  add  All  size,Equalities  Solver,dirty,solve  Equalities  rewrite  With  Inferred  Target  create  Annotated  Type  Var  merge  Types  And  Primaries  merge  Constraints  find  Equal  Target,Constraint  Map,target  To  Records,Constraint  Map  Constraint  Map  get  Constraints  get  Targets  add  Target  Equality  add  Primary  Equalities  add  Target  Supertype  add  Type  Supertype  add  Primary  Supertype  add  Target  Subtype  add  Type  Subtype  add  Primary  Subtypes  add  Type  Equalities  rewrite  With  Inferred  Type,0,0
113,update  Targets  With  Partially  Inferred  Type,Equalities  Constraint  Map  Annotated  Type  Factory,boolean,types  equalities,is  Empty  size  next  iterator  entry  Set  get  Key  get  Value  entry  Set  get  Key  get  Value  retain  All  get  Constraints  get  put  size  add  All  size,Constraint  Map,target  To  Records,Constraint  Map  Constraint  Map  get  Constraints  get  Targets  add  Target  Equality  add  Primary  Equalities  add  Target  Supertype  add  Type  Supertype  add  Primary  Supertype  add  Target  Subtype  add  Type  Subtype  add  Primary  Subtypes  add  Type  Equalities  rewrite  With  Inferred  Type,Equalities  Solver,dirty,solve  Equalities  rewrite  With  Inferred  Target  create  Annotated  Type  Var  merge  Types  And  Primaries  merge  Constraints  find  Equal  Target,1,0
114,find  Equal  Target,Equalities  Annotation  Mirror  Set,Inferred  Target,,entry  Set  get  Key  get  Value  size  size  key  Set  remove  All  size  size  size,Equalities  Solver,dirty,solve  Equalities  rewrite  With  Inferred  Target  create  Annotated  Type  Var  merge  Types  And  Primaries  merge  Constraints  update  Targets  With  Partially  Inferred  Type,Annotation  Mirror  Set,shadow  Set,Annotation  Mirror  Set  Annotation  Mirror  Set  size  is  Empty  contains  iterator  to  Array  to  Array  add  remove  contains  All  add  All  retain  All  remove  All  clear  single  Element  Set  to  String,0,0
115,find  Equal  Target,Equalities  Annotation  Mirror  Set,Inferred  Target,,entry  Set  get  Key  get  Value  size  size  key  Set  remove  All  size  size  size,Annotation  Mirror  Set,shadow  Set,Annotation  Mirror  Set  Annotation  Mirror  Set  size  is  Empty  contains  iterator  to  Array  to  Array  add  remove  contains  All  add  All  retain  All  remove  All  clear  single  Element  Set  to  String,Equalities  Solver,dirty,solve  Equalities  rewrite  With  Inferred  Target  create  Annotated  Type  Var  merge  Types  And  Primaries  merge  Constraints  update  Targets  With  Partially  Inferred  Type,1,0
116,merge  Lub  Type  With  Equalities,Type  Variable  Annotated  Type  Mirror  Constraint  Map  Annotated  Type  Factory,Inferred  Type,equalities,get  Constraints  get  Top  Annotations  get  Qualifier  Hierarchy  is  Empty  next  iterator  entry  Set  get  Key  get  Value  contains  get  Annotation  In  Hierarchy  get  Kind  is  Same  Type  get  Underlying  Type  get  Underlying  Type  add  replace  Annotation  add,Supertypes  Solver,Lubs  types  primaries,solve  From  Supertypes  merge  Lub  Annos  With  Equalities  add  Primaries  add  Type  get  Primaries  get  Type  target  To  Type  Lubs  compare  propagate  Previous  Lubs  lub  Primaries  ground  Missing  Hierarchies  least  Upper  Bound  least  Upper  Bound,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
117,merge  Lub  Type  With  Equalities,Type  Variable  Annotated  Type  Mirror  Constraint  Map  Annotated  Type  Factory,Inferred  Type,equalities,get  Constraints  get  Top  Annotations  get  Qualifier  Hierarchy  is  Empty  next  iterator  entry  Set  get  Key  get  Value  contains  get  Annotation  In  Hierarchy  get  Kind  is  Same  Type  get  Underlying  Type  get  Underlying  Type  add  replace  Annotation  add,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Supertypes  Solver,Lubs  types  primaries,solve  From  Supertypes  merge  Lub  Annos  With  Equalities  add  Primaries  add  Type  get  Primaries  get  Type  target  To  Type  Lubs  compare  propagate  Previous  Lubs  lub  Primaries  ground  Missing  Hierarchies  least  Upper  Bound  least  Upper  Bound,1,0
118,merge  Lub  Type  With  Equalities,Type  Variable  Annotated  Type  Mirror  Constraint  Map  Annotated  Type  Factory,Inferred  Type,equalities,get  Constraints  get  Top  Annotations  get  Qualifier  Hierarchy  is  Empty  next  iterator  entry  Set  get  Key  get  Value  contains  get  Annotation  In  Hierarchy  get  Kind  is  Same  Type  get  Underlying  Type  get  Underlying  Type  add  replace  Annotation  add,Supertypes  Solver,Lubs  types  primaries,solve  From  Supertypes  merge  Lub  Annos  With  Equalities  add  Primaries  add  Type  get  Primaries  get  Type  target  To  Type  Lubs  compare  propagate  Previous  Lubs  lub  Primaries  ground  Missing  Hierarchies  least  Upper  Bound  least  Upper  Bound,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,0,0
119,merge  Lub  Type  With  Equalities,Type  Variable  Annotated  Type  Mirror  Constraint  Map  Annotated  Type  Factory,Inferred  Type,equalities,get  Constraints  get  Top  Annotations  get  Qualifier  Hierarchy  is  Empty  next  iterator  entry  Set  get  Key  get  Value  contains  get  Annotation  In  Hierarchy  get  Kind  is  Same  Type  get  Underlying  Type  get  Underlying  Type  add  replace  Annotation  add,Annotated  Type  Mirror,equality  comparer  hashcode  visitor  atype  Factory  actual  Type  annotations  uninferred  Type  Argument  Scanner  Annotated  Declared  Type  type  Args  was  Raw  enclosing  Type  declaration  Annotated  Executable  Type  element  param  Types  receiver  Type  return  Type  throws  Types  type  Var  Types  Annotated  Array  Type  component  Type  Annotated  Type  Variable  lower  Bound  upper  Bound  declaration  in  Upper  Bounds  Annotated  No  Type  Annotated  Null  Type  Annotated  Primitive  Type  Annotated  Wildcard  Type  super  Bound  extends  Bound  type  Variable  uninferred  Type  Argument  Annotated  Intersection  Type  supertypes  Annotated  Union  Type  alternatives,create  Type  Annotated  Type  Mirror  equals  hash  Code  accept  get  Kind  get  Underlying  Type  is  Declaration  as  Use  is  Annotated  In  Hierarchy  get  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  get  Annotations  get  Annotations  Field  get  Effective  Annotations  get  Annotation  get  Explicit  Annotations  has  Annotation  has  Annotation  get  Effective  Annotation  has  Effective  Annotation  has  Effective  Annotation  has  Explicit  Annotation  has  Annotation  Relaxed  has  Effective  Annotation  Relaxed  has  Explicit  Annotation  Relaxed  has  Explicit  Annotation  add  Annotation  replace  Annotation  add  Annotation  add  Annotations  add  Missing  Annotations  replace  Annotations  remove  Annotation  remove  Annotation  remove  Annotation  In  Hierarchy  remove  Non  Top  Annotation  In  Hierarchy  remove  Annotations  clear  Annotations  to  String  to  String  get  Erased  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  contains  Uninferred  Type  Arguments  default  Action  reduce  create  Type  Of  Object  add  Upper  Bound  Type  From  Value  Type  Annotated  Declared  Type  is  Declaration  deep  Copy  deep  Copy  as  Use  accept  set  Type  Arguments  get  Type  Arguments  was  Raw  set  Was  Raw  get  Underlying  Type  direct  Super  Types  shallow  Copy  shallow  Copy  get  Erased  set  Enclosing  Type  get  Enclosing  Type  Annotated  Executable  Type  is  Var  Args  accept  get  Underlying  Type  add  Annotation  set  Parameter  Types  get  Parameter  Types  set  Return  Type  get  Return  Type  set  Receiver  Type  get  Receiver  Type  set  Thrown  Types  get  Thrown  Types  set  Type  Variables  get  Type  Variables  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Element  set  Element  get  Erased  erasure  List  Annotated  Array  Type  accept  get  Underlying  Type  set  Component  Type  get  Component  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  check  Bound  Annotated  Type  Variable  is  Declaration  add  Annotation  set  Declaration  as  Use  accept  get  Underlying  Type  set  Lower  Bound  get  Lower  Bound  Field  get  Lower  Bound  fixup  Bound  Annotations  replace  Upper  Bound  Annotations  set  Upper  Bound  get  Upper  Bound  Field  get  Upper  Bound  get  Bounds  get  Bound  Fields  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  Annotated  No  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Null  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Primitive  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  Annotated  Wildcard  Type  add  Annotation  set  Super  Bound  get  Super  Bound  Field  get  Super  Bound  set  Extends  Bound  get  Extends  Bound  Field  get  Extends  Bound  fixup  Bound  Annotations  set  Type  Variable  set  Type  Variable  get  Type  Variable  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Erased  set  Uninferred  Type  Argument  is  Uninferred  Type  Argument  Annotated  Intersection  Type  accept  get  Underlying  Type  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  direct  Super  Types  direct  Super  Types  Field  set  Direct  Super  Types  Annotated  Union  Type  accept  deep  Copy  deep  Copy  shallow  Copy  shallow  Copy  get  Alternatives  direct  Super  Types,Supertypes  Solver,Lubs  types  primaries,solve  From  Supertypes  merge  Lub  Annos  With  Equalities  add  Primaries  add  Type  get  Primaries  get  Type  target  To  Type  Lubs  compare  propagate  Previous  Lubs  lub  Primaries  ground  Missing  Hierarchies  least  Upper  Bound  least  Upper  Bound,1,0
120,merge  Lub  Type  With  Equalities,Type  Variable  Annotated  Type  Mirror  Constraint  Map  Annotated  Type  Factory,Inferred  Type,equalities,get  Constraints  get  Top  Annotations  get  Qualifier  Hierarchy  is  Empty  next  iterator  entry  Set  get  Key  get  Value  contains  get  Annotation  In  Hierarchy  get  Kind  is  Same  Type  get  Underlying  Type  get  Underlying  Type  add  replace  Annotation  add,Supertypes  Solver,Lubs  types  primaries,solve  From  Supertypes  merge  Lub  Annos  With  Equalities  add  Primaries  add  Type  get  Primaries  get  Type  target  To  Type  Lubs  compare  propagate  Previous  Lubs  lub  Primaries  ground  Missing  Hierarchies  least  Upper  Bound  least  Upper  Bound,Constraint  Map,target  To  Records,Constraint  Map  Constraint  Map  get  Constraints  get  Targets  add  Target  Equality  add  Primary  Equalities  add  Target  Supertype  add  Type  Supertype  add  Primary  Supertype  add  Target  Subtype  add  Type  Subtype  add  Primary  Subtypes  add  Type  Equalities  rewrite  With  Inferred  Type,0,0
121,merge  Lub  Type  With  Equalities,Type  Variable  Annotated  Type  Mirror  Constraint  Map  Annotated  Type  Factory,Inferred  Type,equalities,get  Constraints  get  Top  Annotations  get  Qualifier  Hierarchy  is  Empty  next  iterator  entry  Set  get  Key  get  Value  contains  get  Annotation  In  Hierarchy  get  Kind  is  Same  Type  get  Underlying  Type  get  Underlying  Type  add  replace  Annotation  add,Constraint  Map,target  To  Records,Constraint  Map  Constraint  Map  get  Constraints  get  Targets  add  Target  Equality  add  Primary  Equalities  add  Target  Supertype  add  Type  Supertype  add  Primary  Supertype  add  Target  Subtype  add  Type  Subtype  add  Primary  Subtypes  add  Type  Equalities  rewrite  With  Inferred  Type,Supertypes  Solver,Lubs  types  primaries,solve  From  Supertypes  merge  Lub  Annos  With  Equalities  add  Primaries  add  Type  get  Primaries  get  Type  target  To  Type  Lubs  compare  propagate  Previous  Lubs  lub  Primaries  ground  Missing  Hierarchies  least  Upper  Bound  least  Upper  Bound,1,0
122,merge  Lub  Annos  With  Equalities,Type  Variable  Annotation  Mirror  Map  Annotation  Mirror  Constraint  Map  Annotated  Type  Factory,Inferred  Type,equalities,get  Constraints  get  Top  Annotations  get  Qualifier  Hierarchy  is  Empty  next  iterator  entry  Set  get  Key  get  Value  contains  get  replace  Annotation  add,Supertypes  Solver,Lubs  types  primaries,solve  From  Supertypes  merge  Lub  Type  With  Equalities  add  Primaries  add  Type  get  Primaries  get  Type  target  To  Type  Lubs  compare  propagate  Previous  Lubs  lub  Primaries  ground  Missing  Hierarchies  least  Upper  Bound  least  Upper  Bound,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
123,merge  Lub  Annos  With  Equalities,Type  Variable  Annotation  Mirror  Map  Annotation  Mirror  Constraint  Map  Annotated  Type  Factory,Inferred  Type,equalities,get  Constraints  get  Top  Annotations  get  Qualifier  Hierarchy  is  Empty  next  iterator  entry  Set  get  Key  get  Value  contains  get  replace  Annotation  add,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Supertypes  Solver,Lubs  types  primaries,solve  From  Supertypes  merge  Lub  Type  With  Equalities  add  Primaries  add  Type  get  Primaries  get  Type  target  To  Type  Lubs  compare  propagate  Previous  Lubs  lub  Primaries  ground  Missing  Hierarchies  least  Upper  Bound  least  Upper  Bound,1,0
124,merge  Lub  Annos  With  Equalities,Type  Variable  Annotation  Mirror  Map  Annotation  Mirror  Constraint  Map  Annotated  Type  Factory,Inferred  Type,equalities,get  Constraints  get  Top  Annotations  get  Qualifier  Hierarchy  is  Empty  next  iterator  entry  Set  get  Key  get  Value  contains  get  replace  Annotation  add,Supertypes  Solver,Lubs  types  primaries,solve  From  Supertypes  merge  Lub  Type  With  Equalities  add  Primaries  add  Type  get  Primaries  get  Type  target  To  Type  Lubs  compare  propagate  Previous  Lubs  lub  Primaries  ground  Missing  Hierarchies  least  Upper  Bound  least  Upper  Bound,Constraint  Map,target  To  Records,Constraint  Map  Constraint  Map  get  Constraints  get  Targets  add  Target  Equality  add  Primary  Equalities  add  Target  Supertype  add  Type  Supertype  add  Primary  Supertype  add  Target  Subtype  add  Type  Subtype  add  Primary  Subtypes  add  Type  Equalities  rewrite  With  Inferred  Type,0,0
125,merge  Lub  Annos  With  Equalities,Type  Variable  Annotation  Mirror  Map  Annotation  Mirror  Constraint  Map  Annotated  Type  Factory,Inferred  Type,equalities,get  Constraints  get  Top  Annotations  get  Qualifier  Hierarchy  is  Empty  next  iterator  entry  Set  get  Key  get  Value  contains  get  replace  Annotation  add,Constraint  Map,target  To  Records,Constraint  Map  Constraint  Map  get  Constraints  get  Targets  add  Target  Equality  add  Primary  Equalities  add  Target  Supertype  add  Type  Supertype  add  Primary  Supertype  add  Target  Subtype  add  Type  Subtype  add  Primary  Subtypes  add  Type  Equalities  rewrite  With  Inferred  Type,Supertypes  Solver,Lubs  types  primaries,solve  From  Supertypes  merge  Lub  Type  With  Equalities  add  Primaries  add  Type  get  Primaries  get  Type  target  To  Type  Lubs  compare  propagate  Previous  Lubs  lub  Primaries  ground  Missing  Hierarchies  least  Upper  Bound  least  Upper  Bound,1,0
126,clamp  To  Lower  Bound,List  Annotated  Type  Mirror  Annotated  Type  Variable  Annotated  Type  Factory  Default  Type  Argument  Inference,void,type  type,get  Qualifier  Hierarchy  get  Top  Annotations  get  get  Underlying  Type  get  Lower  Bound  get  Effective  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  is  Subtype  replace  Annotation,Default  Type  Argument  Inference,equalities  Solver  supertypes  Solver  subtypes  Solver  constraint  Map  Builder  show  Inference  Steps,Default  Type  Argument  Inference  infer  Type  Args  handle  Null  Type  Arguments  has  Null  Type  infer  create  Argument  A  F  Constraints  infer  From  Arguments  infer  From  Assignment  Equalities  create  Initial  Assignment  Constraints  create  Assignment  Constraints  infer  From  Assignment  combine  Supertype  And  Assignment  Results  handle  Uninferred  Type  Variables  reduce  Af  Constraints  af  To  Tu  Constraints  add  Constraints  Between  Targets  add  Or  Get  Declarations,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
127,clamp  To  Lower  Bound,List  Annotated  Type  Mirror  Annotated  Type  Variable  Annotated  Type  Factory  Default  Type  Argument  Inference,void,type  type,get  Qualifier  Hierarchy  get  Top  Annotations  get  get  Underlying  Type  get  Lower  Bound  get  Effective  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  is  Subtype  replace  Annotation,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Default  Type  Argument  Inference,equalities  Solver  supertypes  Solver  subtypes  Solver  constraint  Map  Builder  show  Inference  Steps,Default  Type  Argument  Inference  infer  Type  Args  handle  Null  Type  Arguments  has  Null  Type  infer  create  Argument  A  F  Constraints  infer  From  Arguments  infer  From  Assignment  Equalities  create  Initial  Assignment  Constraints  create  Assignment  Constraints  infer  From  Assignment  combine  Supertype  And  Assignment  Results  handle  Uninferred  Type  Variables  reduce  Af  Constraints  af  To  Tu  Constraints  add  Constraints  Between  Targets  add  Or  Get  Declarations,1,0
128,clamp  To  Lower  Bound,List  Annotated  Type  Mirror  Annotated  Type  Variable  Annotated  Type  Factory  Default  Type  Argument  Inference,void,type  type,get  Qualifier  Hierarchy  get  Top  Annotations  get  get  Underlying  Type  get  Lower  Bound  get  Effective  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  is  Subtype  replace  Annotation,Default  Type  Argument  Inference,equalities  Solver  supertypes  Solver  subtypes  Solver  constraint  Map  Builder  show  Inference  Steps,Default  Type  Argument  Inference  infer  Type  Args  handle  Null  Type  Arguments  has  Null  Type  infer  create  Argument  A  F  Constraints  infer  From  Arguments  infer  From  Assignment  Equalities  create  Initial  Assignment  Constraints  create  Assignment  Constraints  infer  From  Assignment  combine  Supertype  And  Assignment  Results  handle  Uninferred  Type  Variables  reduce  Af  Constraints  af  To  Tu  Constraints  add  Constraints  Between  Targets  add  Or  Get  Declarations,Inference  Result,serial  Version  U  I  D,get  Remaining  Targets  is  Complete  resolve  Chained  Targets  to  Atm  Map  merge  Subordinate  merge  Target,0,0
129,clamp  To  Lower  Bound,List  Annotated  Type  Mirror  Annotated  Type  Variable  Annotated  Type  Factory  Default  Type  Argument  Inference,void,type  type,get  Qualifier  Hierarchy  get  Top  Annotations  get  get  Underlying  Type  get  Lower  Bound  get  Effective  Annotation  In  Hierarchy  get  Effective  Annotation  In  Hierarchy  is  Subtype  replace  Annotation,Inference  Result,serial  Version  U  I  D,get  Remaining  Targets  is  Complete  resolve  Chained  Targets  to  Atm  Map  merge  Subordinate  merge  Target,Default  Type  Argument  Inference,equalities  Solver  supertypes  Solver  subtypes  Solver  constraint  Map  Builder  show  Inference  Steps,Default  Type  Argument  Inference  infer  Type  Args  handle  Null  Type  Arguments  has  Null  Type  infer  create  Argument  A  F  Constraints  infer  From  Arguments  infer  From  Assignment  Equalities  create  Initial  Assignment  Constraints  create  Assignment  Constraints  infer  From  Assignment  combine  Supertype  And  Assignment  Results  handle  Uninferred  Type  Variables  reduce  Af  Constraints  af  To  Tu  Constraints  add  Constraints  Between  Targets  add  Or  Get  Declarations,1,1
130,combine  Supertype  And  Assignment  Results,Set  Type  Variable  Annotated  Type  Factory  Inference  Result  Inference  Result,Inference  Result,type  type,get  Type  Hierarchy  get  get  is  Erased  Subtype  get  Underlying  Type  get  Underlying  Type  get  Type  Utils  get  Context  as  Super  is  Subtype  put,Default  Type  Argument  Inference,equalities  Solver  supertypes  Solver  subtypes  Solver  constraint  Map  Builder  show  Inference  Steps,Default  Type  Argument  Inference  infer  Type  Args  handle  Null  Type  Arguments  has  Null  Type  infer  create  Argument  A  F  Constraints  infer  From  Arguments  infer  From  Assignment  Equalities  create  Initial  Assignment  Constraints  create  Assignment  Constraints  infer  From  Assignment  handle  Uninferred  Type  Variables  reduce  Af  Constraints  af  To  Tu  Constraints  add  Constraints  Between  Targets  add  Or  Get  Declarations,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
131,combine  Supertype  And  Assignment  Results,Set  Type  Variable  Annotated  Type  Factory  Inference  Result  Inference  Result,Inference  Result,type  type,get  Type  Hierarchy  get  get  is  Erased  Subtype  get  Underlying  Type  get  Underlying  Type  get  Type  Utils  get  Context  as  Super  is  Subtype  put,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Default  Type  Argument  Inference,equalities  Solver  supertypes  Solver  subtypes  Solver  constraint  Map  Builder  show  Inference  Steps,Default  Type  Argument  Inference  infer  Type  Args  handle  Null  Type  Arguments  has  Null  Type  infer  create  Argument  A  F  Constraints  infer  From  Arguments  infer  From  Assignment  Equalities  create  Initial  Assignment  Constraints  create  Assignment  Constraints  infer  From  Assignment  handle  Uninferred  Type  Variables  reduce  Af  Constraints  af  To  Tu  Constraints  add  Constraints  Between  Targets  add  Or  Get  Declarations,1,0
132,combine  Supertype  And  Assignment  Results,Set  Type  Variable  Annotated  Type  Factory  Inference  Result  Inference  Result,Inference  Result,type  type,get  Type  Hierarchy  get  get  is  Erased  Subtype  get  Underlying  Type  get  Underlying  Type  get  Type  Utils  get  Context  as  Super  is  Subtype  put,Default  Type  Argument  Inference,equalities  Solver  supertypes  Solver  subtypes  Solver  constraint  Map  Builder  show  Inference  Steps,Default  Type  Argument  Inference  infer  Type  Args  handle  Null  Type  Arguments  has  Null  Type  infer  create  Argument  A  F  Constraints  infer  From  Arguments  infer  From  Assignment  Equalities  create  Initial  Assignment  Constraints  create  Assignment  Constraints  infer  From  Assignment  handle  Uninferred  Type  Variables  reduce  Af  Constraints  af  To  Tu  Constraints  add  Constraints  Between  Targets  add  Or  Get  Declarations,Inference  Result,serial  Version  U  I  D,get  Remaining  Targets  is  Complete  resolve  Chained  Targets  to  Atm  Map  merge  Subordinate  merge  Target  clamp  To  Lower  Bound,0,0
133,combine  Supertype  And  Assignment  Results,Set  Type  Variable  Annotated  Type  Factory  Inference  Result  Inference  Result,Inference  Result,type  type,get  Type  Hierarchy  get  get  is  Erased  Subtype  get  Underlying  Type  get  Underlying  Type  get  Type  Utils  get  Context  as  Super  is  Subtype  put,Inference  Result,serial  Version  U  I  D,get  Remaining  Targets  is  Complete  resolve  Chained  Targets  to  Atm  Map  merge  Subordinate  merge  Target  clamp  To  Lower  Bound,Default  Type  Argument  Inference,equalities  Solver  supertypes  Solver  subtypes  Solver  constraint  Map  Builder  show  Inference  Steps,Default  Type  Argument  Inference  infer  Type  Args  handle  Null  Type  Arguments  has  Null  Type  infer  create  Argument  A  F  Constraints  infer  From  Arguments  infer  From  Assignment  Equalities  create  Initial  Assignment  Constraints  create  Assignment  Constraints  infer  From  Assignment  handle  Uninferred  Type  Variables  reduce  Af  Constraints  af  To  Tu  Constraints  add  Constraints  Between  Targets  add  Or  Get  Declarations,1,0
134,handle  Uninferred  Type  Variables,Annotated  Type  Factory  Annotated  Executable  Type  Set  Type  Variable  Map  Type  Variable  Annotated  Type  Mirror,void,,get  Type  Variables  get  Underlying  Type  contains  unannotated  Type  get  get  Uninferred  Wildcard  Type  put  get  Underlying  Type,Default  Type  Argument  Inference,equalities  Solver  supertypes  Solver  subtypes  Solver  constraint  Map  Builder  show  Inference  Steps,Default  Type  Argument  Inference  infer  Type  Args  handle  Null  Type  Arguments  has  Null  Type  infer  create  Argument  A  F  Constraints  infer  From  Arguments  infer  From  Assignment  Equalities  create  Initial  Assignment  Constraints  create  Assignment  Constraints  infer  From  Assignment  combine  Supertype  And  Assignment  Results  reduce  Af  Constraints  af  To  Tu  Constraints  add  Constraints  Between  Targets  add  Or  Get  Declarations,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
135,handle  Uninferred  Type  Variables,Annotated  Type  Factory  Annotated  Executable  Type  Set  Type  Variable  Map  Type  Variable  Annotated  Type  Mirror,void,,get  Type  Variables  get  Underlying  Type  contains  unannotated  Type  get  get  Uninferred  Wildcard  Type  put  get  Underlying  Type,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Default  Type  Argument  Inference,equalities  Solver  supertypes  Solver  subtypes  Solver  constraint  Map  Builder  show  Inference  Steps,Default  Type  Argument  Inference  infer  Type  Args  handle  Null  Type  Arguments  has  Null  Type  infer  create  Argument  A  F  Constraints  infer  From  Arguments  infer  From  Assignment  Equalities  create  Initial  Assignment  Constraints  create  Assignment  Constraints  infer  From  Assignment  combine  Supertype  And  Assignment  Results  reduce  Af  Constraints  af  To  Tu  Constraints  add  Constraints  Between  Targets  add  Or  Get  Declarations,1,0
136,reduce  Af  Constraints,Annotated  Type  Factory  Set  A  F  Constraint  Queue  A  F  Constraint  Set  Type  Variable,void,,add  add  add  is  Empty  clear  remove  contains  is  Irreducible  add  iterator  has  Next  reduce  next  add  All  add,Default  Type  Argument  Inference,equalities  Solver  supertypes  Solver  subtypes  Solver  constraint  Map  Builder  show  Inference  Steps,Default  Type  Argument  Inference  infer  Type  Args  handle  Null  Type  Arguments  has  Null  Type  infer  create  Argument  A  F  Constraints  infer  From  Arguments  infer  From  Assignment  Equalities  create  Initial  Assignment  Constraints  create  Assignment  Constraints  infer  From  Assignment  combine  Supertype  And  Assignment  Results  handle  Uninferred  Type  Variables  af  To  Tu  Constraints  add  Constraints  Between  Targets  add  Or  Get  Declarations,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
137,reduce  Af  Constraints,Annotated  Type  Factory  Set  A  F  Constraint  Queue  A  F  Constraint  Set  Type  Variable,void,,add  add  add  is  Empty  clear  remove  contains  is  Irreducible  add  iterator  has  Next  reduce  next  add  All  add,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Default  Type  Argument  Inference,equalities  Solver  supertypes  Solver  subtypes  Solver  constraint  Map  Builder  show  Inference  Steps,Default  Type  Argument  Inference  infer  Type  Args  handle  Null  Type  Arguments  has  Null  Type  infer  create  Argument  A  F  Constraints  infer  From  Arguments  infer  From  Assignment  Equalities  create  Initial  Assignment  Constraints  create  Assignment  Constraints  infer  From  Assignment  combine  Supertype  And  Assignment  Results  handle  Uninferred  Type  Variables  af  To  Tu  Constraints  add  Constraints  Between  Targets  add  Or  Get  Declarations,1,0
138,add  Constraints  Between  Targets,Set  T  U  Constraint  Set  Type  Variable  boolean  Annotated  Type  Factory,void,,get  Type  Utils  get  Processing  Env  size  get  size  get  is  Same  Type  get  Upper  Bound  add  Or  Get  Declarations  add  Or  Get  Declarations  add  add  is  Same  Type  get  Upper  Bound  add  Or  Get  Declarations  add  Or  Get  Declarations  add  add,Default  Type  Argument  Inference,equalities  Solver  supertypes  Solver  subtypes  Solver  constraint  Map  Builder  show  Inference  Steps,Default  Type  Argument  Inference  infer  Type  Args  handle  Null  Type  Arguments  has  Null  Type  infer  create  Argument  A  F  Constraints  infer  From  Arguments  infer  From  Assignment  Equalities  create  Initial  Assignment  Constraints  create  Assignment  Constraints  infer  From  Assignment  combine  Supertype  And  Assignment  Results  handle  Uninferred  Type  Variables  reduce  Af  Constraints  af  To  Tu  Constraints  add  Or  Get  Declarations,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
139,add  Constraints  Between  Targets,Set  T  U  Constraint  Set  Type  Variable  boolean  Annotated  Type  Factory,void,,get  Type  Utils  get  Processing  Env  size  get  size  get  is  Same  Type  get  Upper  Bound  add  Or  Get  Declarations  add  Or  Get  Declarations  add  add  is  Same  Type  get  Upper  Bound  add  Or  Get  Declarations  add  Or  Get  Declarations  add  add,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Default  Type  Argument  Inference,equalities  Solver  supertypes  Solver  subtypes  Solver  constraint  Map  Builder  show  Inference  Steps,Default  Type  Argument  Inference  infer  Type  Args  handle  Null  Type  Arguments  has  Null  Type  infer  create  Argument  A  F  Constraints  infer  From  Arguments  infer  From  Assignment  Equalities  create  Initial  Assignment  Constraints  create  Assignment  Constraints  infer  From  Assignment  combine  Supertype  And  Assignment  Results  handle  Uninferred  Type  Variables  reduce  Af  Constraints  af  To  Tu  Constraints  add  Or  Get  Declarations,1,0
140,add  Or  Get  Declarations,Type  Variable  Annotated  Type  Factory  Map  Type  Variable  Annotated  Type  Variable,Annotated  Type  Variable,,get  get  Annotated  Type  as  Element  put,Default  Type  Argument  Inference,equalities  Solver  supertypes  Solver  subtypes  Solver  constraint  Map  Builder  show  Inference  Steps,Default  Type  Argument  Inference  infer  Type  Args  handle  Null  Type  Arguments  has  Null  Type  infer  create  Argument  A  F  Constraints  infer  From  Arguments  infer  From  Assignment  Equalities  create  Initial  Assignment  Constraints  create  Assignment  Constraints  infer  From  Assignment  combine  Supertype  And  Assignment  Results  handle  Uninferred  Type  Variables  reduce  Af  Constraints  af  To  Tu  Constraints  add  Constraints  Between  Targets,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
141,add  Or  Get  Declarations,Type  Variable  Annotated  Type  Factory  Map  Type  Variable  Annotated  Type  Variable,Annotated  Type  Variable,,get  get  Annotated  Type  as  Element  put,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Default  Type  Argument  Inference,equalities  Solver  supertypes  Solver  subtypes  Solver  constraint  Map  Builder  show  Inference  Steps,Default  Type  Argument  Inference  infer  Type  Args  handle  Null  Type  Arguments  has  Null  Type  infer  create  Argument  A  F  Constraints  infer  From  Arguments  infer  From  Assignment  Equalities  create  Initial  Assignment  Constraints  create  Assignment  Constraints  infer  From  Assignment  combine  Supertype  And  Assignment  Results  handle  Uninferred  Type  Variables  reduce  Af  Constraints  af  To  Tu  Constraints  add  Constraints  Between  Targets,1,0
142,is  Super  Invariant,Field  Invariants  Annotated  Type  Factory,Diag  Message,fields,get  Qualifier  Hierarchy  contains  All  remove  All  join  get  Qualifiers  For  get  Qualifiers  For  find  Annotation  In  Same  Hierarchy  is  Subtype,Field  Invariants,fields  qualifiers,Field  Invariants  Field  Invariants  get  Fields  get  Qualifiers  For  is  Well  Formed,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,0,0
143,is  Super  Invariant,Field  Invariants  Annotated  Type  Factory,Diag  Message,fields,get  Qualifier  Hierarchy  contains  All  remove  All  join  get  Qualifiers  For  get  Qualifiers  For  find  Annotation  In  Same  Hierarchy  is  Subtype,Annotated  Type  Factory,trees  root  processing  Env  elements  types  visitor  State  qual  Hierarchy  type  Hierarchy  whole  Program  Inference  type  Formatter  annotation  Formatter  qualifier  Upper  Bounds  type  Var  Substitutor  type  Argument  Inference  supported  Quals  supported  Qual  Names  stub  Types  cache  Decl  Annos  inherited  Annotations  checker  aliases  Alias  canonical  copy  Elements  canonical  Name  ignorable  Elements  decl  Aliases  uid  Counter  uid  reflection  Resolver  loader  wpi  Output  Format  should  Cache  default  cache  size  class  And  Method  Tree  Cache  from  Expression  Tree  Cache  from  Member  Tree  Cache  from  Type  Tree  Cache  element  Cache  element  To  Tree  Cache  tree  Path  Cache  artificial  Tree  To  Enclosing  Element  Map  ignore  Uninferred  Type  Arguments  object  Get  Class  annotation  cache  size  annotation  Class  Names  Parameterized  Executable  Type  executable  Type  type  Args  is  List  For  Repeated  Annotation  Cache  plus  Constant  minus  Constant,is  Has  Format  Call  Alias  check  Rep  Annotated  Type  Factory  check  Supported  Quals  check  Invalid  Options  Infer  Signatures  post  Init  create  Qualifier  Upper  Bounds  get  Whole  Program  Inference  initialize  Reflection  Resolution  set  Root  to  String  create  Qualifier  Hierarchy  Factory  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  create  Qualifier  Hierarchy  get  Qualifier  Hierarchy  create  Type  Hierarchy  get  Type  Hierarchy  create  Type  Variable  Substitutor  get  Type  Var  Substitutor  create  Type  Argument  Inference  get  Type  Argument  Inference  create  Annotation  Class  Loader  create  Supported  Type  Qualifiers  get  Bundled  Type  Qualifiers  load  Type  Annotations  From  Qual  Dir  create  Annotated  Type  Formatter  get  Annotated  Type  Formatter  create  Annotation  Formatter  get  Annotation  Formatter  get  Supported  Type  Qualifiers  get  Supported  Type  Qualifier  Names  get  Cache  Size  get  Annotated  Type  get  Annotation  Mirror  get  Annotated  Type  pre  Process  Class  Tree  post  Process  Class  Tree  get  Annotated  Type  From  Type  Tree  get  Type  Declaration  Bounds  get  Default  Type  Declaration  Bounds  get  Type  Of  Extends  Implements  from  Element  from  Class  from  Member  merge  Stubs  Into  Type  merge  Stubs  Into  Type  from  Expression  from  Type  Tree  add  Computed  Type  Annotations  add  Computed  Type  Annotations  add  Default  Annotations  post  Direct  Super  Types  post  As  Member  Of  add  Annotation  From  Field  Invariant  get  Field  Invariants  get  Field  Invariant  Annotation  Tree  get  Field  Invariant  Declaration  Annotations  post  Type  Var  Substitution  type  Variables  From  Use  get  Annotated  Null  Type  get  Implicit  Receiver  Type  should  Take  From  Receiver  is  Most  Enclosing  This  Deref  is  Any  Enclosing  This  Deref  get  Self  Type  get  Enclosing  Type  is  Subtype  get  Receiver  Type  Parameterized  Executable  Type  method  From  Use  method  From  Use  method  From  Use  Pre  Substitution  adapt  Get  Class  Return  Type  To  Receiver  constructor  From  Use  constructor  From  Use  Pre  Substitution  get  Method  Return  Type  get  Method  Return  Type  is  Synthetic  Argument  from  New  Class  from  New  Class  Context  Helper  get  Boxed  Type  get  Unboxed  Type  get  String  Type  get  Narrowed  Primitive  get  Visitor  State  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  get  Annotated  Type  from  Element  from  Element  is  Supported  Qualifier  is  Supported  Qualifier  is  Supported  Qualifier  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  add  Aliased  Annotation  canonical  Annotation  add  Aliased  Decl  Annotation  add  Inherited  Annotation  to  Annotated  Type  type  declaration  From  Element  get  Current  Class  Tree  get  Current  Class  Type  get  Current  Method  Receiver  is  Within  Constructor  get  Most  Inner  Class  Or  Method  get  Path  get  Enclosing  Element  For  Artificial  Tree  set  Enclosing  Element  For  Artificial  Tree  valid  Annotated  Type  valid  Type  parse  Stub  Files  get  Decl  Annotation  get  Decl  Annotation  No  Aliases  is  From  Stub  File  is  From  Byte  Code  should  Warn  If  Stub  Redundant  With  Bytecode  get  Decl  Annotation  get  Decl  Annotations  inherit  Overridden  Decl  Annos  add  Or  Merge  get  Decl  Annotation  With  Meta  Annotation  is  List  For  Repeated  Annotation  is  List  For  Repeated  Annotation  Implementation  get  Annotation  With  Meta  Annotation  get  Uninferred  Wildcard  Type  widen  To  Upper  Bound  get  Function  Type  From  Tree  get  Function  Type  From  Tree  get  Fn  Interface  From  Tree  get  Functional  Interface  Type  is  Functional  Interface  make  Ground  Target  Type  is  Extends  Wildcard  get  Element  Utils  get  Tree  Utils  get  Processing  Env  get  Context  get  Expression  And  Offset  negate  Constant  get  Dummy  Assigned  To  are  Same  By  Class  contains  Same  By  Class  get  Annotation  By  Class,Field  Invariants,fields  qualifiers,Field  Invariants  Field  Invariants  get  Fields  get  Qualifiers  For  is  Well  Formed,1,0
144,report,Object  Source  Checker,void,,is  Success  should  Suppress  Warnings  next  iterator  get  Message  Keys  get  Diag  Messages  report,Source  Checker,line  separator  suppress  all  key  unneeded  suppression  key  msgs  file  messages  Properties  messager  trees  current  Root  previous  Error  Compilation  Unit  visitor  suppress  Warnings  skip  Uses  Pattern  only  Uses  Pattern  skip  Defs  Pattern  only  Defs  Pattern  supported  Lints  active  Lints  active  Options  option  separator  parent  Checker  upstream  Checker  Names  warned  About  Source  Level  errs  On  Last  Exit  details  separator  suppress  Warnings  Class  Name  elements  With  Suppressed  Warnings  git  Properties  Printed,init  get  Processing  Environment  set  Processing  Environment  set  Parent  Checker  get  Parent  Checker  set  Root  get  Upstream  Checker  Names  get  Context  get  Checker  get  Option  Configuration  get  Element  Utils  get  Type  Utils  get  Tree  Utils  get  Visitor  create  Source  Visitor  get  Annotation  Provider  get  Messages  Properties  get  Skip  Pattern  get  Only  Pattern  get  Pattern  get  Skip  Uses  Pattern  get  Only  Uses  Pattern  get  Skip  Defs  Pattern  get  Only  Defs  Pattern  type  Processing  Start  run  init  Checker  type  Process  report  Error  report  Warning  report  message  print  Message  print  Or  Store  Message  full  Message  Of  process  Arg  detailed  Msg  Text  Prefix  suppression  Key  source  To  Tree  detailed  Msg  Text  Position  String  create  Active  Lints  get  Lint  Option  get  Lint  Option  set  Lint  Option  parent  Of  Option  get  Supported  Lint  Options  create  Supported  Lint  Options  set  Supported  Lint  Options  create  Active  Options  add  Options  has  Option  get  Option  get  Boolean  Option  get  Boolean  Option  get  Options  get  Option  get  Supported  Options  expand  C  F  Options  get  Supported  Annotation  Types  get  Suppress  Warnings  Keys  create  Suppress  Warnings  warn  Unneeded  Suppressions  warn  Unneeded  Suppressions  report  Unneeded  Suppression  find  Suppress  Warnings  Tree  check  Suppress  Warnings  check  Suppress  Warnings  should  Suppress  Warnings  should  Suppress  Warnings  use  Conservative  Default  should  Suppress  Warnings  is  Annotated  For  This  Checker  Or  Upstream  Checker  get  Standard  Suppress  Warnings  Keys  get  Default  Warning  Suppression  Key  should  Skip  Uses  should  Skip  Uses  should  Skip  Defs  should  Skip  Defs  log  User  Error  log  Bug  In  C  F  array  To  Lower  Case  wrap  Throwable  As  Bug  In  C  F  should  Add  Shutdown  Hook  shutdown  Hook  print  Stats  get  Properties  get  Supported  Source  Version  print  Git  Properties,Result,Type  type  messages  success,merge  failure  warning  Result  merge  is  Success  is  Failure  is  Warning  get  Message  Keys  get  Diag  Messages  to  String,0,0
145,report,Object  Source  Checker,void,,is  Success  should  Suppress  Warnings  next  iterator  get  Message  Keys  get  Diag  Messages  report,Result,Type  type  messages  success,merge  failure  warning  Result  merge  is  Success  is  Failure  is  Warning  get  Message  Keys  get  Diag  Messages  to  String,Source  Checker,line  separator  suppress  all  key  unneeded  suppression  key  msgs  file  messages  Properties  messager  trees  current  Root  previous  Error  Compilation  Unit  visitor  suppress  Warnings  skip  Uses  Pattern  only  Uses  Pattern  skip  Defs  Pattern  only  Defs  Pattern  supported  Lints  active  Lints  active  Options  option  separator  parent  Checker  upstream  Checker  Names  warned  About  Source  Level  errs  On  Last  Exit  details  separator  suppress  Warnings  Class  Name  elements  With  Suppressed  Warnings  git  Properties  Printed,init  get  Processing  Environment  set  Processing  Environment  set  Parent  Checker  get  Parent  Checker  set  Root  get  Upstream  Checker  Names  get  Context  get  Checker  get  Option  Configuration  get  Element  Utils  get  Type  Utils  get  Tree  Utils  get  Visitor  create  Source  Visitor  get  Annotation  Provider  get  Messages  Properties  get  Skip  Pattern  get  Only  Pattern  get  Pattern  get  Skip  Uses  Pattern  get  Only  Uses  Pattern  get  Skip  Defs  Pattern  get  Only  Defs  Pattern  type  Processing  Start  run  init  Checker  type  Process  report  Error  report  Warning  report  message  print  Message  print  Or  Store  Message  full  Message  Of  process  Arg  detailed  Msg  Text  Prefix  suppression  Key  source  To  Tree  detailed  Msg  Text  Position  String  create  Active  Lints  get  Lint  Option  get  Lint  Option  set  Lint  Option  parent  Of  Option  get  Supported  Lint  Options  create  Supported  Lint  Options  set  Supported  Lint  Options  create  Active  Options  add  Options  has  Option  get  Option  get  Boolean  Option  get  Boolean  Option  get  Options  get  Option  get  Supported  Options  expand  C  F  Options  get  Supported  Annotation  Types  get  Suppress  Warnings  Keys  create  Suppress  Warnings  warn  Unneeded  Suppressions  warn  Unneeded  Suppressions  report  Unneeded  Suppression  find  Suppress  Warnings  Tree  check  Suppress  Warnings  check  Suppress  Warnings  should  Suppress  Warnings  should  Suppress  Warnings  use  Conservative  Default  should  Suppress  Warnings  is  Annotated  For  This  Checker  Or  Upstream  Checker  get  Standard  Suppress  Warnings  Keys  get  Default  Warning  Suppression  Key  should  Skip  Uses  should  Skip  Uses  should  Skip  Defs  should  Skip  Defs  log  User  Error  log  Bug  In  C  F  array  To  Lower  Case  wrap  Throwable  As  Bug  In  C  F  should  Add  Shutdown  Hook  shutdown  Hook  print  Stats  get  Properties  get  Supported  Source  Version  print  Git  Properties,1,1
