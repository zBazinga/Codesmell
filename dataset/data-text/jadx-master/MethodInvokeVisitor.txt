Class:MethodInvokeVisitor
Field:root
Method-name:init
Method-returnType:void
Method-parameters:[RootNode root]
FieldAccess:root
Method-name:visit
Method-returnType:void
Method-parameters:[MethodNode mth]
MethodInvocation:isNoCode
MethodInvocation:getBasicBlocks
MethodInvocation:contains
MethodInvocation:getInstructions
MethodInvocation:contains
MethodInvocation:processInsn
Method-name:processInsn
Method-returnType:void
Method-parameters:[MethodNode mth, InsnNode insn]
MethodInvocation:processInvoke
MethodInvocation:getArguments
MethodInvocation:getWrapInsn
MethodInvocation:processInsn
Method-name:processInvoke
Method-returnType:void
Method-parameters:[MethodNode parentMth, BaseInvokeNode invokeInsn]
MethodInvocation:getCallMth
MethodInvocation:getArgsCount
MethodInvocation:getMethodDetails
MethodInvocation:getMethodUtils
MethodInvocation:addComment
MethodInvocation:processUnknown
MethodInvocation:isVarArg
MethodInvocation:last
MethodInvocation:getArgTypes
MethodInvocation:isArray
MethodInvocation:add
MethodInvocation:processOverloaded
Method-name:processOverloaded
Method-returnType:void
Method-parameters:[MethodNode parentMth, BaseInvokeNode invokeInsn, IMethodDetails mthDetails]
MethodInvocation:getCallMth
MethodInvocation:getCallClassFromInvoke
MethodInvocation:collectOverloadedMethods
MethodInvocation:getMethodUtils
MethodInvocation:isEmpty
MethodInvocation:getTypeVarsMapping
MethodInvocation:resolveTypeVars
MethodInvocation:size
MethodInvocation:add
MethodInvocation:resolveTypeVars
MethodInvocation:add
MethodInvocation:getFirstArgOffset
MethodInvocation:collectCompilerVarTypes
MethodInvocation:searchCastTypes
MethodInvocation:applyArgsCast
Method-name:processUnknown
Method-returnType:void
Method-parameters:[BaseInvokeNode invokeInsn]
MethodInvocation:getFirstArgOffset
MethodInvocation:collectCompilerVarTypes
MethodInvocation:replaceUnknownTypes
MethodInvocation:getArgumentsTypes
MethodInvocation:getCallMth
MethodInvocation:applyArgsCast
Method-name:getCallClassFromInvoke
Method-returnType:ArgType
Method-parameters:[MethodNode parentMth, BaseInvokeNode invokeInsn, MethodInfo callMth]
MethodInvocation:isSuper
MethodInvocation:getSuperClass
MethodInvocation:getParentClass
MethodInvocation:getInstanceArg
MethodInvocation:getType
MethodInvocation:getType
MethodInvocation:getDeclClass
Method-name:getTypeVarsMapping
Method-returnType:Map<ArgType,ArgType>
Method-parameters:[BaseInvokeNode invokeInsn]
MethodInvocation:getType
MethodInvocation:getDeclClass
MethodInvocation:getCallMth
MethodInvocation:getClsCallType
MethodInvocation:getTypeVariablesMapping
MethodInvocation:getTypeUtils
Method-name:getClsCallType
Method-returnType:ArgType
Method-parameters:[BaseInvokeNode invokeInsn, ArgType declClsType]
MethodInvocation:getInstanceArg
MethodInvocation:getType
MethodInvocation:getType
MethodInvocation:getResult
MethodInvocation:getType
MethodInvocation:getResult
Method-name:applyArgsCast
Method-returnType:void
Method-parameters:[BaseInvokeNode invokeInsn, int argsOffset, List<ArgType> compilerVarTypes, List<ArgType> castTypes]
MethodInvocation:getArgsCount
MethodInvocation:getArg
MethodInvocation:get
MethodInvocation:get
MethodInvocation:equals
MethodInvocation:isLiteral
MethodInvocation:isPrimitive
MethodInvocation:isPrimitive
MethodInvocation:setType
MethodInvocation:add
MethodInvocation:addArg
MethodInvocation:add
MethodInvocation:wrapArg
MethodInvocation:setType
MethodInvocation:setArg
MethodInvocation:isInsnWrap
MethodInvocation:getWrapInsn
MethodInvocation:getType
MethodInvocation:add
Method-name:resolveTypeVars
Method-returnType:IMethodDetails
Method-parameters:[IMethodDetails mthDetails, Map<ArgType,ArgType> typeVarsMapping]
MethodInvocation:getArgTypes
MethodInvocation:size
MethodInvocation:get
MethodInvocation:containsTypeVariable
MethodInvocation:replaceTypeVariablesUsingMap
MethodInvocation:getTypeUtils
MethodInvocation:equals
MethodInvocation:get
MethodInvocation:getArgumentsTypes
MethodInvocation:getMethodInfo
MethodInvocation:add
MethodInvocation:add
MethodInvocation:getReturnType
MethodInvocation:containsTypeVariable
MethodInvocation:replaceTypeVariablesUsingMap
MethodInvocation:getTypeUtils
MethodInvocation:containsTypeVariable
MethodInvocation:getReturnType
MethodInvocation:getMethodInfo
MethodInvocation:setArgTypes
MethodInvocation:setRetType
Method-name:searchCastTypes
Method-returnType:List<ArgType>
Method-parameters:[MethodNode parentMth, IMethodDetails mthDetails, List<IMethodDetails> overloadedMethods, List<ArgType> compilerVarTypes]
MethodInvocation:isOverloadResolved
MethodInvocation:size
MethodInvocation:replaceUnknownTypes
MethodInvocation:getArgTypes
MethodInvocation:isOverloadResolved
MethodInvocation:get
MethodInvocation:get
MethodInvocation:getArgTypes
MethodInvocation:isGeneric
MethodInvocation:isGeneric
MethodInvocation:set
MethodInvocation:isOverloadResolved
MethodInvocation:getArgTypes
MethodInvocation:addComment
MethodInvocation:listToString
MethodInvocation:getArgTypes
Method-name:replaceUnknownTypes
Method-returnType:boolean
Method-parameters:[List<ArgType> castTypes, List<ArgType> mthArgTypes]
MethodInvocation:size
MethodInvocation:get
MethodInvocation:isTypeKnown
MethodInvocation:get
MethodInvocation:set
Method-name:isOverloadResolved
Method-returnType:boolean
Method-parameters:[IMethodDetails expectedMthDetails, List<IMethodDetails> overloadedMethods, List<ArgType> castTypes]
MethodInvocation:isEmpty
MethodInvocation:filterApplicableMethods
MethodInvocation:size
MethodInvocation:equals
MethodInvocation:get
MethodInvocation:filterApplicableMethods
MethodInvocation:size
MethodInvocation:equals
MethodInvocation:get
Method-name:isStrictTypes
Method-returnType:boolean
Method-parameters:[TypeCompareEnum result]
MethodInvocation:isEqual
Method-name:isTypeApplicable
Method-returnType:boolean
Method-parameters:[TypeCompareEnum result]
MethodInvocation:isNarrowOrEqual
Method-name:filterApplicableMethods
Method-returnType:List<IMethodDetails>
Method-parameters:[List<IMethodDetails> methods, List<ArgType> types, Function<TypeCompareEnum,Boolean> acceptFunction]
MethodInvocation:size
MethodInvocation:isMethodAcceptable
MethodInvocation:add
Method-name:isMethodAcceptable
Method-returnType:boolean
Method-parameters:[IMethodDetails methodDetails, List<ArgType> types, Function<TypeCompareEnum,Boolean> acceptFunction]
MethodInvocation:getArgTypes
MethodInvocation:size
MethodInvocation:size
MethodInvocation:getTypeCompare
MethodInvocation:getTypeUpdate
MethodInvocation:get
MethodInvocation:get
MethodInvocation:compareTypes
MethodInvocation:apply
Method-name:collectCompilerVarTypes
Method-returnType:List<ArgType>
Method-parameters:[BaseInvokeNode insn, int argOffset]
MethodInvocation:getArgsCount
MethodInvocation:getArg
MethodInvocation:add
MethodInvocation:getCompilerVarType
Method-name:getCompilerVarType
Method-returnType:ArgType
Method-parameters:[InsnArg arg]
MethodInvocation:getType
MethodInvocation:getLiteral
MethodInvocation:isObject
MethodInvocation:isArray
MethodInvocation:isPrimitive
MethodInvocation:contains
MethodInvocation:getType
MethodInvocation:getType
MethodInvocation:getWrapInsn
MethodInvocation:getResult
MethodInvocation:getType
MethodInvocation:getResult
MethodInvocation:getType
