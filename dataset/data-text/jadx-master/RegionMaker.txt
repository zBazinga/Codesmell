Class:RegionMaker
Field:LOG
MethodInvocation:getLogger
Field:mth
Field:regionsLimit
Field:regionsCount
Field:processedBlocks
Method-name:RegionMaker
Method-returnType:null
Method-parameters:[MethodNode mth]
FieldAccess:mth
MethodInvocation:size
MethodInvocation:getBasicBlocks
FieldAccess:processedBlocks
FieldAccess:regionsLimit
Method-name:makeRegion
Method-returnType:Region
Method-parameters:[BlockNode startBlock, RegionStack stack]
MethodInvocation:peekRegion
MethodInvocation:getId
MethodInvocation:get
MethodInvocation:addWarn
MethodInvocation:getAttributesString
MethodInvocation:set
MethodInvocation:traverse
Method-name:traverse
Method-returnType:BlockNode
Method-parameters:[IRegion r, BlockNode block, RegionStack stack]
MethodInvocation:getAll
MethodInvocation:size
MethodInvocation:contains
MethodInvocation:processLoop
MethodInvocation:get
MethodInvocation:getStart
MethodInvocation:processLoop
MethodInvocation:getLastInsn
MethodInvocation:getType
MethodInvocation:processIf
MethodInvocation:processSwitch
MethodInvocation:processMonitorEnter
MethodInvocation:add
MethodInvocation:getSubBlocks
MethodInvocation:getNextBlock
MethodInvocation:containsExit
MethodInvocation:containsExit
Method-name:processLoop
Method-returnType:BlockNode
Method-parameters:[IRegion curRegion, LoopInfo loop, RegionStack stack]
MethodInvocation:getStart
MethodInvocation:getExitNodes
MethodInvocation:size
MethodInvocation:getNextBlock
MethodInvocation:remove
MethodInvocation:add
MethodInvocation:remove
MethodInvocation:add
MethodInvocation:remove
MethodInvocation:getEnd
MethodInvocation:add
MethodInvocation:getEnd
MethodInvocation:addAll
MethodInvocation:makeLoopRegion
MethodInvocation:makeEndlessLoop
MethodInvocation:insertContinue
MethodInvocation:add
MethodInvocation:getSubBlocks
MethodInvocation:peekRegion
MethodInvocation:push
MethodInvocation:makeIfInfo
MethodInvocation:getHeader
MethodInvocation:searchNestedIf
MethodInvocation:confirmMerge
MethodInvocation:contains
MethodInvocation:getLoopBlocks
MethodInvocation:getThenBlock
MethodInvocation:invert
MethodInvocation:setCondition
MethodInvocation:getCondition
MethodInvocation:removeAll
MethodInvocation:getMergedBlocks
MethodInvocation:isEmpty
MethodInvocation:getElseBlock
MethodInvocation:getExitEdges
MethodInvocation:contains
MethodInvocation:getSource
MethodInvocation:insertLoopBreak
MethodInvocation:isConditionAtEnd
MethodInvocation:getThenBlock
MethodInvocation:getElseBlock
MethodInvocation:remove
MethodInvocation:add
MethodInvocation:getEnd
MethodInvocation:addExit
MethodInvocation:getEnd
MethodInvocation:clear
MethodInvocation:getId
MethodInvocation:makeRegion
MethodInvocation:setBody
MethodInvocation:addAttr
MethodInvocation:remove
MethodInvocation:getEnd
MethodInvocation:getElseBlock
MethodInvocation:contains
MethodInvocation:contains
MethodInvocation:getAll
MethodInvocation:isRegionContainsBlock
MethodInvocation:addExit
MethodInvocation:getThenBlock
MethodInvocation:makeRegion
MethodInvocation:getIfBlock
MethodInvocation:getAllPathsBlocks
MethodInvocation:remove
MethodInvocation:isEmpty
MethodInvocation:getInstructions
MethodInvocation:contains
MethodInvocation:isRegionContainsBlock
MethodInvocation:add
MethodInvocation:setBody
MethodInvocation:pop
MethodInvocation:insertContinue
Method-name:makeLoopRegion
Method-returnType:LoopRegion
Method-parameters:[IRegion curRegion, LoopInfo loop, List<BlockNode> exitBlocks]
MethodInvocation:contains
MethodInvocation:getLastInsn
MethodInvocation:getType
MethodInvocation:getAll
MethodInvocation:isEmpty
MethodInvocation:get
MethodInvocation:getEnd
MethodInvocation:getStart
MethodInvocation:getEnd
MethodInvocation:isEmptySimplePath
MethodInvocation:getStart
MethodInvocation:contains
MethodInvocation:getPredecessors
MethodInvocation:getStart
MethodInvocation:setPreCondition
MethodInvocation:getStart
MethodInvocation:checkPreCondition
MethodInvocation:getAllLoopsForBlock
MethodInvocation:size
MethodInvocation:getCleanSuccessors
MethodInvocation:getAllLoopsForBlock
MethodInvocation:remove
MethodInvocation:isEmpty
MethodInvocation:checkLoopExits
Method-name:checkLoopExits
Method-returnType:boolean
Method-parameters:[LoopInfo loop, BlockNode mainExitBlock]
MethodInvocation:getExitEdges
MethodInvocation:size
MethodInvocation:findFirst
MethodInvocation:filter
MethodInvocation:stream
MethodInvocation:getSource
MethodInvocation:isPresent
MethodInvocation:get
MethodInvocation:skipSyntheticSuccessor
MethodInvocation:getTarget
MethodInvocation:skipSyntheticSuccessor
MethodInvocation:getTarget
MethodInvocation:isEqualPaths
MethodInvocation:getPathCross
Method-name:makeEndlessLoop
Method-returnType:BlockNode
Method-parameters:[IRegion curRegion, RegionStack stack, LoopInfo loop, BlockNode loopStart]
MethodInvocation:add
MethodInvocation:getSubBlocks
MethodInvocation:remove
MethodInvocation:clear
MethodInvocation:getId
MethodInvocation:push
MethodInvocation:getExitEdges
MethodInvocation:size
MethodInvocation:get
MethodInvocation:getTarget
MethodInvocation:insertLoopBreak
MethodInvocation:getNextBlock
MethodInvocation:addExit
MethodInvocation:getTarget
MethodInvocation:bitSetToBlocks
MethodInvocation:getDomFrontier
MethodInvocation:isPathExists
MethodInvocation:addExit
MethodInvocation:insertLoopBreak
MethodInvocation:insertLoopBreak
MethodInvocation:makeRegion
MethodInvocation:getEnd
MethodInvocation:isRegionContainsBlock
MethodInvocation:contains
MethodInvocation:inExceptionHandlerBlocks
MethodInvocation:add
MethodInvocation:getSubBlocks
MethodInvocation:setBody
MethodInvocation:getNextBlock
MethodInvocation:isRegionContainsBlock
MethodInvocation:pop
MethodInvocation:addAttr
Method-name:inExceptionHandlerBlocks
Method-returnType:boolean
Method-parameters:[BlockNode loopEnd]
MethodInvocation:getExceptionHandlersCount
MethodInvocation:getExceptionHandlers
MethodInvocation:contains
MethodInvocation:getBlocks
Method-name:canInsertBreak
Method-returnType:boolean
Method-parameters:[BlockNode exit]
MethodInvocation:contains
MethodInvocation:checkLastInsnType
MethodInvocation:buildSimplePath
MethodInvocation:isEmpty
MethodInvocation:get
MethodInvocation:size
MethodInvocation:contains
MethodInvocation:isEmpty
MethodInvocation:getSuccessors
MethodInvocation:getAllPathsBlocks
MethodInvocation:getEnterBlock
MethodInvocation:checkLastInsnType
Method-name:insertLoopBreak
Method-returnType:boolean
Method-parameters:[RegionStack stack, LoopInfo loop, BlockNode loopExit, Edge exitEdge]
MethodInvocation:getTarget
MethodInvocation:getSource
MethodInvocation:contains
MethodInvocation:size
MethodInvocation:getSuccessors
MethodInvocation:selectOther
MethodInvocation:getSuccessors
MethodInvocation:skipSyntheticSuccessor
MethodInvocation:contains
MethodInvocation:isPathExists
MethodInvocation:canInsertBreak
MethodInvocation:getCleanSuccessors
MethodInvocation:size
MethodInvocation:get
MethodInvocation:addAttr
MethodInvocation:addEdgeInsn
MethodInvocation:get
MethodInvocation:getSuccessors
MethodInvocation:addExit
MethodInvocation:addBreakLabel
Method-name:addBreakLabel
Method-returnType:void
Method-parameters:[Edge exitEdge, BlockNode exit, InsnNode breakInsn]
MethodInvocation:getNextBlock
MethodInvocation:getTarget
MethodInvocation:getAllLoopsForBlock
MethodInvocation:isEmpty
MethodInvocation:getAllLoopsForBlock
MethodInvocation:getSource
MethodInvocation:size
MethodInvocation:getParentLoop
MethodInvocation:getEnd
MethodInvocation:contains
MethodInvocation:getExitNodes
MethodInvocation:addAttr
MethodInvocation:addAttr
MethodInvocation:getStart
Method-name:insertContinue
Method-returnType:void
Method-parameters:[LoopInfo loop]
MethodInvocation:getEnd
MethodInvocation:getPredecessors
MethodInvocation:size
MethodInvocation:getExitNodes
MethodInvocation:canInsertContinue
MethodInvocation:add
MethodInvocation:getInstructions
Method-name:canInsertContinue
Method-returnType:boolean
Method-parameters:[BlockNode pred, List<BlockNode> predecessors, BlockNode loopEnd, Set<BlockNode> loopExitNodes]
MethodInvocation:contains
MethodInvocation:checkLastInsnType
MethodInvocation:getPredecessors
MethodInvocation:isEmpty
MethodInvocation:get
MethodInvocation:contains
MethodInvocation:isDominator
MethodInvocation:contains
MethodInvocation:isDominatedOnBlocks
MethodInvocation:isPathExists
Method-name:isDominatedOnBlocks
Method-returnType:boolean
Method-parameters:[BlockNode dom, List<BlockNode> blocks]
MethodInvocation:isDominator
Method-name:processMonitorEnter
Method-returnType:BlockNode
Method-parameters:[IRegion curRegion, BlockNode block, InsnNode insn, RegionStack stack]
MethodInvocation:add
MethodInvocation:getSubBlocks
MethodInvocation:add
MethodInvocation:getSubBlocks
MethodInvocation:traverseMonitorExits
MethodInvocation:getArg
MethodInvocation:getExitInsns
MethodInvocation:getBlockByInsn
MethodInvocation:add
MethodInvocation:removeArg
MethodInvocation:add
MethodInvocation:getNextBlock
MethodInvocation:addWarn
MethodInvocation:size
MethodInvocation:getNextBlock
MethodInvocation:next
MethodInvocation:iterator
MethodInvocation:size
MethodInvocation:clear
MethodInvocation:traverseMonitorExitsCross
MethodInvocation:push
MethodInvocation:addExit
MethodInvocation:buildSimplePath
MethodInvocation:isEmpty
MethodInvocation:isEmpty
MethodInvocation:getSuccessors
MethodInvocation:get
MethodInvocation:size
MethodInvocation:addExit
MethodInvocation:add
MethodInvocation:getSubBlocks
MethodInvocation:makeRegion
MethodInvocation:pop
Method-name:traverseMonitorExits
Method-returnType:void
Method-parameters:[SynchronizedRegion region, InsnArg arg, BlockNode block, Set<BlockNode> exits, Set<BlockNode> visited]
MethodInvocation:add
MethodInvocation:getInstructions
MethodInvocation:getType
MethodInvocation:getArgsCount
MethodInvocation:equals
MethodInvocation:getArg
MethodInvocation:add
MethodInvocation:add
MethodInvocation:getExitInsns
MethodInvocation:getSuccessors
MethodInvocation:contains
MethodInvocation:traverseMonitorExits
Method-name:traverseMonitorExitsCross
Method-returnType:BlockNode
Method-parameters:[BlockNode block, Set<BlockNode> exits, Set<BlockNode> visited]
MethodInvocation:add
MethodInvocation:getCleanSuccessors
MethodInvocation:isPathExists
MethodInvocation:contains
MethodInvocation:traverseMonitorExitsCross
Method-name:processIf
Method-returnType:BlockNode
Method-parameters:[IRegion currentRegion, BlockNode block, IfNode ifnode, RegionStack stack]
MethodInvocation:contains
MethodInvocation:getThenBlock
MethodInvocation:makeIfInfo
MethodInvocation:mergeNestedIfNodes
MethodInvocation:invert
MethodInvocation:restructureIf
MethodInvocation:size
MethodInvocation:getMergedBlocks
MethodInvocation:makeIfInfo
MethodInvocation:restructureIf
MethodInvocation:confirmMerge
MethodInvocation:setCondition
MethodInvocation:getCondition
MethodInvocation:setConditionBlocks
MethodInvocation:getMergedBlocks
MethodInvocation:add
MethodInvocation:getSubBlocks
MethodInvocation:getOutBlock
MethodInvocation:push
MethodInvocation:addExit
MethodInvocation:setThenRegion
MethodInvocation:makeRegion
MethodInvocation:getThenBlock
MethodInvocation:getElseBlock
MethodInvocation:containsExit
MethodInvocation:setElseRegion
MethodInvocation:setElseRegion
MethodInvocation:makeRegion
MethodInvocation:getElseRegion
MethodInvocation:getAll
MethodInvocation:isEmpty
MethodInvocation:equals
MethodInvocation:getEnd
MethodInvocation:addEdgeInsnOther
MethodInvocation:setElseRegion
MethodInvocation:pop
Method-name:processSwitch
Method-returnType:BlockNode
Method-parameters:[IRegion currentRegion, BlockNode block, SwitchNode insn, RegionStack stack]
FieldAccess:length
MethodInvocation:getTargets
MethodInvocation:getKeys
MethodInvocation:getTargetBlocks
MethodInvocation:computeIfAbsent
MethodInvocation:add
MethodInvocation:getDefTargetBlock
MethodInvocation:computeIfAbsent
MethodInvocation:add
MethodInvocation:getLoopForBlock
MethodInvocation:calcPostDomOut
MethodInvocation:getExitBlocks
MethodInvocation:getEnd
MethodInvocation:addExit
MethodInvocation:getStart
MethodInvocation:containsExit
MethodInvocation:contains
MethodInvocation:getPredecessors
MethodInvocation:calcPostDomOut
MethodInvocation:getPredecessors
MethodInvocation:insertContinueInSwitch
MethodInvocation:calcPostDomOut
MethodInvocation:singletonList
MethodInvocation:getStart
MethodInvocation:get
MethodInvocation:getId
MethodInvocation:add
MethodInvocation:getSubBlocks
MethodInvocation:push
MethodInvocation:addExit
MethodInvocation:blocksToBitSet
MethodInvocation:keySet
MethodInvocation:clear
MethodInvocation:getId
MethodInvocation:getCleanSuccessors
MethodInvocation:searchFallThroughCase
MethodInvocation:put
MethodInvocation:isEmpty
MethodInvocation:isBadCasesOrder
MethodInvocation:reOrderSwitchCases
MethodInvocation:isBadCasesOrder
MethodInvocation:addComment
MethodInvocation:clear
MethodInvocation:entrySet
MethodInvocation:getValue
MethodInvocation:getKey
MethodInvocation:containsExit
MethodInvocation:addCase
MethodInvocation:peekRegion
MethodInvocation:get
MethodInvocation:addExit
MethodInvocation:makeRegion
MethodInvocation:removeExit
MethodInvocation:add
MethodInvocation:add
MethodInvocation:addCase
MethodInvocation:removeEmptyCases
MethodInvocation:pop
Method-name:searchFallThroughCase
Method-returnType:BlockNode
Method-parameters:[BlockNode successor, BlockNode out, BitSet caseBlocks]
MethodInvocation:getDomFrontier
MethodInvocation:intersects
MethodInvocation:getOneIntersectionBlock
MethodInvocation:getAllPathsBlocks
MethodInvocation:calcPartialPostDominance
MethodInvocation:get
MethodInvocation:intersects
MethodInvocation:getOneIntersectionBlock
Method-name:getOneIntersectionBlock
Method-returnType:BlockNode
Method-parameters:[BlockNode out, BitSet caseBlocks, BitSet fallThroughSet]
MethodInvocation:copyBlocksBitSet
MethodInvocation:clear
MethodInvocation:getId
MethodInvocation:and
MethodInvocation:bitSetToOneBlock
Method-name:calcPostDomOut
Method-returnType:BlockNode
Method-parameters:[MethodNode mth, BlockNode block, List<BlockNode> exits]
MethodInvocation:size
MethodInvocation:equals
MethodInvocation:getExitBlocks
MethodInvocation:calcImmediatePostDominator
MethodInvocation:copyBlocksBitSet
MethodInvocation:getDomFrontier
MethodInvocation:getCleanSuccessors
MethodInvocation:or
MethodInvocation:getDomFrontier
MethodInvocation:clear
MethodInvocation:getId
MethodInvocation:cardinality
MethodInvocation:newBlocksBitSet
MethodInvocation:isAnyPathExists
MethodInvocation:getAllPathsBlocks
MethodInvocation:calcPartialImmediatePostDominator
MethodInvocation:set
MethodInvocation:getId
MethodInvocation:and
MethodInvocation:bitSetToOneBlock
Method-name:removeEmptyCases
Method-returnType:void
Method-parameters:[SwitchNode insn, SwitchRegion sw, BlockNode defCase]
MethodInvocation:anyMatch
MethodInvocation:stream
MethodInvocation:getCases
MethodInvocation:contains
MethodInvocation:getKeys
MethodInvocation:isEmpty
MethodInvocation:getContainer
MethodInvocation:removeIf
MethodInvocation:getCases
MethodInvocation:isEmpty
MethodInvocation:getContainer
MethodInvocation:getKeys
MethodInvocation:contains
MethodInvocation:isPacked
Method-name:isBadCasesOrder
Method-returnType:boolean
Method-parameters:[Map<BlockNode,List<Object>> blocksMap, Map<BlockNode,BlockNode> fallThroughCases]
MethodInvocation:keySet
MethodInvocation:equals
MethodInvocation:get
Method-name:reOrderSwitchCases
Method-returnType:Map<BlockNode,List<Object>>
Method-parameters:[Map<BlockNode,List<Object>> blocksMap, Map<BlockNode,BlockNode> fallThroughCases]
MethodInvocation:size
MethodInvocation:addAll
MethodInvocation:keySet
MethodInvocation:sort
MethodInvocation:get
MethodInvocation:equals
MethodInvocation:equals
MethodInvocation:get
MethodInvocation:size
MethodInvocation:put
MethodInvocation:get
Method-name:insertContinueInSwitch
Method-returnType:void
Method-parameters:[BlockNode block, BlockNode out, BlockNode end]
MethodInvocation:getId
MethodInvocation:getCleanSuccessors
MethodInvocation:get
MethodInvocation:getDomFrontier
MethodInvocation:collectBlocksDominatedBy
MethodInvocation:getPredecessors
MethodInvocation:contains
MethodInvocation:isSynthetic
MethodInvocation:add
MethodInvocation:getInstructions
Method-name:processTryCatchBlocks
Method-returnType:IRegion
Method-parameters:[MethodNode mth]
MethodInvocation:getExceptionHandlers
MethodInvocation:add
MethodInvocation:getTryBlock
MethodInvocation:getHandlersCount
MethodInvocation:getHandlers
MethodInvocation:getHandlerBlock
MethodInvocation:add
MethodInvocation:addAll
MethodInvocation:getPredecessors
MethodInvocation:debug
MethodInvocation:formatMsg
MethodInvocation:contains
MethodInvocation:getSuccessors
MethodInvocation:isEmpty
MethodInvocation:debug
MethodInvocation:formatMsg
MethodInvocation:get
MethodInvocation:getPathCross
MethodInvocation:add
MethodInvocation:getHandlers
MethodInvocation:processExcHandler
MethodInvocation:processHandlersOutBlocks
Method-name:processHandlersOutBlocks
Method-returnType:IRegion
Method-parameters:[MethodNode mth, Set<TryCatchBlock> tcs]
MethodInvocation:getAllRegionBlocks
MethodInvocation:getRegion
MethodInvocation:getHandlers
MethodInvocation:getHandlerRegion
MethodInvocation:getLastBlock
MethodInvocation:addAll
MethodInvocation:getSuccessors
MethodInvocation:getAllRegionBlocks
MethodInvocation:removeAll
MethodInvocation:isEmpty
MethodInvocation:getRegion
MethodInvocation:add
MethodInvocation:makeRegion
Method-name:processExcHandler
Method-returnType:void
Method-parameters:[MethodNode mth, ExceptionHandler handler, Set<BlockNode> exits]
MethodInvocation:getHandlerBlock
FieldAccess:mth
MethodInvocation:isFinally
MethodInvocation:get
MethodInvocation:getBlock
MethodInvocation:addExits
MethodInvocation:contains
MethodInvocation:getDomFrontier
MethodInvocation:bitSetToBlocks
FieldAccess:mth
MethodInvocation:getLoopForBlock
FieldAccess:mth
MethodInvocation:isPathExists
MethodInvocation:isRegionContainsBlock
MethodInvocation:getRegion
FieldAccess:mth
MethodInvocation:addExit
MethodInvocation:setHandlerRegion
MethodInvocation:makeRegion
MethodInvocation:get
MethodInvocation:addWarn
MethodInvocation:addAttr
MethodInvocation:getHandlerRegion
Method-name:isEqualPaths
Method-returnType:boolean
Method-parameters:[BlockNode b1, BlockNode b2]
MethodInvocation:isEqualReturnBlocks
MethodInvocation:isSyntheticPath
Method-name:isSyntheticPath
Method-returnType:boolean
Method-parameters:[BlockNode b1, BlockNode b2]
MethodInvocation:skipSyntheticSuccessor
MethodInvocation:skipSyntheticSuccessor
MethodInvocation:isEqualPaths
Method-name:isEqualReturnBlocks
Method-returnType:boolean
Method-parameters:[BlockNode b1, BlockNode b2]
MethodInvocation:isReturnBlock
MethodInvocation:isReturnBlock
MethodInvocation:getInstructions
MethodInvocation:getInstructions
MethodInvocation:size
MethodInvocation:size
MethodInvocation:get
MethodInvocation:get
MethodInvocation:getArgsCount
MethodInvocation:getArgsCount
MethodInvocation:getArgsCount
MethodInvocation:equals
MethodInvocation:getArg
MethodInvocation:getArg
