Class:ValueTransfer
Field:atypefactory
Field:hierarchy
Method-name:ValueTransfer
Method-returnType:null
Method-parameters:[CFAbstractAnalysis<CFValue,CFStore,CFTransfer> analysis]
MethodInvocation:getTypeFactory
MethodInvocation:getQualifierHierarchy
Method-name:getIntRangeStringLengthRange
Method-returnType:Range
Method-parameters:[Node subNode, TransferInput<CFValue,CFStore> p]
MethodInvocation:getIntRange
MethodInvocation:length
MethodInvocation:toString
MethodInvocation:length
MethodInvocation:toString
MethodInvocation:min
MethodInvocation:contains
MethodInvocation:max
MethodInvocation:create
Method-name:getStringLengthRange
Method-returnType:Range
Method-parameters:[Node subNode, TransferInput<CFValue,CFStore> p]
MethodInvocation:getValueOfSubNode
MethodInvocation:getValueAnnotation
MethodInvocation:annotationName
MethodInvocation:equals
MethodInvocation:getRange
MethodInvocation:equals
MethodInvocation:getKind
MethodInvocation:getType
MethodInvocation:getStringLengthRange
MethodInvocation:getOperand
MethodInvocation:isIntRange
MethodInvocation:getIntRangeStringLengthRange
MethodInvocation:create
MethodInvocation:create
MethodInvocation:create
Method-name:getStringLengths
Method-returnType:List<Integer>
Method-parameters:[Node subNode, TransferInput<CFValue,CFStore> p]
MethodInvocation:getValueOfSubNode
MethodInvocation:getValueAnnotation
MethodInvocation:annotationName
MethodInvocation:equals
MethodInvocation:getArrayLength
MethodInvocation:equals
MethodInvocation:getKind
MethodInvocation:getType
MethodInvocation:getStringLengths
MethodInvocation:getOperand
MethodInvocation:singletonList
MethodInvocation:isIntRange
MethodInvocation:getIntRangeStringLengthRange
MethodInvocation:getValuesFromRange
MethodInvocation:getValuesFromRange
MethodInvocation:create
MethodInvocation:getValuesFromRange
MethodInvocation:create
Method-name:getStringValues
Method-returnType:List<String>
Method-parameters:[Node subNode, TransferInput<CFValue,CFStore> p]
MethodInvocation:getValueOfSubNode
MethodInvocation:getValueAnnotation
MethodInvocation:annotationName
MethodInvocation:getStringValues
MethodInvocation:equals
MethodInvocation:getBooleanValues
MethodInvocation:getKind
MethodInvocation:getType
MethodInvocation:getCharValues
MethodInvocation:getStringValues
MethodInvocation:getOperand
MethodInvocation:isIntRange
MethodInvocation:getIntRange
MethodInvocation:getValuesFromRange
MethodInvocation:castNumbers
MethodInvocation:getType
MethodInvocation:getNumericalValues
MethodInvocation:add
MethodInvocation:toString
MethodInvocation:isEmpty
MethodInvocation:singletonList
Method-name:getBooleanValues
Method-returnType:List<Boolean>
Method-parameters:[Node subNode, TransferInput<CFValue,CFStore> p]
MethodInvocation:getValueOfSubNode
MethodInvocation:getAnnotationByName
MethodInvocation:getAnnotations
MethodInvocation:getBooleanValues
Method-name:getCharValues
Method-returnType:List<Character>
Method-parameters:[Node subNode, TransferInput<CFValue,CFStore> p]
MethodInvocation:getValueOfSubNode
MethodInvocation:getAnnotationByName
MethodInvocation:getAnnotations
MethodInvocation:getCharValues
MethodInvocation:isIntRange
MethodInvocation:getAnnotations
MethodInvocation:findAnnotationInHierarchy
MethodInvocation:getAnnotations
MethodInvocation:getRange
MethodInvocation:getValuesFromRange
Method-name:getValueAnnotation
Method-returnType:AnnotationMirror
Method-parameters:[Node subNode, TransferInput<CFValue,CFStore> p]
MethodInvocation:getValueOfSubNode
MethodInvocation:getValueAnnotation
Method-name:getValueAnnotation
Method-returnType:AnnotationMirror
Method-parameters:[CFValue cfValue]
MethodInvocation:findAnnotationInHierarchy
MethodInvocation:getAnnotations
Method-name:getNumericalValues
Method-returnType:List<? extends Number>
Method-parameters:[Node subNode, TransferInput<CFValue,CFStore> p]
MethodInvocation:getValueAnnotation
MethodInvocation:getNumericalValues
Method-name:getNumericalValues
Method-returnType:List<? extends Number>
Method-parameters:[Node subNode, AnnotationMirror valueAnno]
MethodInvocation:areSameByName
MethodInvocation:areSameByName
MethodInvocation:areSameByName
MethodInvocation:getIntValues
MethodInvocation:areSameByName
MethodInvocation:getDoubleValues
MethodInvocation:castNumbers
MethodInvocation:getType
Method-name:getIntRange
Method-returnType:Range
Method-parameters:[Node subNode, TransferInput<CFValue,CFStore> p]
MethodInvocation:getValueAnnotation
MethodInvocation:getIntRangeFromAnnotation
Method-name:getIntRangeFromAnnotation
Method-returnType:Range
Method-parameters:[Node node, AnnotationMirror val]
MethodInvocation:areSameByName
MethodInvocation:isIntRange
MethodInvocation:getRange
MethodInvocation:areSameByName
MethodInvocation:getIntValues
MethodInvocation:getRangeFromValues
MethodInvocation:areSameByName
MethodInvocation:getDoubleValues
MethodInvocation:getRangeFromValues
MethodInvocation:areSameByName
MethodInvocation:castRange
MethodInvocation:getType
Method-name:isIntRange
Method-returnType:boolean
Method-parameters:[Node subNode, TransferInput<CFValue,CFStore> p]
MethodInvocation:getValueOfSubNode
MethodInvocation:isIntRange
MethodInvocation:getAnnotations
Method-name:isIntegralUnknownVal
Method-returnType:boolean
Method-parameters:[Node node, AnnotationMirror anno]
MethodInvocation:areSameByName
MethodInvocation:isIntegral
MethodInvocation:getType
Method-name:isIntRangeOrIntegralUnknownVal
Method-returnType:boolean
Method-parameters:[Node node, TransferInput<CFValue,CFStore> p]
MethodInvocation:isIntRange
MethodInvocation:isIntegralUnknownVal
MethodInvocation:getValueAnnotation
MethodInvocation:getValueOfSubNode
Method-name:createNewResult
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[TransferResult<CFValue,CFStore> result, AnnotationMirror resultAnno]
MethodInvocation:createSingleAnnotationValue
MethodInvocation:getUnderlyingType
MethodInvocation:getResultValue
MethodInvocation:getRegularStore
Method-name:createNewResultBoolean
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[CFStore thenStore, CFStore elseStore, List<Boolean> resultValues, TypeMirror underlyingType]
MethodInvocation:createBooleanAnnotation
MethodInvocation:createSingleAnnotationValue
Method-name:visitFieldAccess
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[FieldAccessNode node, TransferInput<CFValue,CFStore> in]
MethodInvocation:refineArrayAtLengthAccess
MethodInvocation:getRegularStore
Method-name:visitMethodInvocation
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[MethodInvocationNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:refineStringAtLengthInvocation
MethodInvocation:getRegularStore
Method-name:refineArrayAtLengthAccess
Method-returnType:void
Method-parameters:[FieldAccessNode arrayLengthNode, CFStore store]
MethodInvocation:isArrayLengthFieldAccess
MethodInvocation:refineAtLengthAccess
MethodInvocation:getReceiver
Method-name:refineStringAtLengthInvocation
Method-returnType:void
Method-parameters:[MethodInvocationNode stringLengthNode, CFStore store]
MethodInvocation:getTarget
MethodInvocation:isStringLengthMethod
MethodInvocation:getMethodIdentifier
MethodInvocation:getMethod
MethodInvocation:refineAtLengthAccess
MethodInvocation:getReceiver
Method-name:getArrayOrStringAnnotation
Method-returnType:AnnotationMirror
Method-parameters:[Node arrayOrStringNode]
MethodInvocation:getAnnotationMirror
MethodInvocation:getTree
MethodInvocation:getAnnotationMirror
MethodInvocation:getTree
MethodInvocation:getAnnotationMirror
MethodInvocation:getTree
Method-name:refineAtLengthAccess
Method-returnType:void
Method-parameters:[Node lengthNode, Node receiverNode, CFStore store]
MethodInvocation:internalReprOf
MethodInvocation:getTypeFactory
MethodInvocation:getValue
MethodInvocation:getValueAnnotation
MethodInvocation:areSameByName
MethodInvocation:internalReprOf
MethodInvocation:insertValue
MethodInvocation:isIntRange
MethodInvocation:getRange
MethodInvocation:areSameByName
MethodInvocation:getIntValues
MethodInvocation:convertLongsToInts
MethodInvocation:createAnnotation
MethodInvocation:getArrayOrStringAnnotation
MethodInvocation:greatestLowerBound
MethodInvocation:internalReprOf
MethodInvocation:getTypeFactory
MethodInvocation:insertValue
Method-name:visitStringConcatenateAssignment
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[StringConcatenateAssignmentNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:stringConcatenation
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
Method-name:visitStringConcatenate
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[StringConcatenateNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:stringConcatenation
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
Method-name:calculateLengthAddition
Method-returnType:List<Integer>
Method-parameters:[List<Integer> leftLengths, List<Integer> rightLengths]
MethodInvocation:size
MethodInvocation:size
MethodInvocation:add
Method-name:isNullable
Method-returnType:boolean
Method-parameters:[Node node]
MethodInvocation:isPrimitive
MethodInvocation:getKind
MethodInvocation:getType
MethodInvocation:getOperand
MethodInvocation:elementFromUse
MethodInvocation:getTree
MethodInvocation:isCompileTimeConstant
Method-name:createAnnotationForStringConcatenation
Method-returnType:AnnotationMirror
Method-parameters:[Node leftOperand, Node rightOperand, TransferInput<CFValue,CFStore> p]
MethodInvocation:getStringValues
MethodInvocation:getStringValues
MethodInvocation:hasOption
MethodInvocation:getChecker
MethodInvocation:getContext
MethodInvocation:isNullable
MethodInvocation:add
MethodInvocation:isNullable
MethodInvocation:add
MethodInvocation:getKind
MethodInvocation:getType
MethodInvocation:getOperand
MethodInvocation:add
MethodInvocation:getKind
MethodInvocation:getType
MethodInvocation:getOperand
MethodInvocation:add
MethodInvocation:size
MethodInvocation:size
MethodInvocation:add
MethodInvocation:createStringAnnotation
MethodInvocation:getLengthsForStringValues
MethodInvocation:getStringLengths
MethodInvocation:getLengthsForStringValues
MethodInvocation:getStringLengths
MethodInvocation:isNullable
MethodInvocation:add
MethodInvocation:isNullable
MethodInvocation:add
MethodInvocation:calculateLengthAddition
MethodInvocation:createArrayLenAnnotation
MethodInvocation:getRangeFromValues
MethodInvocation:getStringLengthRange
MethodInvocation:getRangeFromValues
MethodInvocation:getStringLengthRange
MethodInvocation:isNullable
MethodInvocation:union
MethodInvocation:create
MethodInvocation:isNullable
MethodInvocation:union
MethodInvocation:create
MethodInvocation:calculateLengthRangeAddition
MethodInvocation:createArrayLenRangeAnnotation
Method-name:stringConcatenation
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[Node leftOperand, Node rightOperand, TransferInput<CFValue,CFStore> p, TransferResult<CFValue,CFStore> result]
MethodInvocation:createAnnotationForStringConcatenation
MethodInvocation:getUnderlyingType
MethodInvocation:getResultValue
MethodInvocation:createSingleAnnotationValue
MethodInvocation:getRegularStore
Field:NumericalBinaryOps
Method-name:calculateNumericalBinaryOp
Method-returnType:AnnotationMirror
Method-parameters:[Node leftNode, Node rightNode, NumericalBinaryOps op, TransferInput<CFValue,CFStore> p]
MethodInvocation:isIntRangeOrIntegralUnknownVal
MethodInvocation:isIntRangeOrIntegralUnknownVal
MethodInvocation:calculateValuesBinaryOp
MethodInvocation:createNumberAnnotationMirror
MethodInvocation:calculateRangeBinaryOp
MethodInvocation:createIntRangeAnnotation
Method-name:calculateRangeBinaryOp
Method-returnType:Range
Method-parameters:[Node leftNode, Node rightNode, NumericalBinaryOps op, TransferInput<CFValue,CFStore> p]
MethodInvocation:isIntegral
MethodInvocation:getType
MethodInvocation:isIntegral
MethodInvocation:getType
MethodInvocation:getIntRange
MethodInvocation:getIntRange
MethodInvocation:plus
MethodInvocation:minus
MethodInvocation:times
MethodInvocation:divide
MethodInvocation:remainder
MethodInvocation:shiftLeft
MethodInvocation:signedShiftRight
MethodInvocation:unsignedShiftRight
MethodInvocation:bitwiseAnd
MethodInvocation:bitwiseOr
MethodInvocation:bitwiseXor
MethodInvocation:getKind
MethodInvocation:getType
MethodInvocation:getKind
MethodInvocation:getType
MethodInvocation:intRange
Method-name:calculateValuesBinaryOp
Method-returnType:List<Number>
Method-parameters:[Node leftNode, Node rightNode, NumericalBinaryOps op, TransferInput<CFValue,CFStore> p]
MethodInvocation:getNumericalValues
MethodInvocation:getNumericalValues
MethodInvocation:getNumberMath
MethodInvocation:add
MethodInvocation:plus
MethodInvocation:divide
MethodInvocation:add
MethodInvocation:add
MethodInvocation:times
MethodInvocation:remainder
MethodInvocation:add
MethodInvocation:add
MethodInvocation:minus
MethodInvocation:add
MethodInvocation:shiftLeft
MethodInvocation:add
MethodInvocation:signedShiftRight
MethodInvocation:add
MethodInvocation:unsignedShiftRight
MethodInvocation:add
MethodInvocation:bitwiseAnd
MethodInvocation:add
MethodInvocation:bitwiseOr
MethodInvocation:add
MethodInvocation:bitwiseXor
Method-name:visitNumericalAddition
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[NumericalAdditionNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateNumericalBinaryOp
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:createNewResult
Method-name:visitNumericalSubtraction
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[NumericalSubtractionNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateNumericalBinaryOp
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:createNewResult
Method-name:visitNumericalMultiplication
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[NumericalMultiplicationNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateNumericalBinaryOp
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:createNewResult
Method-name:visitIntegerDivision
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[IntegerDivisionNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateNumericalBinaryOp
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:createNewResult
Method-name:visitFloatingDivision
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[FloatingDivisionNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateNumericalBinaryOp
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:createNewResult
Method-name:visitIntegerRemainder
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[IntegerRemainderNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateNumericalBinaryOp
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:createNewResult
Method-name:visitFloatingRemainder
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[FloatingRemainderNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateNumericalBinaryOp
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:createNewResult
Method-name:visitLeftShift
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[LeftShiftNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateNumericalBinaryOp
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:createNewResult
Method-name:visitSignedRightShift
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[SignedRightShiftNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateNumericalBinaryOp
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:createNewResult
Method-name:visitUnsignedRightShift
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[UnsignedRightShiftNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateNumericalBinaryOp
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:createNewResult
Method-name:visitBitwiseAnd
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[BitwiseAndNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateNumericalBinaryOp
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:createNewResult
Method-name:visitBitwiseOr
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[BitwiseOrNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateNumericalBinaryOp
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:createNewResult
Method-name:visitBitwiseXor
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[BitwiseXorNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateNumericalBinaryOp
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:createNewResult
Field:NumericalUnaryOps
Method-name:calculateNumericalUnaryOp
Method-returnType:AnnotationMirror
Method-parameters:[Node operand, NumericalUnaryOps op, TransferInput<CFValue,CFStore> p]
MethodInvocation:isIntRange
MethodInvocation:calculateValuesUnaryOp
MethodInvocation:createNumberAnnotationMirror
MethodInvocation:calculateRangeUnaryOp
MethodInvocation:createIntRangeAnnotation
Method-name:calculateRangeUnaryOp
Method-returnType:Range
Method-parameters:[Node operand, NumericalUnaryOps op, TransferInput<CFValue,CFStore> p]
MethodInvocation:isIntegral
MethodInvocation:getType
MethodInvocation:getIntRange
MethodInvocation:unaryPlus
MethodInvocation:unaryMinus
MethodInvocation:bitwiseComplement
MethodInvocation:getKind
MethodInvocation:getType
MethodInvocation:intRange
Method-name:calculateValuesUnaryOp
Method-returnType:List<Number>
Method-parameters:[Node operand, NumericalUnaryOps op, TransferInput<CFValue,CFStore> p]
MethodInvocation:getNumericalValues
MethodInvocation:getNumberMath
MethodInvocation:add
MethodInvocation:unaryPlus
MethodInvocation:add
MethodInvocation:unaryMinus
MethodInvocation:add
MethodInvocation:bitwiseComplement
Method-name:visitNumericalMinus
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[NumericalMinusNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateNumericalUnaryOp
MethodInvocation:getOperand
MethodInvocation:createNewResult
Method-name:visitNumericalPlus
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[NumericalPlusNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateNumericalUnaryOp
MethodInvocation:getOperand
MethodInvocation:createNewResult
Method-name:visitBitwiseComplement
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[BitwiseComplementNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateNumericalUnaryOp
MethodInvocation:getOperand
MethodInvocation:createNewResult
Field:ComparisonOperators
Method-name:calculateBinaryComparison
Method-returnType:List<Boolean>
Method-parameters:[Node leftNode, CFValue leftValue, Node rightNode, CFValue rightValue, ComparisonOperators op, CFStore thenStore, CFStore elseStore]
MethodInvocation:getValueAnnotation
MethodInvocation:getValueAnnotation
MethodInvocation:isIntRange
MethodInvocation:isIntRange
MethodInvocation:isIntegralUnknownVal
MethodInvocation:isIntegralUnknownVal
MethodInvocation:refineIntRanges
MethodInvocation:getNumericalValues
MethodInvocation:getNumericalValues
MethodInvocation:areSame
MethodInvocation:areSame
MethodInvocation:getNumberMath
MethodInvocation:equalTo
MethodInvocation:greaterThan
MethodInvocation:greaterThanEq
MethodInvocation:lessThan
MethodInvocation:lessThanEq
MethodInvocation:notEqualTo
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:createAnnotationFromResultsAndAddToStore
MethodInvocation:createAnnotationFromResultsAndAddToStore
MethodInvocation:createAnnotationFromResultsAndAddToStore
MethodInvocation:createAnnotationFromResultsAndAddToStore
Method-name:refineIntRanges
Method-returnType:List<Boolean>
Method-parameters:[Node leftNode, AnnotationMirror leftAnno, Node rightNode, AnnotationMirror rightAnno, ComparisonOperators op, CFStore thenStore, CFStore elseStore]
MethodInvocation:getIntRangeFromAnnotation
MethodInvocation:getIntRangeFromAnnotation
MethodInvocation:refineEqualTo
MethodInvocation:refineNotEqualTo
MethodInvocation:refineNotEqualTo
MethodInvocation:refineGreaterThan
MethodInvocation:refineLessThan
MethodInvocation:refineGreaterThanEq
MethodInvocation:refineLessThanEq
MethodInvocation:refineLessThanEq
MethodInvocation:refineGreaterThanEq
MethodInvocation:refineLessThan
MethodInvocation:refineGreaterThan
MethodInvocation:refineLessThan
MethodInvocation:refineGreaterThan
MethodInvocation:refineLessThanEq
MethodInvocation:refineGreaterThanEq
MethodInvocation:refineGreaterThanEq
MethodInvocation:refineLessThanEq
MethodInvocation:refineGreaterThan
MethodInvocation:refineLessThan
MethodInvocation:refineNotEqualTo
MethodInvocation:refineNotEqualTo
MethodInvocation:refineEqualTo
MethodInvocation:createAnnotationFromRangeAndAddToStore
MethodInvocation:createAnnotationFromRangeAndAddToStore
MethodInvocation:createAnnotationFromRangeAndAddToStore
MethodInvocation:createAnnotationFromRangeAndAddToStore
Method-name:createAnnotationFromResultsAndAddToStore
Method-returnType:void
Method-parameters:[CFStore store, List<?> results, Node node]
MethodInvocation:createResultingAnnotation
MethodInvocation:getType
MethodInvocation:addAnnotationToStore
Method-name:createAnnotationFromRangeAndAddToStore
Method-returnType:void
Method-parameters:[CFStore store, Range range, Node node]
MethodInvocation:createIntRangeAnnotation
MethodInvocation:addAnnotationToStore
Method-name:addAnnotationToStore
Method-returnType:void
Method-parameters:[CFStore store, AnnotationMirror anno, Node node]
MethodInvocation:splitAssignments
MethodInvocation:internalReprOf
MethodInvocation:getTypeFactory
MethodInvocation:canInsertReceiver
MethodInvocation:getValue
MethodInvocation:getValueAnnotation
MethodInvocation:greatestLowerBound
MethodInvocation:insertValue
MethodInvocation:refineArrayAtLengthAccess
MethodInvocation:refineStringAtLengthInvocation
Method-name:visitLessThan
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[LessThanNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:getThenStore
MethodInvocation:getElseStore
MethodInvocation:calculateBinaryComparison
MethodInvocation:getLeftOperand
MethodInvocation:getValueOfSubNode
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:getValueOfSubNode
MethodInvocation:getRightOperand
MethodInvocation:getUnderlyingType
MethodInvocation:getResultValue
MethodInvocation:createNewResultBoolean
Method-name:visitLessThanOrEqual
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[LessThanOrEqualNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:getThenStore
MethodInvocation:getElseStore
MethodInvocation:calculateBinaryComparison
MethodInvocation:getLeftOperand
MethodInvocation:getValueOfSubNode
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:getValueOfSubNode
MethodInvocation:getRightOperand
MethodInvocation:getUnderlyingType
MethodInvocation:getResultValue
MethodInvocation:createNewResultBoolean
Method-name:visitGreaterThan
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[GreaterThanNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:getThenStore
MethodInvocation:getElseStore
MethodInvocation:calculateBinaryComparison
MethodInvocation:getLeftOperand
MethodInvocation:getValueOfSubNode
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:getValueOfSubNode
MethodInvocation:getRightOperand
MethodInvocation:getUnderlyingType
MethodInvocation:getResultValue
MethodInvocation:createNewResultBoolean
Method-name:visitGreaterThanOrEqual
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[GreaterThanOrEqualNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:getThenStore
MethodInvocation:getElseStore
MethodInvocation:calculateBinaryComparison
MethodInvocation:getLeftOperand
MethodInvocation:getValueOfSubNode
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:getValueOfSubNode
MethodInvocation:getRightOperand
MethodInvocation:getUnderlyingType
MethodInvocation:getResultValue
MethodInvocation:createNewResultBoolean
Method-name:strengthenAnnotationOfEqualTo
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[TransferResult<CFValue,CFStore> transferResult, Node firstNode, Node secondNode, CFValue firstValue, CFValue secondValue, boolean notEqualTo]
MethodInvocation:isNumeric
MethodInvocation:getType
MethodInvocation:isNumeric
MethodInvocation:getType
MethodInvocation:getThenStore
MethodInvocation:getElseStore
MethodInvocation:calculateBinaryComparison
MethodInvocation:getResultValue
MethodInvocation:getUnderlyingType
MethodInvocation:getResultValue
MethodInvocation:createNewResultBoolean
Method-name:processConditionalPostconditions
Method-returnType:void
Method-parameters:[MethodInvocationNode n, ExecutableElement methodElement, Tree tree, CFStore thenStore, CFStore elseStore]
MethodInvocation:getMethodIdentifier
MethodInvocation:isStartsWithMethod
MethodInvocation:isEndsWithMethod
MethodInvocation:getArgument
MethodInvocation:getArrayOrStringAnnotation
MethodInvocation:getMinLenValue
MethodInvocation:internalReprOf
MethodInvocation:getReceiver
MethodInvocation:getTarget
MethodInvocation:createArrayLenRangeAnnotation
MethodInvocation:insertValue
Field:ConditionalOperators
Field:ALL_BOOLEANS
MethodInvocation:asList
Method-name:calculateConditionalOperator
Method-returnType:List<Boolean>
Method-parameters:[Node leftNode, Node rightNode, ConditionalOperators op, TransferInput<CFValue,CFStore> p]
MethodInvocation:getBooleanValues
MethodInvocation:getBooleanValues
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
Method-name:visitConditionalNot
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[ConditionalNotNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateConditionalOperator
MethodInvocation:getOperand
MethodInvocation:createNewResultBoolean
MethodInvocation:getThenStore
MethodInvocation:getElseStore
MethodInvocation:getUnderlyingType
MethodInvocation:getResultValue
Method-name:visitConditionalAnd
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[ConditionalAndNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateConditionalOperator
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:createNewResultBoolean
MethodInvocation:getThenStore
MethodInvocation:getElseStore
MethodInvocation:getUnderlyingType
MethodInvocation:getResultValue
Method-name:visitConditionalOr
Method-returnType:TransferResult<CFValue,CFStore>
Method-parameters:[ConditionalOrNode n, TransferInput<CFValue,CFStore> p]
MethodInvocation:calculateConditionalOperator
MethodInvocation:getLeftOperand
MethodInvocation:getRightOperand
MethodInvocation:createNewResultBoolean
MethodInvocation:getThenStore
MethodInvocation:getElseStore
MethodInvocation:getUnderlyingType
MethodInvocation:getResultValue
