Class:RexSimplify
Field:paranoid
Field:rexBuilder
Field:predicates
Field:defaultUnknownAs
Field:predicateElimination
Field:executor
Field:strong
Method-name:RexSimplify
Method-returnType:null
Method-parameters:[RexBuilder rexBuilder, RelOptPredicateList predicates, RexExecutor executor]
Method-name:RexSimplify
Method-returnType:null
Method-parameters:[RexBuilder rexBuilder, RelOptPredicateList predicates, RexUnknownAs defaultUnknownAs, boolean predicateElimination, boolean paranoid, RexExecutor executor]
FieldAccess:rexBuilder
MethodInvocation:requireNonNull
FieldAccess:predicates
MethodInvocation:requireNonNull
FieldAccess:defaultUnknownAs
MethodInvocation:requireNonNull
FieldAccess:predicateElimination
FieldAccess:paranoid
FieldAccess:executor
MethodInvocation:requireNonNull
FieldAccess:strong
Method-name:RexSimplify
Method-returnType:null
Method-parameters:[RexBuilder rexBuilder, boolean unknownAsFalse, RexExecutor executor]
MethodInvocation:falseIf
Method-name:RexSimplify
Method-returnType:null
Method-parameters:[RexBuilder rexBuilder, RelOptPredicateList predicates, boolean unknownAsFalse, RexExecutor executor]
MethodInvocation:falseIf
Method-name:withUnknownAsFalse
Method-returnType:RexSimplify
Method-parameters:[boolean unknownAsFalse]
MethodInvocation:falseIf
FieldAccess:defaultUnknownAs
Method-name:withPredicates
Method-returnType:RexSimplify
Method-parameters:[RelOptPredicateList predicates]
FieldAccess:predicates
Method-name:withParanoid
Method-returnType:RexSimplify
Method-parameters:[boolean paranoid]
FieldAccess:paranoid
Method-name:withPredicateElimination
Method-returnType:RexSimplify
Method-parameters:[boolean predicateElimination]
FieldAccess:predicateElimination
Method-name:simplifyPreservingType
Method-returnType:RexNode
Method-parameters:[RexNode e]
MethodInvocation:simplifyPreservingType
Method-name:simplifyPreservingType
Method-returnType:RexNode
Method-parameters:[RexNode e, RexUnknownAs unknownAs, boolean matchNullability]
MethodInvocation:simplifyUnknownAs
MethodInvocation:getType
MethodInvocation:getType
MethodInvocation:equalSansNullability
MethodInvocation:getType
MethodInvocation:getType
MethodInvocation:makeCast
MethodInvocation:getType
MethodInvocation:equals
Method-name:simplify
Method-returnType:RexNode
Method-parameters:[RexNode e]
MethodInvocation:simplifyUnknownAs
Method-name:simplifyUnknownAsFalse
Method-returnType:RexNode
Method-parameters:[RexNode e]
MethodInvocation:simplifyUnknownAs
Method-name:simplifyUnknownAs
Method-returnType:RexNode
Method-parameters:[RexNode e, RexUnknownAs unknownAs]
MethodInvocation:simplify
MethodInvocation:withParanoid
MethodInvocation:verify
Method-name:simplify
Method-returnType:RexNode
Method-parameters:[RexNode e, RexUnknownAs unknownAs]
Method-name:simplifyGenericNode
Method-returnType:RexNode
Method-parameters:[RexCall e]
MethodInvocation:simplifyList
MethodInvocation:equals
MethodInvocation:makeCall
MethodInvocation:getType
MethodInvocation:getOperator
Method-name:simplifyComparison
Method-returnType:RexNode
Method-parameters:[RexCall e, RexUnknownAs unknownAs]
MethodInvocation:simplifyComparison
Method-name:simplifyComparison
Method-returnType:RexNode
Method-parameters:[RexCall e, RexUnknownAs unknownAs, Class<C> clazz]
MethodInvocation:simplifyList
MethodInvocation:get
MethodInvocation:get
MethodInvocation:equals
MethodInvocation:isDeterministic
MethodInvocation:getKind
MethodInvocation:makeCall
MethodInvocation:makeNullLiteral
MethodInvocation:getType
MethodInvocation:makeCall
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:makeNullLiteral
MethodInvocation:getType
MethodInvocation:makeCall
MethodInvocation:simplify
MethodInvocation:getSqlTypeName
MethodInvocation:getType
MethodInvocation:of
MethodInvocation:makeCall
MethodInvocation:getOperator
MethodInvocation:isAlwaysTrue
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:isNullable
MethodInvocation:getType
MethodInvocation:makeLiteral
MethodInvocation:isNullable
MethodInvocation:getType
MethodInvocation:makeLiteral
MethodInvocation:isAlwaysFalse
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:isNullable
MethodInvocation:getType
MethodInvocation:makeLiteral
MethodInvocation:isNullable
MethodInvocation:getType
MethodInvocation:makeLiteral
MethodInvocation:isA
MethodInvocation:isA
MethodInvocation:equalSansNullability
MethodInvocation:getTypeFactory
MethodInvocation:getType
MethodInvocation:getType
MethodInvocation:getValueAs
MethodInvocation:getValueAs
MethodInvocation:makeLiteral
MethodInvocation:makeNullLiteral
MethodInvocation:getType
MethodInvocation:compareTo
MethodInvocation:getKind
MethodInvocation:makeLiteral
MethodInvocation:makeLiteral
MethodInvocation:makeLiteral
MethodInvocation:makeLiteral
MethodInvocation:makeLiteral
MethodInvocation:makeLiteral
MethodInvocation:equals
MethodInvocation:makeCall
MethodInvocation:simplifyUsingPredicates
Method-name:simplifyAnds
Method-returnType:RexNode
Method-parameters:[Iterable<? extends RexNode> nodes]
MethodInvocation:ensureParanoidOff
MethodInvocation:simplifyAnds
Method-name:simplifyAnds
Method-returnType:RexNode
Method-parameters:[Iterable<? extends RexNode> nodes, RexUnknownAs unknownAs]
MethodInvocation:decomposeConjunction
MethodInvocation:simplifyList
MethodInvocation:simplifyList
MethodInvocation:simplifyAnd2ForUnknownAsFalse
MethodInvocation:simplifyAnd2
Method-name:simplifyList
Method-returnType:void
Method-parameters:[List<RexNode> terms, RexUnknownAs unknownAs]
MethodInvocation:size
MethodInvocation:set
MethodInvocation:simplify
MethodInvocation:get
Method-name:simplifyAndTerms
Method-returnType:void
Method-parameters:[List<RexNode> terms, RexUnknownAs unknownAs]
MethodInvocation:size
MethodInvocation:get
MethodInvocation:of
MethodInvocation:set
MethodInvocation:simplify
MethodInvocation:union
MethodInvocation:of
MethodInvocation:subList
MethodInvocation:withPredicates
MethodInvocation:size
MethodInvocation:get
MethodInvocation:of
MethodInvocation:set
MethodInvocation:simplify
Method-name:simplifyOrTerms
Method-returnType:void
Method-parameters:[List<RexNode> terms, RexUnknownAs unknownAs]
MethodInvocation:size
MethodInvocation:get
MethodInvocation:allowedAsPredicateDuringOrSimplification
MethodInvocation:simplify
MethodInvocation:set
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:union
MethodInvocation:of
MethodInvocation:of
MethodInvocation:withPredicates
MethodInvocation:size
MethodInvocation:get
MethodInvocation:allowedAsPredicateDuringOrSimplification
MethodInvocation:set
MethodInvocation:simplify
Method-name:allowedAsPredicateDuringOrSimplification
Method-returnType:boolean
Method-parameters:[final RexNode t]
MethodInvocation:of
MethodInvocation:getKind
MethodInvocation:contains
MethodInvocation:isNullable
MethodInvocation:getType
Method-name:simplifyNot
Method-returnType:RexNode
Method-parameters:[RexCall call, RexUnknownAs unknownAs]
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:getKind
MethodInvocation:simplify
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:getSqlTypeName
MethodInvocation:getType
MethodInvocation:isNullLiteral
MethodInvocation:makeLiteral
MethodInvocation:booleanValue
MethodInvocation:negate
MethodInvocation:getKind
MethodInvocation:getKind
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:op
MethodInvocation:getOperands
MethodInvocation:negateNullSafe
MethodInvocation:getKind
MethodInvocation:getKind
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:op
MethodInvocation:getOperands
MethodInvocation:getKind
MethodInvocation:getOperands
MethodInvocation:add
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:getKind
MethodInvocation:getOperands
MethodInvocation:add
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:getKind
MethodInvocation:getOperands
MethodInvocation:size
MethodInvocation:size
MethodInvocation:add
MethodInvocation:makeCall
MethodInvocation:get
MethodInvocation:add
MethodInvocation:get
MethodInvocation:add
MethodInvocation:makeCall
MethodInvocation:get
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:simplify
MethodInvocation:negate
MethodInvocation:isAlwaysTrue
MethodInvocation:makeLiteral
MethodInvocation:isAlwaysFalse
MethodInvocation:makeLiteral
MethodInvocation:makeCall
Method-name:simplifyUnaryMinus
Method-returnType:RexNode
Method-parameters:[RexCall call, RexUnknownAs unknownAs]
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:getKind
MethodInvocation:simplify
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:simplifyGenericNode
Method-name:simplifyUnaryPlus
Method-returnType:RexNode
Method-parameters:[RexCall call, RexUnknownAs unknownAs]
MethodInvocation:simplify
MethodInvocation:get
MethodInvocation:getOperands
Method-name:simplifyIs
Method-returnType:RexNode
Method-parameters:[RexCall call, RexUnknownAs unknownAs]
MethodInvocation:getKind
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:simplify
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:simplify
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:simplifyIsPredicate
MethodInvocation:simplifyIs2
Method-name:simplifyIsPredicate
Method-returnType:RexNode
Method-parameters:[SqlKind kind, RexNode a]
MethodInvocation:isReferenceOrAccess
MethodInvocation:of
MethodInvocation:equals
MethodInvocation:makeLiteral
Method-name:simplifyIs2
Method-returnType:RexNode
Method-parameters:[SqlKind kind, RexNode a, RexUnknownAs unknownAs]
MethodInvocation:validateStrongPolicy
MethodInvocation:simplifyIsNull
MethodInvocation:validateStrongPolicy
MethodInvocation:simplifyIsNotNull
MethodInvocation:isNullable
MethodInvocation:getType
MethodInvocation:simplify
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:op
MethodInvocation:of
MethodInvocation:isNullable
MethodInvocation:getType
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:getKind
MethodInvocation:op
MethodInvocation:negateNullSafe
MethodInvocation:get
FieldAccess:operands
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:op
MethodInvocation:of
Method-name:simplifyIsNotNull
Method-returnType:RexNode
Method-parameters:[RexNode a]
MethodInvocation:simplify
MethodInvocation:isNullable
MethodInvocation:getType
MethodInvocation:isSafeExpression
MethodInvocation:makeLiteral
MethodInvocation:contains
MethodInvocation:makeLiteral
MethodInvocation:hasCustomNullabilityRules
MethodInvocation:getKind
MethodInvocation:policy
MethodInvocation:getKind
MethodInvocation:makeLiteral
MethodInvocation:getOperands
MethodInvocation:simplifyIsNotNull
MethodInvocation:add
MethodInvocation:makeCall
MethodInvocation:isAlwaysFalse
MethodInvocation:makeLiteral
MethodInvocation:add
MethodInvocation:composeConjunction
MethodInvocation:getKind
MethodInvocation:makeLiteral
MethodInvocation:isNull
MethodInvocation:getKind
Method-name:simplifyIsNull
Method-returnType:RexNode
Method-parameters:[RexNode a]
MethodInvocation:simplify
MethodInvocation:isNullable
MethodInvocation:getType
MethodInvocation:isSafeExpression
MethodInvocation:makeLiteral
MethodInvocation:isNull
MethodInvocation:makeLiteral
MethodInvocation:hasCustomNullabilityRules
MethodInvocation:getKind
MethodInvocation:policy
MethodInvocation:getKind
MethodInvocation:makeLiteral
MethodInvocation:getOperands
MethodInvocation:simplifyIsNull
MethodInvocation:add
MethodInvocation:makeCall
MethodInvocation:add
MethodInvocation:composeDisjunction
Method-name:validateStrongPolicy
Method-returnType:void
Method-parameters:[RexNode rexNode]
Method-name:hasCustomNullabilityRules
Method-returnType:boolean
Method-parameters:[SqlKind sqlKind]
Method-name:simplifyCoalesce
Method-returnType:RexNode
Method-parameters:[RexCall call]
MethodInvocation:getOperands
MethodInvocation:simplify
MethodInvocation:isNull
MethodInvocation:add
MethodInvocation:add
MethodInvocation:isNullable
MethodInvocation:getType
MethodInvocation:size
MethodInvocation:makeNullLiteral
MethodInvocation:get
MethodInvocation:equals
MethodInvocation:clone
Method-name:simplifyCase
Method-returnType:RexNode
Method-parameters:[RexCall call, RexUnknownAs unknownAs]
MethodInvocation:fromCaseOperands
MethodInvocation:getOperands
MethodInvocation:withPredicates
MethodInvocation:getType
MethodInvocation:simplify
MethodInvocation:isAlwaysFalse
MethodInvocation:simplify
MethodInvocation:equals
MethodInvocation:isSafeExpression
MethodInvocation:makeCall
MethodInvocation:generateBranch
MethodInvocation:isAlwaysFalse
MethodInvocation:add
MethodInvocation:isAlwaysTrue
MethodInvocation:isAlwaysTrue
MethodInvocation:generateBranch
MethodInvocation:isAlwaysFalse
MethodInvocation:add
MethodInvocation:size
FieldAccess:value
MethodInvocation:get
MethodInvocation:sameTypeOrNarrowsNullability
MethodInvocation:getType
MethodInvocation:makeAbstractCast
MethodInvocation:getSqlTypeName
MethodInvocation:getType
MethodInvocation:simplifyBooleanCase
MethodInvocation:sameTypeOrNarrowsNullability
MethodInvocation:getType
MethodInvocation:simplify
MethodInvocation:simplify
MethodInvocation:isNullable
MethodInvocation:getType
MethodInvocation:makeCast
MethodInvocation:getType
MethodInvocation:toCaseOperands
MethodInvocation:equals
MethodInvocation:getOperands
MethodInvocation:makeCall
Method-name:generateBranch
Method-returnType:CaseBranch
Method-parameters:[boolean simplifyCond, RexSimplify simplifier, CaseBranch branch]
MethodInvocation:simplify
Method-name:sameTypeOrNarrowsNullability
Method-returnType:boolean
Method-parameters:[RelDataType oldType, RelDataType newType]
MethodInvocation:equals
MethodInvocation:equalSansNullability
MethodInvocation:isNullable
Class:CaseBranch
Field:cond
Field:value
Method-name:CaseBranch
Method-returnType:null
Method-parameters:[RexNode cond, RexNode value]
FieldAccess:cond
FieldAccess:value
Method-name:toString
Method-returnType:String
Method-parameters:[]
Method-name:fromCaseOperands
Method-returnType:List<CaseBranch>
Method-parameters:[RexBuilder rexBuilder, List<RexNode> operands]
MethodInvocation:size
MethodInvocation:add
MethodInvocation:get
MethodInvocation:get
MethodInvocation:add
MethodInvocation:makeLiteral
MethodInvocation:last
Method-name:toCaseOperands
Method-returnType:List<RexNode>
Method-parameters:[List<CaseBranch> branches]
Field:SafeRexVisitor
Field:safeOps
Method-name:SafeRexVisitor
Method-returnType:null
Method-parameters:[]
MethodInvocation:noneOf
MethodInvocation:addAll
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
FieldAccess:safeOps
MethodInvocation:immutableEnumSet
Method-name:visitInputRef
Method-returnType:Boolean
Method-parameters:[RexInputRef inputRef]
Method-name:visitLocalRef
Method-returnType:Boolean
Method-parameters:[RexLocalRef localRef]
Method-name:visitLiteral
Method-returnType:Boolean
Method-parameters:[RexLiteral literal]
Method-name:visitCall
Method-returnType:Boolean
Method-parameters:[RexCall call]
MethodInvocation:contains
MethodInvocation:getKind
MethodInvocation:getOperands
MethodInvocation:accept
Method-name:visitOver
Method-returnType:Boolean
Method-parameters:[RexOver over]
Method-name:visitCorrelVariable
Method-returnType:Boolean
Method-parameters:[RexCorrelVariable correlVariable]
Method-name:visitDynamicParam
Method-returnType:Boolean
Method-parameters:[RexDynamicParam dynamicParam]
Method-name:visitRangeRef
Method-returnType:Boolean
Method-parameters:[RexRangeRef rangeRef]
Method-name:visitFieldAccess
Method-returnType:Boolean
Method-parameters:[RexFieldAccess fieldAccess]
Method-name:visitSubQuery
Method-returnType:Boolean
Method-parameters:[RexSubQuery subQuery]
Method-name:visitTableInputRef
Method-returnType:Boolean
Method-parameters:[RexTableInputRef fieldRef]
Method-name:visitPatternFieldRef
Method-returnType:Boolean
Method-parameters:[RexPatternFieldRef fieldRef]
Method-name:isSafeExpression
Method-returnType:boolean
Method-parameters:[RexNode r]
MethodInvocation:accept
Method-name:simplifyBooleanCase
Method-returnType:RexNode
Method-parameters:[RexBuilder rexBuilder, List<CaseBranch> inputBranches, RexUnknownAs unknownAs, RelDataType branchType]
MethodInvocation:size
MethodInvocation:isSafeExpression
MethodInvocation:isSafeExpression
MethodInvocation:isNullable
MethodInvocation:getType
MethodInvocation:makeCall
MethodInvocation:equals
MethodInvocation:getType
MethodInvocation:makeAbstractCast
MethodInvocation:add
MethodInvocation:simplifyBooleanCaseGeneric
Method-name:simplifyBooleanCaseGeneric
Method-returnType:RexNode
Method-parameters:[RexBuilder rexBuilder, List<CaseBranch> branches]
MethodInvocation:allMatch
MethodInvocation:stream
MethodInvocation:isAlwaysTrue
MethodInvocation:isAlwaysFalse
MethodInvocation:isAlwaysFalse
MethodInvocation:isAlwaysTrue
MethodInvocation:makeCall
MethodInvocation:add
MethodInvocation:andNot
MethodInvocation:add
MethodInvocation:composeDisjunction
Method-name:simplifyAnd
Method-returnType:RexNode
Method-parameters:[RexCall e]
MethodInvocation:ensureParanoidOff
MethodInvocation:simplifyAnd
Method-name:simplifyAnd
Method-returnType:RexNode
Method-parameters:[RexCall e, RexUnknownAs unknownAs]
MethodInvocation:conjunctions
MethodInvocation:simplifyAndTerms
MethodInvocation:simplifyList
MethodInvocation:decomposeConjunction
MethodInvocation:simplifyAnd2ForUnknownAsFalse
MethodInvocation:simplifyAnd2
Method-name:simplifyAnd2
Method-returnType:RexNode
Method-parameters:[List<RexNode> terms, List<RexNode> notTerms]
MethodInvocation:isAlwaysFalse
MethodInvocation:makeLiteral
MethodInvocation:isEmpty
MethodInvocation:isEmpty
MethodInvocation:makeLiteral
MethodInvocation:conjunctions
MethodInvocation:containsAll
MethodInvocation:isNullable
MethodInvocation:getType
MethodInvocation:makeLiteral
MethodInvocation:add
MethodInvocation:removeAll
MethodInvocation:removeAll
MethodInvocation:add
MethodInvocation:makeNullLiteral
MethodInvocation:getType
MethodInvocation:get
MethodInvocation:add
MethodInvocation:simplifyIs
MethodInvocation:makeCall
MethodInvocation:add
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:composeConjunction
Method-name:simplifyAnd2ForUnknownAsFalse
Method-returnType:RexNode
Method-parameters:[List<RexNode> terms, List<RexNode> notTerms]
MethodInvocation:simplifyAnd2ForUnknownAsFalse
Method-name:simplifyAnd2ForUnknownAsFalse
Method-returnType:RexNode
Method-parameters:[List<RexNode> terms, List<RexNode> notTerms, Class<C> clazz]
MethodInvocation:isAlwaysFalse
MethodInvocation:isNullLiteral
MethodInvocation:makeLiteral
MethodInvocation:isEmpty
MethodInvocation:isEmpty
MethodInvocation:makeLiteral
MethodInvocation:size
MethodInvocation:isEmpty
MethodInvocation:simplify
MethodInvocation:get
MethodInvocation:create
MethodInvocation:of
MethodInvocation:getValueAs
MethodInvocation:processRange
MethodInvocation:size
MethodInvocation:get
MethodInvocation:isDeterministic
MethodInvocation:getKind
MethodInvocation:isAlwaysTrue
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:set
MethodInvocation:isAlwaysTrue
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:set
MethodInvocation:getKind
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:add
MethodInvocation:getKind
MethodInvocation:add
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:add
MethodInvocation:getKind
MethodInvocation:add
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:of
MethodInvocation:getValue
MethodInvocation:makeLiteral
MethodInvocation:getKind
MethodInvocation:put
MethodInvocation:equals
MethodInvocation:makeLiteral
MethodInvocation:isReferenceOrAccess
MethodInvocation:isReferenceOrAccess
MethodInvocation:put
MethodInvocation:of
MethodInvocation:negate
MethodInvocation:add
MethodInvocation:invert
MethodInvocation:add
MethodInvocation:simplifyUsingPredicates
MethodInvocation:set
MethodInvocation:getValueAs
MethodInvocation:processRange
MethodInvocation:add
MethodInvocation:get
FieldAccess:operands
MethodInvocation:add
MethodInvocation:get
FieldAccess:operands
MethodInvocation:add
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:remove
MethodInvocation:add
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:disjoint
MethodInvocation:makeLiteral
MethodInvocation:keySet
MethodInvocation:get
MethodInvocation:get
MethodInvocation:get
MethodInvocation:equals
MethodInvocation:makeLiteral
MethodInvocation:remove
MethodInvocation:contains
MethodInvocation:add
MethodInvocation:makeCall
MethodInvocation:isDeterministic
MethodInvocation:conjunctions
MethodInvocation:containsAll
MethodInvocation:makeLiteral
MethodInvocation:add
MethodInvocation:makeCall
MethodInvocation:contains
MethodInvocation:makeLiteral
MethodInvocation:composeConjunction
Method-name:simplifyNotEqual
Method-returnType:RexNode
Method-parameters:[RexNode e]
MethodInvocation:of
MethodInvocation:of
MethodInvocation:equals
MethodInvocation:equals
MethodInvocation:makeCall
MethodInvocation:makeNullLiteral
MethodInvocation:getType
MethodInvocation:makeCall
MethodInvocation:makeCall
MethodInvocation:makeNullLiteral
MethodInvocation:getType
MethodInvocation:makeCall
MethodInvocation:simplify
Method-name:simplifyUsingPredicates
Method-returnType:RexNode
Method-parameters:[RexNode e, Class<C> clazz]
MethodInvocation:isEmpty
MethodInvocation:getKind
MethodInvocation:simplifyNotEqual
MethodInvocation:of
MethodInvocation:getValue
MethodInvocation:getValueAs
MethodInvocation:range
MethodInvocation:residue
MethodInvocation:makeLiteral
MethodInvocation:equals
MethodInvocation:equals
MethodInvocation:all
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:equals
MethodInvocation:lowerEndpoint
MethodInvocation:upperEndpoint
MethodInvocation:lowerBoundType
MethodInvocation:upperBoundType
MethodInvocation:makeLiteral
MethodInvocation:makeCall
MethodInvocation:makeLiteral
MethodInvocation:lowerEndpoint
MethodInvocation:getType
MethodInvocation:getTypeName
Method-name:residue
Method-returnType:Range<C>
Method-parameters:[RexNode ref, Range<C> r0, List<RexNode> predicates, Class<C> clazz]
MethodInvocation:getKind
MethodInvocation:equals
MethodInvocation:get
MethodInvocation:get
MethodInvocation:get
MethodInvocation:getValueAs
MethodInvocation:range
MethodInvocation:getKind
MethodInvocation:encloses
MethodInvocation:all
MethodInvocation:isConnected
MethodInvocation:intersection
Method-name:simplifyOr
Method-returnType:RexNode
Method-parameters:[RexCall call]
MethodInvocation:ensureParanoidOff
MethodInvocation:simplifyOr
Method-name:simplifyOr
Method-returnType:RexNode
Method-parameters:[RexCall call, RexUnknownAs unknownAs]
Method-name:simplifyOrs
Method-returnType:RexNode
Method-parameters:[List<RexNode> terms]
MethodInvocation:ensureParanoidOff
MethodInvocation:simplifyOrs
Method-name:ensureParanoidOff
Method-returnType:void
Method-parameters:[]
Method-name:simplifyOrs
Method-returnType:RexNode
Method-parameters:[List<RexNode> terms, RexUnknownAs unknownAs]
MethodInvocation:makeLiteral
MethodInvocation:size
MethodInvocation:get
MethodInvocation:getKind
MethodInvocation:isNullLiteral
MethodInvocation:remove
MethodInvocation:booleanValue
MethodInvocation:remove
MethodInvocation:of
MethodInvocation:get
MethodInvocation:put
MethodInvocation:getKind
MethodInvocation:getValue
MethodInvocation:getValue
FieldAccess:literal
MethodInvocation:of
MethodInvocation:compareTo
MethodInvocation:makeCall
MethodInvocation:makeNullLiteral
MethodInvocation:getType
MethodInvocation:simplify
MethodInvocation:makeCall
MethodInvocation:isAlwaysTrue
MethodInvocation:put
MethodInvocation:indexOf
MethodInvocation:set
MethodInvocation:remove
MethodInvocation:set
MethodInvocation:composeDisjunction
Method-name:verify
Method-returnType:void
Method-parameters:[RexNode before, RexNode simplified, RexUnknownAs unknownAs]
MethodInvocation:isAlwaysFalse
MethodInvocation:isAlwaysTrue
MethodInvocation:isAlwaysTrue
MethodInvocation:isAlwaysFalse
MethodInvocation:containsAll
MethodInvocation:assignments
MethodInvocation:evaluate
MethodInvocation:equals
MethodInvocation:evaluate
MethodInvocation:evaluate
MethodInvocation:getSqlTypeName
MethodInvocation:getType
MethodInvocation:toBoolean
MethodInvocation:toBoolean
MethodInvocation:equals
Method-name:simplifyCast
Method-returnType:RexNode
Method-parameters:[RexCall e]
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:simplify
MethodInvocation:sameTypeOrNarrowsNullability
MethodInvocation:getType
MethodInvocation:getType
MethodInvocation:isLosslessCast
MethodInvocation:get
FieldAccess:operands
MethodInvocation:getSqlTypeName
MethodInvocation:getType
MethodInvocation:getSqlTypeName
MethodInvocation:getType
MethodInvocation:sameTypeOrNarrowsNullability
MethodInvocation:getType
MethodInvocation:getType
MethodInvocation:isLosslessCast
MethodInvocation:getType
MethodInvocation:getType
MethodInvocation:getSqlTypeName
MethodInvocation:getType
MethodInvocation:getSqlTypeName
MethodInvocation:getType
MethodInvocation:getSqlTypeName
MethodInvocation:getType
MethodInvocation:getSqlTypeName
MethodInvocation:getType
MethodInvocation:makeCast
MethodInvocation:getType
MethodInvocation:getKind
MethodInvocation:getValueAs
MethodInvocation:getTypeName
MethodInvocation:canRemoveCastFromLiteral
MethodInvocation:getType
MethodInvocation:makeCast
MethodInvocation:getType
MethodInvocation:getTypeName
MethodInvocation:getSqlTypeName
MethodInvocation:getType
MethodInvocation:reduce
MethodInvocation:of
MethodInvocation:requireNonNull
MethodInvocation:getOnlyElement
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:makeCast
MethodInvocation:getType
Method-name:simplifyCeilFloor
Method-returnType:RexNode
Method-parameters:[RexCall e]
Method-name:canRollUp
Method-returnType:boolean
Method-parameters:[TimeUnit outer, TimeUnit inner]
MethodInvocation:ordinal
MethodInvocation:ordinal
Method-name:removeNullabilityCast
Method-returnType:RexNode
Method-parameters:[RexNode e]
MethodInvocation:removeNullabilityCast
MethodInvocation:getTypeFactory
Method-name:processRange
Method-returnType:RexNode
Method-parameters:[RexBuilder rexBuilder, List<RexNode> terms, Map<RexNode,Pair<Range<C>,List<RexNode>>> rangeTerms, RexNode term, RexNode ref, C v0, SqlKind comparison]
MethodInvocation:get
MethodInvocation:put
MethodInvocation:of
MethodInvocation:range
MethodInvocation:of
MethodInvocation:makeLiteral
MethodInvocation:contains
MethodInvocation:makeLiteral
MethodInvocation:put
MethodInvocation:of
MethodInvocation:singleton
MethodInvocation:of
MethodInvocation:replaceLast
MethodInvocation:hasUpperBound
MethodInvocation:compareTo
MethodInvocation:upperEndpoint
MethodInvocation:hasLowerBound
MethodInvocation:compareTo
MethodInvocation:lowerEndpoint
MethodInvocation:makeLiteral
MethodInvocation:range
MethodInvocation:lowerEndpoint
MethodInvocation:lowerBoundType
MethodInvocation:lessThan
MethodInvocation:isEmpty
MethodInvocation:makeLiteral
MethodInvocation:replaceLast
MethodInvocation:hasUpperBound
MethodInvocation:compareTo
MethodInvocation:upperEndpoint
MethodInvocation:hasLowerBound
MethodInvocation:compareTo
MethodInvocation:lowerEndpoint
MethodInvocation:makeLiteral
MethodInvocation:range
MethodInvocation:lowerEndpoint
MethodInvocation:lowerBoundType
MethodInvocation:atMost
MethodInvocation:isEmpty
MethodInvocation:makeLiteral
MethodInvocation:replaceLast
MethodInvocation:hasLowerBound
MethodInvocation:compareTo
MethodInvocation:lowerEndpoint
MethodInvocation:hasUpperBound
MethodInvocation:compareTo
MethodInvocation:upperEndpoint
MethodInvocation:makeLiteral
MethodInvocation:range
MethodInvocation:upperEndpoint
MethodInvocation:upperBoundType
MethodInvocation:greaterThan
MethodInvocation:isEmpty
MethodInvocation:makeLiteral
MethodInvocation:replaceLast
MethodInvocation:hasLowerBound
MethodInvocation:compareTo
MethodInvocation:lowerEndpoint
MethodInvocation:hasUpperBound
MethodInvocation:compareTo
MethodInvocation:upperEndpoint
MethodInvocation:makeLiteral
MethodInvocation:range
MethodInvocation:upperEndpoint
MethodInvocation:upperBoundType
MethodInvocation:atLeast
MethodInvocation:isEmpty
MethodInvocation:makeLiteral
MethodInvocation:replaceLast
MethodInvocation:builder
MethodInvocation:isUpperBound
MethodInvocation:replaceLast
MethodInvocation:add
MethodInvocation:add
MethodInvocation:put
MethodInvocation:of
MethodInvocation:build
MethodInvocation:builder
MethodInvocation:isLowerBound
MethodInvocation:replaceLast
MethodInvocation:add
MethodInvocation:add
MethodInvocation:put
MethodInvocation:of
MethodInvocation:build
Method-name:range
Method-returnType:Range<C>
Method-parameters:[SqlKind comparison, C c]
MethodInvocation:singleton
MethodInvocation:lessThan
MethodInvocation:atMost
MethodInvocation:greaterThan
MethodInvocation:atLeast
Method-name:of
Method-returnType:Predicate
Method-parameters:[RexNode t]
MethodInvocation:of
MethodInvocation:of
Class:Comparison
Field:ref
Field:kind
Field:literal
Method-name:Comparison
Method-returnType:null
Method-parameters:[RexNode ref, SqlKind kind, RexLiteral literal]
FieldAccess:ref
MethodInvocation:requireNonNull
FieldAccess:kind
MethodInvocation:requireNonNull
FieldAccess:literal
MethodInvocation:requireNonNull
Method-name:of
Method-returnType:Comparison
Method-parameters:[RexNode e]
MethodInvocation:of
MethodInvocation:isReferenceOrAccess
MethodInvocation:isDeterministic
Method-name:of
Method-returnType:Comparison
Method-parameters:[RexNode e, java.util.function.Predicate<RexNode> nodePredicate]
MethodInvocation:getKind
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:getKind
MethodInvocation:test
MethodInvocation:getKind
MethodInvocation:getKind
MethodInvocation:test
MethodInvocation:reverse
MethodInvocation:getKind
Class:IsPredicate
Field:ref
Field:kind
Method-name:IsPredicate
Method-returnType:null
Method-parameters:[RexNode ref, SqlKind kind]
FieldAccess:ref
MethodInvocation:requireNonNull
FieldAccess:kind
MethodInvocation:requireNonNull
Method-name:of
Method-returnType:IsPredicate
Method-parameters:[RexNode e]
MethodInvocation:getKind
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:isReferenceOrAccess
MethodInvocation:getKind
Method-name:isUpperBound
Method-returnType:boolean
Method-parameters:[final RexNode e]
MethodInvocation:getKind
MethodInvocation:getOperands
MethodInvocation:isReferenceOrAccess
MethodInvocation:get
MethodInvocation:isA
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:isReferenceOrAccess
MethodInvocation:get
MethodInvocation:isA
MethodInvocation:get
Method-name:isLowerBound
Method-returnType:boolean
Method-parameters:[final RexNode e]
MethodInvocation:getKind
MethodInvocation:getOperands
MethodInvocation:isReferenceOrAccess
MethodInvocation:get
MethodInvocation:isA
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:isReferenceOrAccess
MethodInvocation:get
MethodInvocation:isA
MethodInvocation:get
Method-name:simplifyFilterPredicates
Method-returnType:RexNode
Method-parameters:[Iterable<? extends RexNode> predicates]
MethodInvocation:simplifyUnknownAsFalse
MethodInvocation:withPredicateElimination
MethodInvocation:composeConjunction
MethodInvocation:isAlwaysFalse
MethodInvocation:removeNullabilityCast
Method-name:replaceLast
Method-returnType:boolean
Method-parameters:[List<E> list, E oldVal, E newVal]
MethodInvocation:lastIndexOf
MethodInvocation:set
