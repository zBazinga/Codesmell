Class:MaterializedViewRule
Field:generateUnionRewriting
Field:unionRewritingPullProgram
Field:fastBailOut
Method-name:MaterializedViewRule
Method-returnType:null
Method-parameters:[RelOptRuleOperand operand, RelBuilderFactory relBuilderFactory, String description, boolean generateUnionRewriting, HepProgram unionRewritingPullProgram, boolean fastBailOut]
FieldAccess:generateUnionRewriting
FieldAccess:unionRewritingPullProgram
FieldAccess:fastBailOut
Method-name:matches
Method-returnType:boolean
Method-parameters:[RelOptRuleCall call]
MethodInvocation:isEmpty
MethodInvocation:getMaterializations
MethodInvocation:getPlanner
Method-name:perform
Method-returnType:void
Method-parameters:[RelOptRuleCall call, Project topProject, RelNode node]
Method-name:isValidPlan
Method-returnType:boolean
Method-parameters:[Project topProject, RelNode node, RelMetadataQuery mq]
Method-name:compensateViewPartial
Method-returnType:ViewPartialRewriting
Method-parameters:[RelBuilder relBuilder, RexBuilder rexBuilder, RelMetadataQuery mq, RelNode input, Project topProject, RelNode node, Set<RelTableRef> queryTableRefs, EquivalenceClasses queryEC, Project topViewProject, RelNode viewNode, Set<RelTableRef> viewTableRefs]
Method-name:rewriteQuery
Method-returnType:RelNode
Method-parameters:[RelBuilder relBuilder, RexBuilder rexBuilder, RexSimplify simplify, RelMetadataQuery mq, RexNode compensationColumnsEquiPred, RexNode otherCompensationPred, Project topProject, RelNode node, BiMap<RelTableRef,RelTableRef> viewToQueryTableMapping, EquivalenceClasses viewEC, EquivalenceClasses queryEC]
Method-name:createUnion
Method-returnType:RelNode
Method-parameters:[RelBuilder relBuilder, RexBuilder rexBuilder, RelNode topProject, RelNode unionInputQuery, RelNode unionInputView]
Method-name:rewriteView
Method-returnType:RelNode
Method-parameters:[RelBuilder relBuilder, RexBuilder rexBuilder, RexSimplify simplify, RelMetadataQuery mq, MatchModality matchModality, boolean unionRewriting, RelNode input, Project topProject, RelNode node, Project topViewProject, RelNode viewNode, BiMap<RelTableRef,RelTableRef> queryToViewTableMapping, EquivalenceClasses queryEC]
Method-name:pushFilterToOriginalViewPlan
Method-returnType:Pair<RelNode,RelNode>
Method-parameters:[RelBuilder builder, RelNode topViewProject, RelNode viewNode, RexNode cond]
Method-name:extractReferences
Method-returnType:List<RexNode>
Method-parameters:[RexBuilder rexBuilder, RelNode node]
MethodInvocation:builder
MethodInvocation:getGroupCount
MethodInvocation:add
MethodInvocation:makeInputRef
MethodInvocation:getFieldCount
MethodInvocation:getRowType
MethodInvocation:add
MethodInvocation:makeInputRef
MethodInvocation:build
Method-name:generateTableMappings
Method-returnType:List<BiMap<RelTableRef,RelTableRef>>
Method-parameters:[Multimap<RelTableRef,RelTableRef> multiMapTables]
MethodInvocation:isEmpty
MethodInvocation:of
MethodInvocation:of
MethodInvocation:create
MethodInvocation:entrySet
MethodInvocation:asMap
MethodInvocation:size
MethodInvocation:getValue
MethodInvocation:next
MethodInvocation:iterator
MethodInvocation:getValue
MethodInvocation:put
MethodInvocation:getKey
MethodInvocation:builder
MethodInvocation:getValue
MethodInvocation:containsValue
MethodInvocation:create
MethodInvocation:put
MethodInvocation:getKey
MethodInvocation:add
MethodInvocation:build
Method-name:splitPredicates
Method-returnType:Pair<RexNode,RexNode>
Method-parameters:[RexBuilder rexBuilder, RexNode pred]
MethodInvocation:conjunctions
MethodInvocation:getKind
MethodInvocation:isReferenceOrAccess
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:isReferenceOrAccess
MethodInvocation:get
MethodInvocation:getOperands
MethodInvocation:add
MethodInvocation:add
MethodInvocation:add
MethodInvocation:of
MethodInvocation:composeConjunction
MethodInvocation:composeConjunction
Method-name:compensatePartial
Method-returnType:boolean
Method-parameters:[Set<RelTableRef> sourceTableRefs, EquivalenceClasses sourceEC, Set<RelTableRef> targetTableRefs, Multimap<RexTableInputRef,RexTableInputRef> compensationEquiColumns]
MethodInvocation:create
MethodInvocation:create
MethodInvocation:addVertex
MethodInvocation:put
MethodInvocation:getQualifiedName
MethodInvocation:contains
MethodInvocation:add
MethodInvocation:vertexSet
MethodInvocation:getReferentialConstraints
MethodInvocation:getTable
MethodInvocation:get
MethodInvocation:getTargetQualifiedName
MethodInvocation:create
MethodInvocation:getNumColumns
FieldAccess:source
MethodInvocation:get
MethodInvocation:getColumnPairs
MethodInvocation:getType
MethodInvocation:get
MethodInvocation:getFieldList
MethodInvocation:getRowType
MethodInvocation:getTable
MethodInvocation:of
FieldAccess:target
MethodInvocation:get
MethodInvocation:getColumnPairs
MethodInvocation:of
MethodInvocation:getType
MethodInvocation:get
MethodInvocation:getFieldList
MethodInvocation:getRowType
MethodInvocation:getTable
MethodInvocation:isNullable
MethodInvocation:containsKey
MethodInvocation:getEquivalenceClassesMap
MethodInvocation:contains
MethodInvocation:get
MethodInvocation:getEquivalenceClassesMap
MethodInvocation:put
MethodInvocation:getEdge
MethodInvocation:addEdge
MethodInvocation:putAll
MethodInvocation:vertexSet
MethodInvocation:size
MethodInvocation:getInwardEdges
MethodInvocation:isEmpty
MethodInvocation:getOutwardEdges
MethodInvocation:add
MethodInvocation:contains
MethodInvocation:putAll
FieldAccess:equiColumns
MethodInvocation:get
MethodInvocation:getInwardEdges
MethodInvocation:isEmpty
MethodInvocation:removeAllVertices
MethodInvocation:disjoint
MethodInvocation:vertexSet
Method-name:computeCompensationPredicates
Method-returnType:Pair<RexNode,RexNode>
Method-parameters:[RexBuilder rexBuilder, RexSimplify simplify, EquivalenceClasses sourceEC, Pair<RexNode,RexNode> sourcePreds, EquivalenceClasses targetEC, Pair<RexNode,RexNode> targetPreds, BiMap<RelTableRef,RelTableRef> sourceToTargetTableMapping]
MethodInvocation:generateEquivalenceClasses
MethodInvocation:swapColumnReferences
MethodInvocation:getEquivalenceClassesMap
MethodInvocation:swapTableColumnReferences
MethodInvocation:inverse
MethodInvocation:getEquivalenceClassesMap
MethodInvocation:splitFilter
MethodInvocation:of
Method-name:generateEquivalenceClasses
Method-returnType:RexNode
Method-parameters:[RexBuilder rexBuilder, EquivalenceClasses sourceEC, EquivalenceClasses targetEC]
MethodInvocation:isEmpty
MethodInvocation:getEquivalenceClasses
MethodInvocation:isEmpty
MethodInvocation:getEquivalenceClasses
MethodInvocation:makeLiteral
MethodInvocation:isEmpty
MethodInvocation:getEquivalenceClasses
MethodInvocation:isEmpty
MethodInvocation:getEquivalenceClasses
MethodInvocation:getEquivalenceClasses
MethodInvocation:getEquivalenceClasses
MethodInvocation:extractPossibleMapping
MethodInvocation:makeLiteral
MethodInvocation:size
MethodInvocation:containsKey
MethodInvocation:iterator
MethodInvocation:get
MethodInvocation:next
MethodInvocation:hasNext
MethodInvocation:makeCall
MethodInvocation:next
MethodInvocation:makeCall
MethodInvocation:get
MethodInvocation:get
MethodInvocation:removeAll
MethodInvocation:get
MethodInvocation:makeCall
MethodInvocation:next
MethodInvocation:iterator
MethodInvocation:get
MethodInvocation:makeCall
Method-name:extractPossibleMapping
Method-returnType:Multimap<Integer,Integer>
Method-parameters:[List<Set<RexTableInputRef>> sourceEquivalenceClasses, List<Set<RexTableInputRef>> targetEquivalenceClasses]
MethodInvocation:create
MethodInvocation:size
MethodInvocation:get
MethodInvocation:size
MethodInvocation:get
MethodInvocation:containsAll
MethodInvocation:put
Method-name:rewriteExpression
Method-returnType:RexNode
Method-parameters:[RexBuilder rexBuilder, RelMetadataQuery mq, RelNode targetNode, RelNode node, List<RexNode> nodeExprs, BiMap<RelTableRef,RelTableRef> tableMapping, EquivalenceClasses ec, boolean swapTableColumn, RexNode exprToRewrite]
Method-name:rewriteExpressions
Method-returnType:List<RexNode>
Method-parameters:[RexBuilder rexBuilder, RelMetadataQuery mq, RelNode targetNode, RelNode node, List<RexNode> nodeExprs, BiMap<RelTableRef,RelTableRef> tableMapping, EquivalenceClasses ec, boolean swapTableColumn, List<RexNode> exprsToRewrite]
MethodInvocation:generateSwapTableColumnReferencesLineage
MethodInvocation:generateSwapColumnTableReferencesLineage
MethodInvocation:size
MethodInvocation:replaceWithOriginalReferences
MethodInvocation:containsTableInputRef
MethodInvocation:add
Method-name:generateSwapTableColumnReferencesLineage
Method-returnType:NodeLineage
Method-parameters:[RexBuilder rexBuilder, RelMetadataQuery mq, RelNode node, BiMap<RelTableRef,RelTableRef> tableMapping, EquivalenceClasses ec, List<RexNode> nodeExprs]
Method-name:generateSwapColumnTableReferencesLineage
Method-returnType:NodeLineage
Method-parameters:[RexBuilder rexBuilder, RelMetadataQuery mq, RelNode node, BiMap<RelTableRef,RelTableRef> tableMapping, EquivalenceClasses ec, List<RexNode> nodeExprs]
MethodInvocation:size
MethodInvocation:getExpressionLineage
MethodInvocation:get
MethodInvocation:getOnlyElement
MethodInvocation:swapColumnTableReferences
MethodInvocation:getEquivalenceClassesMap
MethodInvocation:put
MethodInvocation:isLosslessCast
MethodInvocation:put
MethodInvocation:get
MethodInvocation:getOperands
Method-name:replaceWithOriginalReferences
Method-returnType:RexNode
Method-parameters:[final RexBuilder rexBuilder, final RelNode node, final NodeLineage nodeLineage, final RexNode exprToRewrite]
Method-name:visitCall
Method-returnType:RexNode
Method-parameters:[RexCall call]
MethodInvocation:replace
Method-name:visitTableInputRef
Method-returnType:RexNode
Method-parameters:[RexTableInputRef inputRef]
MethodInvocation:replace
Method-name:replace
Method-returnType:RexNode
Method-parameters:[RexNode e]
MethodInvocation:get
MethodInvocation:makeInputRef
MethodInvocation:get
MethodInvocation:makeCast
MethodInvocation:getType
MethodInvocation:makeInputRef
MethodInvocation:apply
Method-name:shuttleReferences
Method-returnType:RexNode
Method-parameters:[final RexBuilder rexBuilder, final RexNode node, final Mapping mapping]
Method-name:visitInputRef
Method-returnType:RexNode
Method-parameters:[RexInputRef inputRef]
MethodInvocation:getTargetOpt
MethodInvocation:getIndex
MethodInvocation:makeInputRef
MethodInvocation:getType
MethodInvocation:apply
MethodInvocation:swallow
Method-name:shuttleReferences
Method-returnType:RexNode
Method-parameters:[final RexBuilder rexBuilder, final RexNode expr, final Multimap<RexNode,Integer> exprsLineage]
MethodInvocation:shuttleReferences
Method-name:shuttleReferences
Method-returnType:RexNode
Method-parameters:[final RexBuilder rexBuilder, final RexNode expr, final Multimap<RexNode,Integer> exprsLineage, final RelNode node, final Multimap<Integer,Integer> rewritingMapping]
Method-name:visitTableInputRef
Method-returnType:RexNode
Method-parameters:[RexTableInputRef ref]
MethodInvocation:get
MethodInvocation:isEmpty
MethodInvocation:next
MethodInvocation:iterator
MethodInvocation:containsKey
MethodInvocation:next
MethodInvocation:iterator
MethodInvocation:get
MethodInvocation:makeInputRef
MethodInvocation:makeInputRef
MethodInvocation:getType
Method-name:visitInputRef
Method-returnType:RexNode
Method-parameters:[RexInputRef inputRef]
MethodInvocation:get
MethodInvocation:isEmpty
MethodInvocation:next
MethodInvocation:iterator
MethodInvocation:containsKey
MethodInvocation:next
MethodInvocation:iterator
MethodInvocation:get
MethodInvocation:makeInputRef
MethodInvocation:makeInputRef
MethodInvocation:getType
Method-name:visitCall
Method-returnType:RexNode
Method-parameters:[final RexCall call]
MethodInvocation:get
MethodInvocation:isEmpty
MethodInvocation:next
MethodInvocation:iterator
MethodInvocation:containsKey
MethodInvocation:next
MethodInvocation:iterator
MethodInvocation:get
MethodInvocation:makeInputRef
MethodInvocation:makeInputRef
MethodInvocation:getType
MethodInvocation:apply
MethodInvocation:swallow
Class:EquivalenceClasses
Field:nodeToEquivalenceClass
Field:cacheEquivalenceClassesMap
Field:cacheEquivalenceClasses
Method-name:EquivalenceClasses
Method-returnType:null
Method-parameters:[]
MethodInvocation:of
MethodInvocation:of
Method-name:addEquivalenceClass
Method-returnType:void
Method-parameters:[RexTableInputRef p1, RexTableInputRef p2]
MethodInvocation:get
MethodInvocation:get
MethodInvocation:size
MethodInvocation:size
MethodInvocation:add
MethodInvocation:put
MethodInvocation:add
MethodInvocation:put
MethodInvocation:add
MethodInvocation:put
MethodInvocation:add
MethodInvocation:add
MethodInvocation:put
MethodInvocation:put
Method-name:getEquivalenceClassesMap
Method-returnType:Map<RexTableInputRef,Set<RexTableInputRef>>
Method-parameters:[]
MethodInvocation:copyOf
Method-name:getEquivalenceClasses
Method-returnType:List<Set<RexTableInputRef>>
Method-parameters:[]
MethodInvocation:builder
MethodInvocation:values
MethodInvocation:disjoint
MethodInvocation:add
MethodInvocation:addAll
MethodInvocation:build
Method-name:copy
Method-returnType:EquivalenceClasses
Method-parameters:[EquivalenceClasses ec]
MethodInvocation:entrySet
MethodInvocation:put
MethodInvocation:getKey
MethodInvocation:newLinkedHashSet
MethodInvocation:getValue
Class:NodeLineage
Field:exprsLineage
Field:exprsLineageLosslessCasts
Method-name:NodeLineage
Method-returnType:null
Method-parameters:[Map<RexNode,Integer> exprsLineage, Map<RexNode,Integer> exprsLineageLosslessCasts]
FieldAccess:exprsLineage
MethodInvocation:copyOf
FieldAccess:exprsLineageLosslessCasts
MethodInvocation:copyOf
Class:Edge
Field:equiColumns
MethodInvocation:create
Method-name:Edge
Method-returnType:null
Method-parameters:[RelTableRef source, RelTableRef target]
Method-name:toString
Method-returnType:String
Method-parameters:[]
Class:ViewPartialRewriting
Field:newView
Field:newTopViewProject
Field:newViewNode
Method-name:ViewPartialRewriting
Method-returnType:null
Method-parameters:[RelNode newView, Project newTopViewProject, RelNode newViewNode]
FieldAccess:newView
FieldAccess:newTopViewProject
FieldAccess:newViewNode
Method-name:of
Method-returnType:ViewPartialRewriting
Method-parameters:[RelNode newView, Project newTopViewProject, RelNode newViewNode]
Field:MatchModality
