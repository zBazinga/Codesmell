Class:ServerHandshaker
Field:CLIENT_CERTIFICATE
Field:EMPTY_CLIENT_CERTIFICATE
Field:NO_CLIENT_CERTIFICATE
Field:useNoSessionId
Field:clientAuthenticationWanted
Field:clientAuthenticationRequired
Field:clientPublicKey
Field:cipherSuiteSelector
Field:supportedCipherSuites
Field:supportedGroups
Field:supportedClientCertificateTypes
Field:supportedServerCertificateTypes
Field:supportedSignatureAndHashAlgorithms
Field:selectedCipherSuiteParameters
Field:clientCertificate
Field:certificateVerify
Field:preSharedKeyIdentity
Field:ecdhe
Method-name:ServerHandshaker
Method-returnType:null
Method-parameters:[int initialMessageSequenceNo, DTLSSession session, RecordLayer recordLayer, Connection connection, DtlsConnectorConfig config, int maxTransmissionUnit]
FieldAccess:cipherSuiteSelector
MethodInvocation:getCipherSuiteSelector
FieldAccess:supportedCipherSuites
MethodInvocation:getSupportedCipherSuites
FieldAccess:supportedGroups
MethodInvocation:getSupportedGroups
FieldAccess:clientAuthenticationWanted
MethodInvocation:isClientAuthenticationWanted
FieldAccess:clientAuthenticationRequired
MethodInvocation:isClientAuthenticationRequired
FieldAccess:useNoSessionId
MethodInvocation:useNoServerSessionId
FieldAccess:supportedClientCertificateTypes
MethodInvocation:getTrustCertificateTypes
FieldAccess:supportedServerCertificateTypes
MethodInvocation:getIdentityCertificateTypes
FieldAccess:supportedSignatureAndHashAlgorithms
MethodInvocation:getSupportedSignatureAlgorithms
Method-name:getPreSharedKeyIdentity
Method-returnType:PskPublicInformation
Method-parameters:[]
Method-name:doProcessMessage
Method-returnType:void
Method-parameters:[HandshakeMessage message]
MethodInvocation:getMessageType
MethodInvocation:receivedClientHello
MethodInvocation:receivedClientCertificate
MethodInvocation:getKeyExchangeAlgorithm
MethodInvocation:receivedClientKeyExchange
MethodInvocation:processPskSecretResult
MethodInvocation:receivedClientKeyExchange
MethodInvocation:processPskSecretResult
MethodInvocation:receivedClientKeyExchange
MethodInvocation:processMasterSecret
MethodInvocation:format
MethodInvocation:name
MethodInvocation:getKeyExchangeAlgorithm
MethodInvocation:getPeer
MethodInvocation:receivedCertificateVerify
MethodInvocation:expectChangeCipherSpecMessage
MethodInvocation:receivedClientFinished
MethodInvocation:format
MethodInvocation:getMessageType
MethodInvocation:getPeer
MethodInvocation:getPeer
Method-name:processMasterSecret
Method-returnType:void
Method-parameters:[SecretKey masterSecret]
MethodInvocation:applyMasterSecret
MethodInvocation:destroy
MethodInvocation:getKeyExchangeAlgorithm
MethodInvocation:expectChangeCipherSpecMessage
Method-name:receivedClientCertificate
Method-returnType:void
Method-parameters:[final CertificateMessage message]
MethodInvocation:getPublicKey
MethodInvocation:getCertificateChain
MethodInvocation:debug
MethodInvocation:getPeer
MethodInvocation:verifyCertificate
Method-name:receivedCertificateVerify
Method-returnType:void
Method-parameters:[CertificateVerify message]
MethodInvocation:remove
MethodInvocation:size
MethodInvocation:verifySignature
MethodInvocation:add
MethodInvocation:setPeerIdentity
MethodInvocation:setPeerIdentity
Method-name:receivedClientFinished
Method-returnType:void
Method-parameters:[Finished message]
MethodInvocation:equals
MethodInvocation:getKeyExchangeAlgorithm
MethodInvocation:getPeer
MethodInvocation:getSession
MethodInvocation:getHandshakeMessageDigest
MethodInvocation:clone
MethodInvocation:getPeer
MethodInvocation:verifyData
MethodInvocation:getThreadLocalPseudoRandomFunctionMac
MethodInvocation:getCipherSuite
MethodInvocation:digest
MethodInvocation:getPeer
MethodInvocation:wrapMessage
MethodInvocation:setCurrentWriteState
MethodInvocation:update
MethodInvocation:toByteArray
MethodInvocation:getThreadLocalPseudoRandomFunctionMac
MethodInvocation:getCipherSuite
MethodInvocation:digest
MethodInvocation:getPeer
MethodInvocation:wrapMessage
MethodInvocation:sendLastFlight
MethodInvocation:sessionEstablished
Method-name:receivedClientHello
Method-returnType:void
Method-parameters:[final ClientHello clientHello]
MethodInvocation:handshakeStarted
MethodInvocation:getCookie
MethodInvocation:getSession
MethodInvocation:createServerHello
MethodInvocation:createCertificateMessage
MethodInvocation:createServerKeyExchange
MethodInvocation:createCertificateRequest
MethodInvocation:getPeer
MethodInvocation:wrapMessage
MethodInvocation:sendFlight
Method-name:createServerHello
Method-returnType:void
Method-parameters:[final ClientHello clientHello, final DTLSFlight flight]
MethodInvocation:negotiateProtocolVersion
MethodInvocation:getClientVersion
MethodInvocation:getRandom
MethodInvocation:emptySessionId
MethodInvocation:setSessionIdentifier
MethodInvocation:contains
MethodInvocation:getCompressionMethods
MethodInvocation:getPeer
MethodInvocation:setCompressionMethod
MethodInvocation:negotiateCipherSuite
MethodInvocation:processHelloExtensions
MethodInvocation:getCipherSuite
MethodInvocation:getCompressionMethod
MethodInvocation:getPeer
MethodInvocation:wrapMessage
Method-name:createCertificateMessage
Method-returnType:void
Method-parameters:[final ClientHello clientHello, final DTLSFlight flight]
MethodInvocation:requiresServerCertificateMessage
MethodInvocation:getCipherSuite
MethodInvocation:sendCertificateType
MethodInvocation:getEncoded
MethodInvocation:getPeer
MethodInvocation:sendCertificateType
MethodInvocation:getPeer
MethodInvocation:sendCertificateType
MethodInvocation:wrapMessage
Method-name:createServerKeyExchange
Method-returnType:void
Method-parameters:[final ClientHello clientHello, final DTLSFlight flight]
MethodInvocation:getKeyExchangeAlgorithm
MethodInvocation:getSelectedSupportedGroup
MethodInvocation:getSignatureAndHashAlgorithm
MethodInvocation:getPeer
MethodInvocation:format
MethodInvocation:getMessage
MethodInvocation:getPeerAddress
MethodInvocation:getSelectedSupportedGroup
MethodInvocation:getPeer
MethodInvocation:format
MethodInvocation:getMessage
MethodInvocation:getPeerAddress
MethodInvocation:wrapMessage
Method-name:createCertificateRequest
Method-returnType:boolean
Method-parameters:[final ClientHello clientHello, final DTLSFlight flight]
MethodInvocation:requiresServerCertificateMessage
MethodInvocation:getCipherSuite
MethodInvocation:getSelectedClientCertificateType
MethodInvocation:getPeer
MethodInvocation:addCertificateType
MethodInvocation:addSignatureAlgorithms
MethodInvocation:toSubjects
MethodInvocation:asList
MethodInvocation:getAcceptedIssuers
MethodInvocation:addCerticiateAuthorities
MethodInvocation:wrapMessage
Method-name:receivedClientKeyExchange
Method-returnType:SecretKey
Method-parameters:[ECDHClientKeyExchange message]
MethodInvocation:generateSecret
MethodInvocation:getEncodedPoint
MethodInvocation:generateMasterSecret
MethodInvocation:getThreadLocalPseudoRandomFunctionMac
MethodInvocation:getCipherSuite
MethodInvocation:generateRandomSeed
MethodInvocation:destroy
Method-name:receivedClientKeyExchange
Method-returnType:PskSecretResult
Method-parameters:[PSKClientKeyExchange message]
MethodInvocation:getIdentity
MethodInvocation:requestPskSecretResult
Method-name:receivedClientKeyExchange
Method-returnType:PskSecretResult
Method-parameters:[EcdhPskClientKeyExchange message]
MethodInvocation:getIdentity
MethodInvocation:generateSecret
MethodInvocation:getEncodedPoint
MethodInvocation:requestPskSecretResult
MethodInvocation:destroy
Method-name:processHelloExtensions
Method-returnType:void
Method-parameters:[final ClientHello clientHello, final HelloExtensions serverHelloExtensions]
MethodInvocation:getMaxFragmentLengthExtension
MethodInvocation:setMaxFragmentLength
MethodInvocation:length
MethodInvocation:getFragmentLength
MethodInvocation:addExtension
MethodInvocation:debug
MethodInvocation:length
MethodInvocation:getFragmentLength
MethodInvocation:getPeer
MethodInvocation:getServerNameExtension
MethodInvocation:setServerNames
MethodInvocation:getServerNames
MethodInvocation:addExtension
MethodInvocation:emptyServerNameIndication
MethodInvocation:setSniSupported
MethodInvocation:debug
MethodInvocation:getPeer
MethodInvocation:debug
MethodInvocation:getPeer
MethodInvocation:getConnectionIdExtension
MethodInvocation:setWriteConnectionId
MethodInvocation:getConnectionId
MethodInvocation:useConnectionId
MethodInvocation:getConnectionId
MethodInvocation:getConnection
MethodInvocation:fromConnectionId
MethodInvocation:addExtension
Method-name:startHandshake
Method-returnType:void
Method-parameters:[]
Method-name:negotiateProtocolVersion
Method-returnType:ProtocolVersion
Method-parameters:[ProtocolVersion clientVersion]
MethodInvocation:compareTo
MethodInvocation:getPeer
Method-name:negotiateCipherSuite
Method-returnType:void
Method-parameters:[final ClientHello clientHello, final HelloExtensions serverHelloExtensions]
MethodInvocation:getCommonCipherSuites
MethodInvocation:getCommonServerCertificateTypes
MethodInvocation:getCommonClientCertificateTypes
MethodInvocation:getCommonSupportedGroups
MethodInvocation:getCommonSignatureAndHashAlgorithms
MethodInvocation:negotiateECPointFormat
MethodInvocation:select
MethodInvocation:getSelectedCipherSuite
MethodInvocation:setCipherSuite
MethodInvocation:requiresServerCertificateMessage
MethodInvocation:setSignatureAndHashAlgorithm
MethodInvocation:getSelectedSignature
MethodInvocation:setSendCertificateType
MethodInvocation:getSelectedServerCertificateType
MethodInvocation:getSelectedClientCertificateType
MethodInvocation:setReceiveCertificateType
MethodInvocation:getSelectedClientCertificateType
MethodInvocation:addServerHelloExtensions
MethodInvocation:setParameterAvailable
MethodInvocation:debug
MethodInvocation:name
MethodInvocation:getPeerAddress
MethodInvocation:getPeer
Method-name:addServerHelloExtensions
Method-returnType:void
Method-parameters:[final CipherSuite negotiatedCipherSuite, final ClientHello clientHello, final HelloExtensions extensions]
MethodInvocation:receiveCertificateType
MethodInvocation:getClientCertificateTypeExtension
MethodInvocation:addExtension
MethodInvocation:sendCertificateType
MethodInvocation:getServerCertificateTypeExtension
MethodInvocation:addExtension
MethodInvocation:isEccBased
MethodInvocation:getSupportedPointFormatsExtension
MethodInvocation:addExtension
Method-name:getCommonSupportedGroups
Method-returnType:List<SupportedGroup>
Method-parameters:[ClientHello clientHello]
MethodInvocation:getSupportedEllipticCurvesExtension
MethodInvocation:addAll
MethodInvocation:getSupportedGroups
MethodInvocation:contains
MethodInvocation:add
Method-name:negotiateECPointFormat
Method-returnType:ECPointFormat
Method-parameters:[ClientHello clientHello]
MethodInvocation:getSupportedPointFormatsExtension
MethodInvocation:contains
Method-name:getCommonSignatureAndHashAlgorithms
Method-returnType:List<SignatureAndHashAlgorithm>
Method-parameters:[ClientHello clientHello]
MethodInvocation:getSupportedSignatureAlgorithms
MethodInvocation:addAll
MethodInvocation:getCommonSignatureAlgorithms
MethodInvocation:getSupportedSignatureAndHashAlgorithms
Method-name:getCommonCipherSuites
Method-returnType:List<CipherSuite>
Method-parameters:[ClientHello clientHello]
MethodInvocation:getCipherSuite
MethodInvocation:equals
MethodInvocation:asList
MethodInvocation:getCipherSuites
MethodInvocation:contains
MethodInvocation:add
Method-name:getCommonClientCertificateTypes
Method-returnType:List<CertificateType>
Method-parameters:[final ClientHello clientHello]
MethodInvocation:getPeerIdentity
MethodInvocation:add
MethodInvocation:add
MethodInvocation:getCommonCertificateTypes
MethodInvocation:getClientCertificateTypeExtension
Method-name:getCommonServerCertificateTypes
Method-returnType:List<CertificateType>
Method-parameters:[final ClientHello clientHello]
MethodInvocation:getCommonCertificateTypes
MethodInvocation:getServerCertificateTypeExtension
Method-name:getCommonCertificateTypes
Method-returnType:List<CertificateType>
Method-parameters:[CertificateTypeExtension certTypeExt, List<CertificateType> supportedCertificateTypes]
MethodInvocation:getCertificateTypes
MethodInvocation:contains
MethodInvocation:add
MethodInvocation:contains
MethodInvocation:add
Method-name:getNegotiatedClientCertificateType
Method-returnType:CertificateType
Method-parameters:[]
MethodInvocation:getSelectedClientCertificateType
Method-name:getNegotiatedServerCertificateType
Method-returnType:CertificateType
Method-parameters:[]
MethodInvocation:getSelectedServerCertificateType
Method-name:getNegotiatedSupportedGroup
Method-returnType:SupportedGroup
Method-parameters:[]
MethodInvocation:getSelectedSupportedGroup
Method-name:destroy
Method-returnType:void
Method-parameters:[]
MethodInvocation:destroy
