Class:AbstractReactiveTransactionManager
Field:logger
MethodInvocation:getLog
MethodInvocation:getClass
Method-name:getReactiveTransaction
Method-returnType:Mono<ReactiveTransaction>
Method-parameters:[@Nullable TransactionDefinition definition]
MethodInvocation:withDefaults
MethodInvocation:flatMap
MethodInvocation:forCurrentTransaction
MethodInvocation:doGetTransaction
MethodInvocation:isDebugEnabled
MethodInvocation:isExistingTransaction
MethodInvocation:handleExistingTransaction
MethodInvocation:getTimeout
MethodInvocation:error
MethodInvocation:getTimeout
MethodInvocation:getPropagationBehavior
MethodInvocation:error
MethodInvocation:getPropagationBehavior
MethodInvocation:getPropagationBehavior
MethodInvocation:getPropagationBehavior
MethodInvocation:flatMap
MethodInvocation:map
MethodInvocation:currentContext
MethodInvocation:flatMap
MethodInvocation:defaultIfEmpty
MethodInvocation:map
MethodInvocation:suspend
MethodInvocation:empty
MethodInvocation:debug
MethodInvocation:getName
MethodInvocation:onErrorResume
MethodInvocation:defer
MethodInvocation:newReactiveTransaction
MethodInvocation:orElse
MethodInvocation:thenReturn
MethodInvocation:doOnSuccess
MethodInvocation:doBegin
MethodInvocation:prepareSynchronization
MethodInvocation:then
MethodInvocation:resume
MethodInvocation:orElse
MethodInvocation:error
MethodInvocation:getIsolationLevel
MethodInvocation:isWarnEnabled
MethodInvocation:warn
MethodInvocation:just
MethodInvocation:prepareReactiveTransaction
Method-name:handleExistingTransaction
Method-returnType:Mono<ReactiveTransaction>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, TransactionDefinition definition, Object transaction, boolean debugEnabled]
MethodInvocation:getPropagationBehavior
MethodInvocation:error
MethodInvocation:getPropagationBehavior
MethodInvocation:debug
MethodInvocation:suspend
MethodInvocation:cast
MethodInvocation:switchIfEmpty
MethodInvocation:map
MethodInvocation:prepareReactiveTransaction
MethodInvocation:fromSupplier
MethodInvocation:prepareReactiveTransaction
MethodInvocation:getPropagationBehavior
MethodInvocation:debug
MethodInvocation:getName
MethodInvocation:suspend
MethodInvocation:flatMap
MethodInvocation:newReactiveTransaction
MethodInvocation:onErrorResume
MethodInvocation:thenReturn
MethodInvocation:doOnSuccess
MethodInvocation:doBegin
MethodInvocation:prepareSynchronization
MethodInvocation:then
MethodInvocation:resumeAfterBeginException
MethodInvocation:error
MethodInvocation:getPropagationBehavior
MethodInvocation:debug
MethodInvocation:getName
MethodInvocation:newReactiveTransaction
MethodInvocation:thenReturn
MethodInvocation:doOnSuccess
MethodInvocation:doBegin
MethodInvocation:prepareSynchronization
MethodInvocation:debug
MethodInvocation:just
MethodInvocation:prepareReactiveTransaction
Method-name:prepareReactiveTransaction
Method-returnType:GenericReactiveTransaction
Method-parameters:[TransactionSynchronizationManager synchronizationManager, TransactionDefinition definition, @Nullable Object transaction, boolean newTransaction, boolean debug, @Nullable Object suspendedResources]
MethodInvocation:newReactiveTransaction
MethodInvocation:prepareSynchronization
Method-name:newReactiveTransaction
Method-returnType:GenericReactiveTransaction
Method-parameters:[TransactionSynchronizationManager synchronizationManager, TransactionDefinition definition, @Nullable Object transaction, boolean newTransaction, boolean debug, @Nullable Object suspendedResources]
MethodInvocation:isSynchronizationActive
MethodInvocation:isReadOnly
Method-name:suspend
Method-returnType:Mono<SuspendedResourcesHolder>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, @Nullable Object transaction]
MethodInvocation:isSynchronizationActive
MethodInvocation:doSuspendSynchronization
MethodInvocation:flatMap
MethodInvocation:defaultIfEmpty
MethodInvocation:map
MethodInvocation:doSuspend
MethodInvocation:empty
MethodInvocation:just
MethodInvocation:empty
MethodInvocation:onErrorResume
MethodInvocation:map
MethodInvocation:getCurrentTransactionName
MethodInvocation:setCurrentTransactionName
MethodInvocation:isCurrentTransactionReadOnly
MethodInvocation:setCurrentTransactionReadOnly
MethodInvocation:getCurrentTransactionIsolationLevel
MethodInvocation:setCurrentTransactionIsolationLevel
MethodInvocation:isActualTransactionActive
MethodInvocation:setActualTransactionActive
MethodInvocation:orElse
MethodInvocation:cast
MethodInvocation:doResumeSynchronization
MethodInvocation:defaultIfEmpty
MethodInvocation:map
MethodInvocation:doSuspend
MethodInvocation:empty
MethodInvocation:map
MethodInvocation:orElse
MethodInvocation:empty
Method-name:resume
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, @Nullable Object transaction, @Nullable SuspendedResourcesHolder resourcesHolder]
MethodInvocation:empty
MethodInvocation:doResume
MethodInvocation:setActualTransactionActive
MethodInvocation:setCurrentTransactionIsolationLevel
MethodInvocation:setCurrentTransactionReadOnly
MethodInvocation:setCurrentTransactionName
MethodInvocation:then
MethodInvocation:doResumeSynchronization
Method-name:resumeAfterBeginException
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, Object transaction, @Nullable SuspendedResourcesHolder suspendedResources, Throwable beginEx]
MethodInvocation:doOnError
MethodInvocation:resume
MethodInvocation:error
Method-name:doSuspendSynchronization
Method-returnType:Mono<List<TransactionSynchronization>>
Method-parameters:[TransactionSynchronizationManager synchronizationManager]
MethodInvocation:getSynchronizations
MethodInvocation:then
MethodInvocation:concatMap
MethodInvocation:fromIterable
MethodInvocation:defer
MethodInvocation:clearSynchronization
MethodInvocation:just
Method-name:doResumeSynchronization
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, List<TransactionSynchronization> suspendedSynchronizations]
MethodInvocation:initSynchronization
MethodInvocation:then
MethodInvocation:concatMap
MethodInvocation:fromIterable
MethodInvocation:doOnSuccess
MethodInvocation:resume
MethodInvocation:registerSynchronization
Method-name:commit
Method-returnType:Mono<Void>
Method-parameters:[ReactiveTransaction transaction]
MethodInvocation:isCompleted
MethodInvocation:error
MethodInvocation:flatMap
MethodInvocation:forCurrentTransaction
MethodInvocation:isRollbackOnly
MethodInvocation:isDebug
MethodInvocation:debug
MethodInvocation:processRollback
MethodInvocation:processCommit
Method-name:processCommit
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, GenericReactiveTransaction status]
MethodInvocation:then
MethodInvocation:then
MethodInvocation:then
MethodInvocation:then
MethodInvocation:then
MethodInvocation:prepareForCommit
MethodInvocation:triggerBeforeCommit
MethodInvocation:triggerBeforeCompletion
MethodInvocation:defer
MethodInvocation:set
MethodInvocation:isNewTransaction
MethodInvocation:isDebug
MethodInvocation:debug
MethodInvocation:doCommit
MethodInvocation:empty
MethodInvocation:onErrorResume
MethodInvocation:empty
MethodInvocation:error
MethodInvocation:test
MethodInvocation:then
MethodInvocation:triggerAfterCompletion
MethodInvocation:test
MethodInvocation:then
MethodInvocation:triggerAfterCompletion
MethodInvocation:test
MethodInvocation:get
MethodInvocation:triggerBeforeCompletion
MethodInvocation:empty
MethodInvocation:then
MethodInvocation:then
MethodInvocation:doRollbackOnCommitException
MethodInvocation:defer
MethodInvocation:then
MethodInvocation:onErrorResume
MethodInvocation:triggerAfterCommit
MethodInvocation:then
MethodInvocation:triggerAfterCompletion
MethodInvocation:error
MethodInvocation:triggerAfterCompletion
MethodInvocation:then
MethodInvocation:onErrorResume
MethodInvocation:then
MethodInvocation:cleanupAfterCompletion
MethodInvocation:error
MethodInvocation:cleanupAfterCompletion
Method-name:rollback
Method-returnType:Mono<Void>
Method-parameters:[ReactiveTransaction transaction]
MethodInvocation:isCompleted
MethodInvocation:error
MethodInvocation:flatMap
MethodInvocation:forCurrentTransaction
MethodInvocation:processRollback
Method-name:processRollback
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, GenericReactiveTransaction status]
MethodInvocation:then
MethodInvocation:onErrorResume
MethodInvocation:then
MethodInvocation:onErrorResume
MethodInvocation:then
MethodInvocation:triggerBeforeCompletion
MethodInvocation:defer
MethodInvocation:isNewTransaction
MethodInvocation:isDebug
MethodInvocation:debug
MethodInvocation:doRollback
MethodInvocation:empty
MethodInvocation:hasTransaction
MethodInvocation:isDebug
MethodInvocation:debug
MethodInvocation:doSetRollbackOnly
MethodInvocation:debug
MethodInvocation:then
MethodInvocation:triggerAfterCompletion
MethodInvocation:error
MethodInvocation:defer
MethodInvocation:triggerAfterCompletion
MethodInvocation:then
MethodInvocation:cleanupAfterCompletion
MethodInvocation:error
MethodInvocation:cleanupAfterCompletion
Method-name:doRollbackOnCommitException
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, GenericReactiveTransaction status, Throwable ex]
MethodInvocation:then
MethodInvocation:onErrorResume
MethodInvocation:defer
MethodInvocation:isNewTransaction
MethodInvocation:isDebug
MethodInvocation:debug
MethodInvocation:doRollback
MethodInvocation:hasTransaction
MethodInvocation:isDebug
MethodInvocation:debug
MethodInvocation:doSetRollbackOnly
MethodInvocation:empty
MethodInvocation:error
MethodInvocation:then
MethodInvocation:triggerAfterCompletion
MethodInvocation:error
MethodInvocation:triggerAfterCompletion
Method-name:triggerBeforeCommit
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, GenericReactiveTransaction status]
MethodInvocation:isNewSynchronization
MethodInvocation:isDebug
MethodInvocation:trace
MethodInvocation:triggerBeforeCommit
MethodInvocation:getSynchronizations
MethodInvocation:isReadOnly
MethodInvocation:empty
Method-name:triggerBeforeCompletion
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, GenericReactiveTransaction status]
MethodInvocation:isNewSynchronization
MethodInvocation:isDebug
MethodInvocation:trace
MethodInvocation:triggerBeforeCompletion
MethodInvocation:getSynchronizations
MethodInvocation:empty
Method-name:triggerAfterCommit
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, GenericReactiveTransaction status]
MethodInvocation:isNewSynchronization
MethodInvocation:isDebug
MethodInvocation:trace
MethodInvocation:invokeAfterCommit
MethodInvocation:getSynchronizations
MethodInvocation:empty
Method-name:triggerAfterCompletion
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, GenericReactiveTransaction status, int completionStatus]
MethodInvocation:isNewSynchronization
MethodInvocation:getSynchronizations
MethodInvocation:clearSynchronization
MethodInvocation:hasTransaction
MethodInvocation:isNewTransaction
MethodInvocation:isDebug
MethodInvocation:trace
MethodInvocation:invokeAfterCompletion
MethodInvocation:isEmpty
MethodInvocation:registerAfterCompletionWithExistingTransaction
MethodInvocation:getTransaction
MethodInvocation:empty
Method-name:invokeAfterCompletion
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, List<TransactionSynchronization> synchronizations, int completionStatus]
MethodInvocation:invokeAfterCompletion
Method-name:cleanupAfterCompletion
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, GenericReactiveTransaction status]
MethodInvocation:defer
MethodInvocation:setCompleted
MethodInvocation:isNewSynchronization
MethodInvocation:clear
MethodInvocation:empty
MethodInvocation:isNewTransaction
MethodInvocation:doCleanupAfterCompletion
MethodInvocation:getTransaction
MethodInvocation:getSuspendedResources
MethodInvocation:isDebug
MethodInvocation:debug
MethodInvocation:hasTransaction
MethodInvocation:getTransaction
MethodInvocation:then
MethodInvocation:resume
MethodInvocation:getSuspendedResources
Method-name:doGetTransaction
Method-returnType:Object
Method-parameters:[TransactionSynchronizationManager synchronizationManager]
Method-name:isExistingTransaction
Method-returnType:boolean
Method-parameters:[Object transaction]
Method-name:doBegin
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, Object transaction, TransactionDefinition definition]
Method-name:doSuspend
Method-returnType:Mono<Object>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, Object transaction]
MethodInvocation:getName
MethodInvocation:getClass
Method-name:doResume
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, @Nullable Object transaction, Object suspendedResources]
MethodInvocation:getName
MethodInvocation:getClass
Method-name:prepareForCommit
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, GenericReactiveTransaction status]
MethodInvocation:empty
Method-name:doCommit
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, GenericReactiveTransaction status]
Method-name:doRollback
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, GenericReactiveTransaction status]
Method-name:doSetRollbackOnly
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, GenericReactiveTransaction status]
Method-name:registerAfterCompletionWithExistingTransaction
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, Object transaction, List<TransactionSynchronization> synchronizations]
MethodInvocation:debug
MethodInvocation:invokeAfterCompletion
Method-name:doCleanupAfterCompletion
Method-returnType:Mono<Void>
Method-parameters:[TransactionSynchronizationManager synchronizationManager, Object transaction]
MethodInvocation:empty
Method-name:readObject
Method-returnType:void
Method-parameters:[ObjectInputStream ois]
MethodInvocation:defaultReadObject
FieldAccess:logger
MethodInvocation:getLog
MethodInvocation:getClass
Class:SuspendedResourcesHolder
Field:suspendedResources
Field:suspendedSynchronizations
Field:name
Field:readOnly
Field:isolationLevel
Field:wasActive
Method-name:SuspendedResourcesHolder
Method-returnType:null
Method-parameters:[@Nullable Object suspendedResources]
FieldAccess:suspendedResources
Method-name:SuspendedResourcesHolder
Method-returnType:null
Method-parameters:[@Nullable Object suspendedResources, List<TransactionSynchronization> suspendedSynchronizations, @Nullable String name, boolean readOnly, @Nullable Integer isolationLevel, boolean wasActive]
FieldAccess:suspendedResources
FieldAccess:suspendedSynchronizations
FieldAccess:name
FieldAccess:readOnly
FieldAccess:isolationLevel
FieldAccess:wasActive
Field:ErrorPredicates
Method-name:test
Method-returnType:boolean
Method-parameters:[Throwable throwable]
Method-name:test
Method-returnType:boolean
Method-parameters:[Throwable throwable]
Method-name:test
Method-returnType:boolean
Method-parameters:[Throwable throwable]
Method-name:test
Method-returnType:boolean
Method-parameters:[Throwable throwable]
